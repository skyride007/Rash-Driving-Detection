
Discovery_Rash_Driving_Detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c614  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800c7a4  0800c7a4  0001c7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c890  0800c890  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c890  0800c890  0001c890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c898  0800c898  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c898  0800c898  0001c898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c89c  0800c89c  0001c89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800c8a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .neai         00000148  200000ac  0800c94c  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 11 .bss          00001510  200001f4  200001f4  000201f4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20001704  20001704  000201f4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 14 .comment      000000bc  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001868c  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003e38  00000000  00000000  0003896c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001410  00000000  00000000  0003c7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000f70  00000000  00000000  0003dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00024fe6  00000000  00000000  0003eb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001b619  00000000  00000000  00063b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000cf404  00000000  00000000  0007f127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005f30  00000000  00000000  0014e52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  0015445c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c78c 	.word	0x0800c78c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800c78c 	.word	0x0800c78c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__gedf2>:
 800083c:	f04f 3cff 	mov.w	ip, #4294967295
 8000840:	e006      	b.n	8000850 <__cmpdf2+0x4>
 8000842:	bf00      	nop

08000844 <__ledf2>:
 8000844:	f04f 0c01 	mov.w	ip, #1
 8000848:	e002      	b.n	8000850 <__cmpdf2+0x4>
 800084a:	bf00      	nop

0800084c <__cmpdf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800085c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000866:	d01b      	beq.n	80008a0 <__cmpdf2+0x54>
 8000868:	b001      	add	sp, #4
 800086a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800086e:	bf0c      	ite	eq
 8000870:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000874:	ea91 0f03 	teqne	r1, r3
 8000878:	bf02      	ittt	eq
 800087a:	ea90 0f02 	teqeq	r0, r2
 800087e:	2000      	moveq	r0, #0
 8000880:	4770      	bxeq	lr
 8000882:	f110 0f00 	cmn.w	r0, #0
 8000886:	ea91 0f03 	teq	r1, r3
 800088a:	bf58      	it	pl
 800088c:	4299      	cmppl	r1, r3
 800088e:	bf08      	it	eq
 8000890:	4290      	cmpeq	r0, r2
 8000892:	bf2c      	ite	cs
 8000894:	17d8      	asrcs	r0, r3, #31
 8000896:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800089a:	f040 0001 	orr.w	r0, r0, #1
 800089e:	4770      	bx	lr
 80008a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a8:	d102      	bne.n	80008b0 <__cmpdf2+0x64>
 80008aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ae:	d107      	bne.n	80008c0 <__cmpdf2+0x74>
 80008b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d1d6      	bne.n	8000868 <__cmpdf2+0x1c>
 80008ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008be:	d0d3      	beq.n	8000868 <__cmpdf2+0x1c>
 80008c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <__aeabi_cdrcmple>:
 80008c8:	4684      	mov	ip, r0
 80008ca:	4610      	mov	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	468c      	mov	ip, r1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4663      	mov	r3, ip
 80008d4:	e000      	b.n	80008d8 <__aeabi_cdcmpeq>
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdcmpeq>:
 80008d8:	b501      	push	{r0, lr}
 80008da:	f7ff ffb7 	bl	800084c <__cmpdf2>
 80008de:	2800      	cmp	r0, #0
 80008e0:	bf48      	it	mi
 80008e2:	f110 0f00 	cmnmi.w	r0, #0
 80008e6:	bd01      	pop	{r0, pc}

080008e8 <__aeabi_dcmpeq>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff fff4 	bl	80008d8 <__aeabi_cdcmpeq>
 80008f0:	bf0c      	ite	eq
 80008f2:	2001      	moveq	r0, #1
 80008f4:	2000      	movne	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_dcmplt>:
 80008fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000900:	f7ff ffea 	bl	80008d8 <__aeabi_cdcmpeq>
 8000904:	bf34      	ite	cc
 8000906:	2001      	movcc	r0, #1
 8000908:	2000      	movcs	r0, #0
 800090a:	f85d fb08 	ldr.w	pc, [sp], #8
 800090e:	bf00      	nop

08000910 <__aeabi_dcmple>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff ffe0 	bl	80008d8 <__aeabi_cdcmpeq>
 8000918:	bf94      	ite	ls
 800091a:	2001      	movls	r0, #1
 800091c:	2000      	movhi	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmpge>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffce 	bl	80008c8 <__aeabi_cdrcmple>
 800092c:	bf94      	ite	ls
 800092e:	2001      	movls	r0, #1
 8000930:	2000      	movhi	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmpgt>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffc4 	bl	80008c8 <__aeabi_cdrcmple>
 8000940:	bf34      	ite	cc
 8000942:	2001      	movcc	r0, #1
 8000944:	2000      	movcs	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_d2f>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000954:	bf24      	itt	cs
 8000956:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800095a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800095e:	d90d      	bls.n	800097c <__aeabi_d2f+0x30>
 8000960:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000964:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000968:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800096c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000970:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000974:	bf08      	it	eq
 8000976:	f020 0001 	biceq.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000980:	d121      	bne.n	80009c6 <__aeabi_d2f+0x7a>
 8000982:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000986:	bfbc      	itt	lt
 8000988:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800098c:	4770      	bxlt	lr
 800098e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000992:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000996:	f1c2 0218 	rsb	r2, r2, #24
 800099a:	f1c2 0c20 	rsb	ip, r2, #32
 800099e:	fa10 f30c 	lsls.w	r3, r0, ip
 80009a2:	fa20 f002 	lsr.w	r0, r0, r2
 80009a6:	bf18      	it	ne
 80009a8:	f040 0001 	orrne.w	r0, r0, #1
 80009ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b8:	ea40 000c 	orr.w	r0, r0, ip
 80009bc:	fa23 f302 	lsr.w	r3, r3, r2
 80009c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009c4:	e7cc      	b.n	8000960 <__aeabi_d2f+0x14>
 80009c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ca:	d107      	bne.n	80009dc <__aeabi_d2f+0x90>
 80009cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009d0:	bf1e      	ittt	ne
 80009d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009da:	4770      	bxne	lr
 80009dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_uldivmod>:
 80009ec:	b953      	cbnz	r3, 8000a04 <__aeabi_uldivmod+0x18>
 80009ee:	b94a      	cbnz	r2, 8000a04 <__aeabi_uldivmod+0x18>
 80009f0:	2900      	cmp	r1, #0
 80009f2:	bf08      	it	eq
 80009f4:	2800      	cmpeq	r0, #0
 80009f6:	bf1c      	itt	ne
 80009f8:	f04f 31ff 	movne.w	r1, #4294967295
 80009fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000a00:	f000 b970 	b.w	8000ce4 <__aeabi_idiv0>
 8000a04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a0c:	f000 f806 	bl	8000a1c <__udivmoddi4>
 8000a10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a18:	b004      	add	sp, #16
 8000a1a:	4770      	bx	lr

08000a1c <__udivmoddi4>:
 8000a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a20:	9e08      	ldr	r6, [sp, #32]
 8000a22:	460d      	mov	r5, r1
 8000a24:	4604      	mov	r4, r0
 8000a26:	460f      	mov	r7, r1
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d14a      	bne.n	8000ac2 <__udivmoddi4+0xa6>
 8000a2c:	428a      	cmp	r2, r1
 8000a2e:	4694      	mov	ip, r2
 8000a30:	d965      	bls.n	8000afe <__udivmoddi4+0xe2>
 8000a32:	fab2 f382 	clz	r3, r2
 8000a36:	b143      	cbz	r3, 8000a4a <__udivmoddi4+0x2e>
 8000a38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a3c:	f1c3 0220 	rsb	r2, r3, #32
 8000a40:	409f      	lsls	r7, r3
 8000a42:	fa20 f202 	lsr.w	r2, r0, r2
 8000a46:	4317      	orrs	r7, r2
 8000a48:	409c      	lsls	r4, r3
 8000a4a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a4e:	fa1f f58c 	uxth.w	r5, ip
 8000a52:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a56:	0c22      	lsrs	r2, r4, #16
 8000a58:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a5c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a60:	fb01 f005 	mul.w	r0, r1, r5
 8000a64:	4290      	cmp	r0, r2
 8000a66:	d90a      	bls.n	8000a7e <__udivmoddi4+0x62>
 8000a68:	eb1c 0202 	adds.w	r2, ip, r2
 8000a6c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a70:	f080 811c 	bcs.w	8000cac <__udivmoddi4+0x290>
 8000a74:	4290      	cmp	r0, r2
 8000a76:	f240 8119 	bls.w	8000cac <__udivmoddi4+0x290>
 8000a7a:	3902      	subs	r1, #2
 8000a7c:	4462      	add	r2, ip
 8000a7e:	1a12      	subs	r2, r2, r0
 8000a80:	b2a4      	uxth	r4, r4
 8000a82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a8e:	fb00 f505 	mul.w	r5, r0, r5
 8000a92:	42a5      	cmp	r5, r4
 8000a94:	d90a      	bls.n	8000aac <__udivmoddi4+0x90>
 8000a96:	eb1c 0404 	adds.w	r4, ip, r4
 8000a9a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a9e:	f080 8107 	bcs.w	8000cb0 <__udivmoddi4+0x294>
 8000aa2:	42a5      	cmp	r5, r4
 8000aa4:	f240 8104 	bls.w	8000cb0 <__udivmoddi4+0x294>
 8000aa8:	4464      	add	r4, ip
 8000aaa:	3802      	subs	r0, #2
 8000aac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab0:	1b64      	subs	r4, r4, r5
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	b11e      	cbz	r6, 8000abe <__udivmoddi4+0xa2>
 8000ab6:	40dc      	lsrs	r4, r3
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e9c6 4300 	strd	r4, r3, [r6]
 8000abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac2:	428b      	cmp	r3, r1
 8000ac4:	d908      	bls.n	8000ad8 <__udivmoddi4+0xbc>
 8000ac6:	2e00      	cmp	r6, #0
 8000ac8:	f000 80ed 	beq.w	8000ca6 <__udivmoddi4+0x28a>
 8000acc:	2100      	movs	r1, #0
 8000ace:	e9c6 0500 	strd	r0, r5, [r6]
 8000ad2:	4608      	mov	r0, r1
 8000ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad8:	fab3 f183 	clz	r1, r3
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d149      	bne.n	8000b74 <__udivmoddi4+0x158>
 8000ae0:	42ab      	cmp	r3, r5
 8000ae2:	d302      	bcc.n	8000aea <__udivmoddi4+0xce>
 8000ae4:	4282      	cmp	r2, r0
 8000ae6:	f200 80f8 	bhi.w	8000cda <__udivmoddi4+0x2be>
 8000aea:	1a84      	subs	r4, r0, r2
 8000aec:	eb65 0203 	sbc.w	r2, r5, r3
 8000af0:	2001      	movs	r0, #1
 8000af2:	4617      	mov	r7, r2
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	d0e2      	beq.n	8000abe <__udivmoddi4+0xa2>
 8000af8:	e9c6 4700 	strd	r4, r7, [r6]
 8000afc:	e7df      	b.n	8000abe <__udivmoddi4+0xa2>
 8000afe:	b902      	cbnz	r2, 8000b02 <__udivmoddi4+0xe6>
 8000b00:	deff      	udf	#255	; 0xff
 8000b02:	fab2 f382 	clz	r3, r2
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f040 8090 	bne.w	8000c2c <__udivmoddi4+0x210>
 8000b0c:	1a8a      	subs	r2, r1, r2
 8000b0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b12:	fa1f fe8c 	uxth.w	lr, ip
 8000b16:	2101      	movs	r1, #1
 8000b18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b20:	0c22      	lsrs	r2, r4, #16
 8000b22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b26:	fb0e f005 	mul.w	r0, lr, r5
 8000b2a:	4290      	cmp	r0, r2
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0x124>
 8000b2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b32:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x122>
 8000b38:	4290      	cmp	r0, r2
 8000b3a:	f200 80cb 	bhi.w	8000cd4 <__udivmoddi4+0x2b8>
 8000b3e:	4645      	mov	r5, r8
 8000b40:	1a12      	subs	r2, r2, r0
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b48:	fb07 2210 	mls	r2, r7, r0, r2
 8000b4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b50:	fb0e fe00 	mul.w	lr, lr, r0
 8000b54:	45a6      	cmp	lr, r4
 8000b56:	d908      	bls.n	8000b6a <__udivmoddi4+0x14e>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b60:	d202      	bcs.n	8000b68 <__udivmoddi4+0x14c>
 8000b62:	45a6      	cmp	lr, r4
 8000b64:	f200 80bb 	bhi.w	8000cde <__udivmoddi4+0x2c2>
 8000b68:	4610      	mov	r0, r2
 8000b6a:	eba4 040e 	sub.w	r4, r4, lr
 8000b6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b72:	e79f      	b.n	8000ab4 <__udivmoddi4+0x98>
 8000b74:	f1c1 0720 	rsb	r7, r1, #32
 8000b78:	408b      	lsls	r3, r1
 8000b7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b82:	fa05 f401 	lsl.w	r4, r5, r1
 8000b86:	fa20 f307 	lsr.w	r3, r0, r7
 8000b8a:	40fd      	lsrs	r5, r7
 8000b8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b90:	4323      	orrs	r3, r4
 8000b92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b96:	fa1f fe8c 	uxth.w	lr, ip
 8000b9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b9e:	0c1c      	lsrs	r4, r3, #16
 8000ba0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ba4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ba8:	42a5      	cmp	r5, r4
 8000baa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bae:	fa00 f001 	lsl.w	r0, r0, r1
 8000bb2:	d90b      	bls.n	8000bcc <__udivmoddi4+0x1b0>
 8000bb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bbc:	f080 8088 	bcs.w	8000cd0 <__udivmoddi4+0x2b4>
 8000bc0:	42a5      	cmp	r5, r4
 8000bc2:	f240 8085 	bls.w	8000cd0 <__udivmoddi4+0x2b4>
 8000bc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bca:	4464      	add	r4, ip
 8000bcc:	1b64      	subs	r4, r4, r5
 8000bce:	b29d      	uxth	r5, r3
 8000bd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000bd8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bdc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000be0:	45a6      	cmp	lr, r4
 8000be2:	d908      	bls.n	8000bf6 <__udivmoddi4+0x1da>
 8000be4:	eb1c 0404 	adds.w	r4, ip, r4
 8000be8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bec:	d26c      	bcs.n	8000cc8 <__udivmoddi4+0x2ac>
 8000bee:	45a6      	cmp	lr, r4
 8000bf0:	d96a      	bls.n	8000cc8 <__udivmoddi4+0x2ac>
 8000bf2:	3b02      	subs	r3, #2
 8000bf4:	4464      	add	r4, ip
 8000bf6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bfa:	fba3 9502 	umull	r9, r5, r3, r2
 8000bfe:	eba4 040e 	sub.w	r4, r4, lr
 8000c02:	42ac      	cmp	r4, r5
 8000c04:	46c8      	mov	r8, r9
 8000c06:	46ae      	mov	lr, r5
 8000c08:	d356      	bcc.n	8000cb8 <__udivmoddi4+0x29c>
 8000c0a:	d053      	beq.n	8000cb4 <__udivmoddi4+0x298>
 8000c0c:	b156      	cbz	r6, 8000c24 <__udivmoddi4+0x208>
 8000c0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c12:	eb64 040e 	sbc.w	r4, r4, lr
 8000c16:	fa04 f707 	lsl.w	r7, r4, r7
 8000c1a:	40ca      	lsrs	r2, r1
 8000c1c:	40cc      	lsrs	r4, r1
 8000c1e:	4317      	orrs	r7, r2
 8000c20:	e9c6 7400 	strd	r7, r4, [r6]
 8000c24:	4618      	mov	r0, r3
 8000c26:	2100      	movs	r1, #0
 8000c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2c:	f1c3 0120 	rsb	r1, r3, #32
 8000c30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c34:	fa20 f201 	lsr.w	r2, r0, r1
 8000c38:	fa25 f101 	lsr.w	r1, r5, r1
 8000c3c:	409d      	lsls	r5, r3
 8000c3e:	432a      	orrs	r2, r5
 8000c40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c50:	0c11      	lsrs	r1, r2, #16
 8000c52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c56:	fb00 f50e 	mul.w	r5, r0, lr
 8000c5a:	428d      	cmp	r5, r1
 8000c5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x258>
 8000c62:	eb1c 0101 	adds.w	r1, ip, r1
 8000c66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c6a:	d22f      	bcs.n	8000ccc <__udivmoddi4+0x2b0>
 8000c6c:	428d      	cmp	r5, r1
 8000c6e:	d92d      	bls.n	8000ccc <__udivmoddi4+0x2b0>
 8000c70:	3802      	subs	r0, #2
 8000c72:	4461      	add	r1, ip
 8000c74:	1b49      	subs	r1, r1, r5
 8000c76:	b292      	uxth	r2, r2
 8000c78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000c80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c84:	fb05 f10e 	mul.w	r1, r5, lr
 8000c88:	4291      	cmp	r1, r2
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x282>
 8000c8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c94:	d216      	bcs.n	8000cc4 <__udivmoddi4+0x2a8>
 8000c96:	4291      	cmp	r1, r2
 8000c98:	d914      	bls.n	8000cc4 <__udivmoddi4+0x2a8>
 8000c9a:	3d02      	subs	r5, #2
 8000c9c:	4462      	add	r2, ip
 8000c9e:	1a52      	subs	r2, r2, r1
 8000ca0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ca4:	e738      	b.n	8000b18 <__udivmoddi4+0xfc>
 8000ca6:	4631      	mov	r1, r6
 8000ca8:	4630      	mov	r0, r6
 8000caa:	e708      	b.n	8000abe <__udivmoddi4+0xa2>
 8000cac:	4639      	mov	r1, r7
 8000cae:	e6e6      	b.n	8000a7e <__udivmoddi4+0x62>
 8000cb0:	4610      	mov	r0, r2
 8000cb2:	e6fb      	b.n	8000aac <__udivmoddi4+0x90>
 8000cb4:	4548      	cmp	r0, r9
 8000cb6:	d2a9      	bcs.n	8000c0c <__udivmoddi4+0x1f0>
 8000cb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	e7a3      	b.n	8000c0c <__udivmoddi4+0x1f0>
 8000cc4:	4645      	mov	r5, r8
 8000cc6:	e7ea      	b.n	8000c9e <__udivmoddi4+0x282>
 8000cc8:	462b      	mov	r3, r5
 8000cca:	e794      	b.n	8000bf6 <__udivmoddi4+0x1da>
 8000ccc:	4640      	mov	r0, r8
 8000cce:	e7d1      	b.n	8000c74 <__udivmoddi4+0x258>
 8000cd0:	46d0      	mov	r8, sl
 8000cd2:	e77b      	b.n	8000bcc <__udivmoddi4+0x1b0>
 8000cd4:	3d02      	subs	r5, #2
 8000cd6:	4462      	add	r2, ip
 8000cd8:	e732      	b.n	8000b40 <__udivmoddi4+0x124>
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e70a      	b.n	8000af4 <__udivmoddi4+0xd8>
 8000cde:	4464      	add	r4, ip
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	e742      	b.n	8000b6a <__udivmoddi4+0x14e>

08000ce4 <__aeabi_idiv0>:
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <MPU6050_Init>:
int16_t gyro_data[3];

float Ax, Ay, Az, Gx, Gy, Gz;

void MPU6050_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af04      	add	r7, sp, #16
  uint8_t data;

  // Wake up MPU6050
  data = 0x00;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY);
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	9302      	str	r3, [sp, #8]
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	9301      	str	r3, [sp, #4]
 8000cfc:	1dfb      	adds	r3, r7, #7
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2301      	movs	r3, #1
 8000d02:	226b      	movs	r2, #107	; 0x6b
 8000d04:	21d0      	movs	r1, #208	; 0xd0
 8000d06:	4803      	ldr	r0, [pc, #12]	; (8000d14 <MPU6050_Init+0x2c>)
 8000d08:	f002 fff2 	bl	8003cf0 <HAL_I2C_Mem_Write>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000238 	.word	0x20000238

08000d18 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(int16_t* accel_data)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af04      	add	r7, sp, #16
 8000d1e:	6078      	str	r0, [r7, #4]
  uint8_t buffer[6];

  HAL_I2C_Mem_Read(&hi2c3, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H, 1, buffer, 6, HAL_MAX_DELAY);
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	9302      	str	r3, [sp, #8]
 8000d26:	2306      	movs	r3, #6
 8000d28:	9301      	str	r3, [sp, #4]
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	2301      	movs	r3, #1
 8000d32:	223b      	movs	r2, #59	; 0x3b
 8000d34:	21d0      	movs	r1, #208	; 0xd0
 8000d36:	4822      	ldr	r0, [pc, #136]	; (8000dc0 <MPU6050_Read_Accel+0xa8>)
 8000d38:	f003 f8d4 	bl	8003ee4 <HAL_I2C_Mem_Read>

  accel_data[0] = (int16_t)((buffer[0] << 8) | buffer[1]);
 8000d3c:	7a3b      	ldrb	r3, [r7, #8]
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	b21a      	sxth	r2, r3
 8000d42:	7a7b      	ldrb	r3, [r7, #9]
 8000d44:	b21b      	sxth	r3, r3
 8000d46:	4313      	orrs	r3, r2
 8000d48:	b21a      	sxth	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	801a      	strh	r2, [r3, #0]
  accel_data[1] = (int16_t)((buffer[2] << 8) | buffer[3]);
 8000d4e:	7abb      	ldrb	r3, [r7, #10]
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	b219      	sxth	r1, r3
 8000d54:	7afb      	ldrb	r3, [r7, #11]
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	b212      	sxth	r2, r2
 8000d60:	801a      	strh	r2, [r3, #0]
  accel_data[2] = (int16_t)((buffer[4] << 8) | buffer[5]);
 8000d62:	7b3b      	ldrb	r3, [r7, #12]
 8000d64:	021b      	lsls	r3, r3, #8
 8000d66:	b219      	sxth	r1, r3
 8000d68:	7b7b      	ldrb	r3, [r7, #13]
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3304      	adds	r3, #4
 8000d70:	430a      	orrs	r2, r1
 8000d72:	b212      	sxth	r2, r2
 8000d74:	801a      	strh	r2, [r3, #0]
       0                ±2g                16384 LSB/g
       1                ±4g                 8192 LSB/g
       2                ±8g                 4096 LSB/g
       3                ±16g                2048 LSB/g */

    Ax = accel_data[0];
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d7c:	ee07 3a90 	vmov	s15, r3
 8000d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MPU6050_Read_Accel+0xac>)
 8000d86:	edc3 7a00 	vstr	s15, [r3]
  	Ay = accel_data[1];
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d92:	ee07 3a90 	vmov	s15, r3
 8000d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MPU6050_Read_Accel+0xb0>)
 8000d9c:	edc3 7a00 	vstr	s15, [r3]
  	Az = accel_data[2];
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3304      	adds	r3, #4
 8000da4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da8:	ee07 3a90 	vmov	s15, r3
 8000dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MPU6050_Read_Accel+0xb4>)
 8000db2:	edc3 7a00 	vstr	s15, [r3]
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000238 	.word	0x20000238
 8000dc4:	20000220 	.word	0x20000220
 8000dc8:	20000224 	.word	0x20000224
 8000dcc:	20000228 	.word	0x20000228

08000dd0 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(int16_t* gyro_data)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af04      	add	r7, sp, #16
 8000dd6:	6078      	str	r0, [r7, #4]
  uint8_t buffer[6];

  HAL_I2C_Mem_Read(&hi2c3, MPU6050_ADDR, MPU6050_GYRO_XOUT_H, 1, buffer, 6, HAL_MAX_DELAY);
 8000dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ddc:	9302      	str	r3, [sp, #8]
 8000dde:	2306      	movs	r3, #6
 8000de0:	9301      	str	r3, [sp, #4]
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2301      	movs	r3, #1
 8000dea:	2243      	movs	r2, #67	; 0x43
 8000dec:	21d0      	movs	r1, #208	; 0xd0
 8000dee:	4822      	ldr	r0, [pc, #136]	; (8000e78 <MPU6050_Read_Gyro+0xa8>)
 8000df0:	f003 f878 	bl	8003ee4 <HAL_I2C_Mem_Read>

  gyro_data[0] = (int16_t)((buffer[0] << 8) | buffer[1]);
 8000df4:	7a3b      	ldrb	r3, [r7, #8]
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	7a7b      	ldrb	r3, [r7, #9]
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b21a      	sxth	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	801a      	strh	r2, [r3, #0]
  gyro_data[1] = (int16_t)((buffer[2] << 8) | buffer[3]);
 8000e06:	7abb      	ldrb	r3, [r7, #10]
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	b219      	sxth	r1, r3
 8000e0c:	7afb      	ldrb	r3, [r7, #11]
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3302      	adds	r3, #2
 8000e14:	430a      	orrs	r2, r1
 8000e16:	b212      	sxth	r2, r2
 8000e18:	801a      	strh	r2, [r3, #0]
  gyro_data[2] = (int16_t)((buffer[4] << 8) | buffer[5]);
 8000e1a:	7b3b      	ldrb	r3, [r7, #12]
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	b219      	sxth	r1, r3
 8000e20:	7b7b      	ldrb	r3, [r7, #13]
 8000e22:	b21a      	sxth	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3304      	adds	r3, #4
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	b212      	sxth	r2, r2
 8000e2c:	801a      	strh	r2, [r3, #0]
       0              ± 250 °/s            131 LSB/°/s
       1              ± 500 °/s           65.5 LSB/°/s
       2              ± 1000 °/s          32.8 LSB/°/s
       3              ± 2000 °/s          16.4 LSB/°/s */

  	Gx = gyro_data[0];
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e34:	ee07 3a90 	vmov	s15, r3
 8000e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MPU6050_Read_Gyro+0xac>)
 8000e3e:	edc3 7a00 	vstr	s15, [r3]
  	Gy = gyro_data[1];
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3302      	adds	r3, #2
 8000e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e4a:	ee07 3a90 	vmov	s15, r3
 8000e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MPU6050_Read_Gyro+0xb0>)
 8000e54:	edc3 7a00 	vstr	s15, [r3]
  	Gz = gyro_data[2];
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MPU6050_Read_Gyro+0xb4>)
 8000e6a:	edc3 7a00 	vstr	s15, [r3]
}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000238 	.word	0x20000238
 8000e7c:	2000022c 	.word	0x2000022c
 8000e80:	20000230 	.word	0x20000230
 8000e84:	20000234 	.word	0x20000234

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8e:	f000 fe83 	bl	8001b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e92:	f000 f82d 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e96:	f000 f97d 	bl	8001194 <MX_GPIO_Init>
  MX_I2S3_Init();
 8000e9a:	f000 f8c1 	bl	8001020 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000e9e:	f000 f8ef 	bl	8001080 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000ea2:	f008 fc39 	bl	8009718 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000ea6:	f000 f921 	bl	80010ec <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000eaa:	f000 f88b 	bl	8000fc4 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 8000eae:	f000 f947 	bl	8001140 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
MPU6050_Init();
 8000eb2:	f7ff ff19 	bl	8000ce8 <MPU6050_Init>

enum neai_state error_code = neai_anomalydetection_init();
 8000eb6:	f00a f87d 	bl	800afb4 <neai_anomalydetection_init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
      if (error_code != NEAI_OK) {
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <main+0x44>
        printf("Application Init Not Done!!!");
 8000ec4:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <main+0x60>)
 8000ec6:	f00a fc6d 	bl	800b7a4 <iprintf>
 8000eca:	e002      	b.n	8000ed2 <main+0x4a>
      }
      else
        printf("Application Init Done!!!");
 8000ecc:	4807      	ldr	r0, [pc, #28]	; (8000eec <main+0x64>)
 8000ece:	f00a fc69 	bl	800b7a4 <iprintf>


HAL_Delay(1000);
 8000ed2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed6:	f000 fed1 	bl	8001c7c <HAL_Delay>

Train();
 8000eda:	f000 fadb 	bl	8001494 <Train>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Inference();
 8000ede:	f000 fb09 	bl	80014f4 <Inference>
	  //Log();

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000ee2:	f008 fc3f 	bl	8009764 <MX_USB_HOST_Process>
	  Inference();
 8000ee6:	e7fa      	b.n	8000ede <main+0x56>
 8000ee8:	0800c7a4 	.word	0x0800c7a4
 8000eec:	0800c7c4 	.word	0x0800c7c4

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b094      	sub	sp, #80	; 0x50
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0320 	add.w	r3, r7, #32
 8000efa:	2230      	movs	r2, #48	; 0x30
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00a fd96 	bl	800ba30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <SystemClock_Config+0xcc>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	4a27      	ldr	r2, [pc, #156]	; (8000fbc <SystemClock_Config+0xcc>)
 8000f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f22:	6413      	str	r3, [r2, #64]	; 0x40
 8000f24:	4b25      	ldr	r3, [pc, #148]	; (8000fbc <SystemClock_Config+0xcc>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <SystemClock_Config+0xd0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a21      	ldr	r2, [pc, #132]	; (8000fc0 <SystemClock_Config+0xd0>)
 8000f3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <SystemClock_Config+0xd0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f56:	2302      	movs	r3, #2
 8000f58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f60:	2308      	movs	r3, #8
 8000f62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f64:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f6e:	2307      	movs	r3, #7
 8000f70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	4618      	mov	r0, r3
 8000f78:	f004 f9d6 	bl	8005328 <HAL_RCC_OscConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f82:	f000 faf5 	bl	8001570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f86:	230f      	movs	r3, #15
 8000f88:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	2105      	movs	r1, #5
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f004 fc37 	bl	8005818 <HAL_RCC_ClockConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fb0:	f000 fade 	bl	8001570 <Error_Handler>
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	3750      	adds	r7, #80	; 0x50
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40007000 	.word	0x40007000

08000fc4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_I2C3_Init+0x50>)
 8000fca:	4a13      	ldr	r2, [pc, #76]	; (8001018 <MX_I2C3_Init+0x54>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_I2C3_Init+0x50>)
 8000fd0:	4a12      	ldr	r2, [pc, #72]	; (800101c <MX_I2C3_Init+0x58>)
 8000fd2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_I2C3_Init+0x50>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_I2C3_Init+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_I2C3_Init+0x50>)
 8000fe2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fe6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <MX_I2C3_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_I2C3_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <MX_I2C3_Init+0x50>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_I2C3_Init+0x50>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <MX_I2C3_Init+0x50>)
 8001002:	f002 fd31 	bl	8003a68 <HAL_I2C_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800100c:	f000 fab0 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000238 	.word	0x20000238
 8001018:	40005c00 	.word	0x40005c00
 800101c:	000186a0 	.word	0x000186a0

08001020 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <MX_I2S3_Init+0x54>)
 8001026:	4a14      	ldr	r2, [pc, #80]	; (8001078 <MX_I2S3_Init+0x58>)
 8001028:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_I2S3_Init+0x54>)
 800102c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001030:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <MX_I2S3_Init+0x54>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_I2S3_Init+0x54>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <MX_I2S3_Init+0x54>)
 8001040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001044:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <MX_I2S3_Init+0x54>)
 8001048:	4a0c      	ldr	r2, [pc, #48]	; (800107c <MX_I2S3_Init+0x5c>)
 800104a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_I2S3_Init+0x54>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <MX_I2S3_Init+0x54>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_I2S3_Init+0x54>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_I2S3_Init+0x54>)
 8001060:	f003 fcc2 	bl	80049e8 <HAL_I2S_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800106a:	f000 fa81 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2000028c 	.word	0x2000028c
 8001078:	40003c00 	.word	0x40003c00
 800107c:	00017700 	.word	0x00017700

08001080 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MX_SPI1_Init+0x64>)
 8001086:	4a18      	ldr	r2, [pc, #96]	; (80010e8 <MX_SPI1_Init+0x68>)
 8001088:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MX_SPI1_Init+0x64>)
 800108c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001090:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <MX_SPI1_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MX_SPI1_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_SPI1_Init+0x64>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_SPI1_Init+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_SPI1_Init+0x64>)
 80010ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_SPI1_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <MX_SPI1_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_SPI1_Init+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <MX_SPI1_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_SPI1_Init+0x64>)
 80010cc:	220a      	movs	r2, #10
 80010ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <MX_SPI1_Init+0x64>)
 80010d2:	f004 ff01 	bl	8005ed8 <HAL_SPI_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010dc:	f000 fa48 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200002d4 	.word	0x200002d4
 80010e8:	40013000 	.word	0x40013000

080010ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <MX_USART2_UART_Init+0x50>)
 80010f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 80010f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001112:	220c      	movs	r2, #12
 8001114:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001124:	f004 ff61 	bl	8005fea <HAL_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800112e:	f000 fa1f 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000032c 	.word	0x2000032c
 800113c:	40004400 	.word	0x40004400

08001140 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_USART3_UART_Init+0x4c>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_USART3_UART_Init+0x50>)
 8001148:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_USART3_UART_Init+0x4c>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_USART3_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_USART3_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_USART3_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_USART3_UART_Init+0x4c>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_USART3_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_USART3_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_USART3_UART_Init+0x4c>)
 8001178:	f004 ff37 	bl	8005fea <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001182:	f000 f9f5 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000370 	.word	0x20000370
 8001190:	40004800 	.word	0x40004800

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
 80011ae:	4b7a      	ldr	r3, [pc, #488]	; (8001398 <MX_GPIO_Init+0x204>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a79      	ldr	r2, [pc, #484]	; (8001398 <MX_GPIO_Init+0x204>)
 80011b4:	f043 0310 	orr.w	r3, r3, #16
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b77      	ldr	r3, [pc, #476]	; (8001398 <MX_GPIO_Init+0x204>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	4b73      	ldr	r3, [pc, #460]	; (8001398 <MX_GPIO_Init+0x204>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a72      	ldr	r2, [pc, #456]	; (8001398 <MX_GPIO_Init+0x204>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b70      	ldr	r3, [pc, #448]	; (8001398 <MX_GPIO_Init+0x204>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	4b6c      	ldr	r3, [pc, #432]	; (8001398 <MX_GPIO_Init+0x204>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a6b      	ldr	r2, [pc, #428]	; (8001398 <MX_GPIO_Init+0x204>)
 80011ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b69      	ldr	r3, [pc, #420]	; (8001398 <MX_GPIO_Init+0x204>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b65      	ldr	r3, [pc, #404]	; (8001398 <MX_GPIO_Init+0x204>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a64      	ldr	r2, [pc, #400]	; (8001398 <MX_GPIO_Init+0x204>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b62      	ldr	r3, [pc, #392]	; (8001398 <MX_GPIO_Init+0x204>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	4b5e      	ldr	r3, [pc, #376]	; (8001398 <MX_GPIO_Init+0x204>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a5d      	ldr	r2, [pc, #372]	; (8001398 <MX_GPIO_Init+0x204>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b5b      	ldr	r3, [pc, #364]	; (8001398 <MX_GPIO_Init+0x204>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b57      	ldr	r3, [pc, #348]	; (8001398 <MX_GPIO_Init+0x204>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a56      	ldr	r2, [pc, #344]	; (8001398 <MX_GPIO_Init+0x204>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b54      	ldr	r3, [pc, #336]	; (8001398 <MX_GPIO_Init+0x204>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	2108      	movs	r1, #8
 8001256:	4851      	ldr	r0, [pc, #324]	; (800139c <MX_GPIO_Init+0x208>)
 8001258:	f000 ffe2 	bl	8002220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800125c:	2201      	movs	r2, #1
 800125e:	2101      	movs	r1, #1
 8001260:	484f      	ldr	r0, [pc, #316]	; (80013a0 <MX_GPIO_Init+0x20c>)
 8001262:	f000 ffdd 	bl	8002220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001266:	2200      	movs	r2, #0
 8001268:	f24f 0110 	movw	r1, #61456	; 0xf010
 800126c:	484d      	ldr	r0, [pc, #308]	; (80013a4 <MX_GPIO_Init+0x210>)
 800126e:	f000 ffd7 	bl	8002220 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001272:	2308      	movs	r3, #8
 8001274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001276:	2301      	movs	r3, #1
 8001278:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	4619      	mov	r1, r3
 8001288:	4844      	ldr	r0, [pc, #272]	; (800139c <MX_GPIO_Init+0x208>)
 800128a:	f000 fe2d 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800128e:	2301      	movs	r3, #1
 8001290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	483e      	ldr	r0, [pc, #248]	; (80013a0 <MX_GPIO_Init+0x20c>)
 80012a6:	f000 fe1f 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80012aa:	2308      	movs	r3, #8
 80012ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ba:	2305      	movs	r3, #5
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	4619      	mov	r1, r3
 80012c4:	4836      	ldr	r0, [pc, #216]	; (80013a0 <MX_GPIO_Init+0x20c>)
 80012c6:	f000 fe0f 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012ca:	2301      	movs	r3, #1
 80012cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012ce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	4832      	ldr	r0, [pc, #200]	; (80013a8 <MX_GPIO_Init+0x214>)
 80012e0:	f000 fe02 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80012e4:	2304      	movs	r3, #4
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	482d      	ldr	r0, [pc, #180]	; (80013ac <MX_GPIO_Init+0x218>)
 80012f8:	f000 fdf6 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80012fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800130e:	2305      	movs	r3, #5
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	4824      	ldr	r0, [pc, #144]	; (80013ac <MX_GPIO_Init+0x218>)
 800131a:	f000 fde5 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800131e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001322:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	481b      	ldr	r0, [pc, #108]	; (80013a4 <MX_GPIO_Init+0x210>)
 8001338:	f000 fdd6 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800133c:	2320      	movs	r3, #32
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	4815      	ldr	r0, [pc, #84]	; (80013a4 <MX_GPIO_Init+0x210>)
 8001350:	f000 fdca 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001354:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135a:	2312      	movs	r3, #18
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800135e:	2301      	movs	r3, #1
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001366:	2304      	movs	r3, #4
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	480e      	ldr	r0, [pc, #56]	; (80013ac <MX_GPIO_Init+0x218>)
 8001372:	f000 fdb9 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001376:	2302      	movs	r3, #2
 8001378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800137a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	4804      	ldr	r0, [pc, #16]	; (800139c <MX_GPIO_Init+0x208>)
 800138c:	f000 fdac 	bl	8001ee8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001390:	bf00      	nop
 8001392:	3730      	adds	r7, #48	; 0x30
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800
 800139c:	40021000 	.word	0x40021000
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020c00 	.word	0x40020c00
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400

080013b0 <fill_mpu_buffer>:

/* USER CODE BEGIN 4 */
void fill_mpu_buffer() {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
	for (int i = 0; i < DATA_INPUT_USER; i++) {
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	e050      	b.n	800145e <fill_mpu_buffer+0xae>
		MPU6050_Read_Accel(accel_data);
 80013bc:	482c      	ldr	r0, [pc, #176]	; (8001470 <fill_mpu_buffer+0xc0>)
 80013be:	f7ff fcab 	bl	8000d18 <MPU6050_Read_Accel>
		MPU6050_Read_Gyro(gyro_data);
 80013c2:	482c      	ldr	r0, [pc, #176]	; (8001474 <fill_mpu_buffer+0xc4>)
 80013c4:	f7ff fd04 	bl	8000dd0 <MPU6050_Read_Gyro>
		mpu_buffer[AXIS_NUMBER * i] = Ax;
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4618      	mov	r0, r3
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <fill_mpu_buffer+0xc8>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4928      	ldr	r1, [pc, #160]	; (800147c <fill_mpu_buffer+0xcc>)
 80013da:	0083      	lsls	r3, r0, #2
 80013dc:	440b      	add	r3, r1
 80013de:	601a      	str	r2, [r3, #0]
		mpu_buffer[AXIS_NUMBER * i + 1] = Ay;
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	3301      	adds	r3, #1
 80013ec:	4a24      	ldr	r2, [pc, #144]	; (8001480 <fill_mpu_buffer+0xd0>)
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	4922      	ldr	r1, [pc, #136]	; (800147c <fill_mpu_buffer+0xcc>)
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	601a      	str	r2, [r3, #0]
		mpu_buffer[AXIS_NUMBER * i + 2] = Az;
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	3302      	adds	r3, #2
 8001404:	4a1f      	ldr	r2, [pc, #124]	; (8001484 <fill_mpu_buffer+0xd4>)
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	491c      	ldr	r1, [pc, #112]	; (800147c <fill_mpu_buffer+0xcc>)
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	601a      	str	r2, [r3, #0]
		mpu_buffer[AXIS_NUMBER * i + 3] = Gx;
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	3303      	adds	r3, #3
 800141c:	4a1a      	ldr	r2, [pc, #104]	; (8001488 <fill_mpu_buffer+0xd8>)
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	4916      	ldr	r1, [pc, #88]	; (800147c <fill_mpu_buffer+0xcc>)
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	601a      	str	r2, [r3, #0]
		mpu_buffer[AXIS_NUMBER * i + 4] = Gy;
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	3304      	adds	r3, #4
 8001434:	4a15      	ldr	r2, [pc, #84]	; (800148c <fill_mpu_buffer+0xdc>)
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	4910      	ldr	r1, [pc, #64]	; (800147c <fill_mpu_buffer+0xcc>)
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	601a      	str	r2, [r3, #0]
		mpu_buffer[AXIS_NUMBER * i + 5] = Gz;
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	3305      	adds	r3, #5
 800144c:	4a10      	ldr	r2, [pc, #64]	; (8001490 <fill_mpu_buffer+0xe0>)
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	490a      	ldr	r1, [pc, #40]	; (800147c <fill_mpu_buffer+0xcc>)
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < DATA_INPUT_USER; i++) {
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3301      	adds	r3, #1
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b3f      	cmp	r3, #63	; 0x3f
 8001462:	ddab      	ble.n	80013bc <fill_mpu_buffer+0xc>
	}
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000210 	.word	0x20000210
 8001474:	20000218 	.word	0x20000218
 8001478:	20000220 	.word	0x20000220
 800147c:	200003b8 	.word	0x200003b8
 8001480:	20000224 	.word	0x20000224
 8001484:	20000228 	.word	0x20000228
 8001488:	2000022c 	.word	0x2000022c
 800148c:	20000230 	.word	0x20000230
 8001490:	20000234 	.word	0x20000234

08001494 <Train>:

void Train(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
   for (int i = 0; i < NUMBER_LEARN; i++) {
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	e014      	b.n	80014ca <Train+0x36>
   fill_mpu_buffer();
 80014a0:	f7ff ff86 	bl	80013b0 <fill_mpu_buffer>
   neai_anomalydetection_learn(mpu_buffer);
 80014a4:	480e      	ldr	r0, [pc, #56]	; (80014e0 <Train+0x4c>)
 80014a6:	f009 fdd3 	bl	800b050 <neai_anomalydetection_learn>
   printf("Training Cycle No: ");
 80014aa:	480e      	ldr	r0, [pc, #56]	; (80014e4 <Train+0x50>)
 80014ac:	f00a f97a 	bl	800b7a4 <iprintf>
   printf("%d",i);
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	480d      	ldr	r0, [pc, #52]	; (80014e8 <Train+0x54>)
 80014b4:	f00a f976 	bl	800b7a4 <iprintf>
   printf("\r\n");
 80014b8:	480c      	ldr	r0, [pc, #48]	; (80014ec <Train+0x58>)
 80014ba:	f00a f9d9 	bl	800b870 <puts>
   HAL_Delay(200);
 80014be:	20c8      	movs	r0, #200	; 0xc8
 80014c0:	f000 fbdc 	bl	8001c7c <HAL_Delay>
   for (int i = 0; i < NUMBER_LEARN; i++) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3301      	adds	r3, #1
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b31      	cmp	r3, #49	; 0x31
 80014ce:	dde7      	ble.n	80014a0 <Train+0xc>
  }
  printf("Training Done\n\r");
 80014d0:	4807      	ldr	r0, [pc, #28]	; (80014f0 <Train+0x5c>)
 80014d2:	f00a f967 	bl	800b7a4 <iprintf>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200003b8 	.word	0x200003b8
 80014e4:	0800c7e0 	.word	0x0800c7e0
 80014e8:	0800c7f4 	.word	0x0800c7f4
 80014ec:	0800c7f8 	.word	0x0800c7f8
 80014f0:	0800c7fc 	.word	0x0800c7fc

080014f4 <Inference>:


void Inference(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0

  fill_mpu_buffer();
 80014f8:	f7ff ff5a 	bl	80013b0 <fill_mpu_buffer>
  neai_anomalydetection_detect(mpu_buffer, &similarity);
 80014fc:	490d      	ldr	r1, [pc, #52]	; (8001534 <Inference+0x40>)
 80014fe:	480e      	ldr	r0, [pc, #56]	; (8001538 <Inference+0x44>)
 8001500:	f009 fee6 	bl	800b2d0 <neai_anomalydetection_detect>
  printf("Similarity Score is: ");
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <Inference+0x48>)
 8001506:	f00a f94d 	bl	800b7a4 <iprintf>
  printf("%d",similarity);
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <Inference+0x40>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4619      	mov	r1, r3
 8001510:	480b      	ldr	r0, [pc, #44]	; (8001540 <Inference+0x4c>)
 8001512:	f00a f947 	bl	800b7a4 <iprintf>
  printf("\r\n");
 8001516:	480b      	ldr	r0, [pc, #44]	; (8001544 <Inference+0x50>)
 8001518:	f00a f9aa 	bl	800b870 <puts>
  if (similarity<90)
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <Inference+0x40>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b59      	cmp	r3, #89	; 0x59
 8001522:	d802      	bhi.n	800152a <Inference+0x36>
  	  {
	  	  printf("RASH DRIVING DETECTED\n\r\n\r");
 8001524:	4808      	ldr	r0, [pc, #32]	; (8001548 <Inference+0x54>)
 8001526:	f00a f93d 	bl	800b7a4 <iprintf>
  	  }
  HAL_Delay(200);
 800152a:	20c8      	movs	r0, #200	; 0xc8
 800152c:	f000 fba6 	bl	8001c7c <HAL_Delay>
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200003b4 	.word	0x200003b4
 8001538:	200003b8 	.word	0x200003b8
 800153c:	0800c80c 	.word	0x0800c80c
 8001540:	0800c7f4 	.word	0x0800c7f4
 8001544:	0800c7f8 	.word	0x0800c7f8
 8001548:	0800c824 	.word	0x0800c824

0800154c <__io_putchar>:
	    	  HAL_Delay(100);

}*/


int __io_putchar(int ch) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001554:	1d39      	adds	r1, r7, #4
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
 800155a:	2201      	movs	r2, #1
 800155c:	4803      	ldr	r0, [pc, #12]	; (800156c <__io_putchar+0x20>)
 800155e:	f004 fd91 	bl	8006084 <HAL_UART_Transmit>
  return ch;
 8001562:	687b      	ldr	r3, [r7, #4]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2000032c 	.word	0x2000032c

08001570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
}
 8001576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001578:	e7fe      	b.n	8001578 <Error_Handler+0x8>
	...

0800157c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <HAL_MspInit+0x4c>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	4a0f      	ldr	r2, [pc, #60]	; (80015c8 <HAL_MspInit+0x4c>)
 800158c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001590:	6453      	str	r3, [r2, #68]	; 0x44
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <HAL_MspInit+0x4c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_MspInit+0x4c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <HAL_MspInit+0x4c>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_MspInit+0x4c>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015ba:	2007      	movs	r0, #7
 80015bc:	f000 fc52 	bl	8001e64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40023800 	.word	0x40023800

080015cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a29      	ldr	r2, [pc, #164]	; (8001690 <HAL_I2C_MspInit+0xc4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d14b      	bne.n	8001686 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b28      	ldr	r3, [pc, #160]	; (8001694 <HAL_I2C_MspInit+0xc8>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a27      	ldr	r2, [pc, #156]	; (8001694 <HAL_I2C_MspInit+0xc8>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b25      	ldr	r3, [pc, #148]	; (8001694 <HAL_I2C_MspInit+0xc8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b21      	ldr	r3, [pc, #132]	; (8001694 <HAL_I2C_MspInit+0xc8>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a20      	ldr	r2, [pc, #128]	; (8001694 <HAL_I2C_MspInit+0xc8>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_I2C_MspInit+0xc8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162c:	2312      	movs	r3, #18
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001638:	2304      	movs	r3, #4
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	4815      	ldr	r0, [pc, #84]	; (8001698 <HAL_I2C_MspInit+0xcc>)
 8001644:	f000 fc50 	bl	8001ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164e:	2312      	movs	r3, #18
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800165a:	2304      	movs	r3, #4
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	480d      	ldr	r0, [pc, #52]	; (800169c <HAL_I2C_MspInit+0xd0>)
 8001666:	f000 fc3f 	bl	8001ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_I2C_MspInit+0xc8>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <HAL_I2C_MspInit+0xc8>)
 8001674:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_I2C_MspInit+0xc8>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40005c00 	.word	0x40005c00
 8001694:	40023800 	.word	0x40023800
 8001698:	40020800 	.word	0x40020800
 800169c:	40020000 	.word	0x40020000

080016a0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08e      	sub	sp, #56	; 0x38
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a31      	ldr	r2, [pc, #196]	; (8001790 <HAL_I2S_MspInit+0xf0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d15a      	bne.n	8001786 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80016d0:	2301      	movs	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80016d4:	23c0      	movs	r3, #192	; 0xc0
 80016d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80016d8:	2302      	movs	r3, #2
 80016da:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4618      	mov	r0, r3
 80016e2:	f004 fab9 	bl	8005c58 <HAL_RCCEx_PeriphCLKConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80016ec:	f7ff ff40 	bl	8001570 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_I2S_MspInit+0xf4>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	4a26      	ldr	r2, [pc, #152]	; (8001794 <HAL_I2S_MspInit+0xf4>)
 80016fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_I2S_MspInit+0xf4>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_I2S_MspInit+0xf4>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	4a1f      	ldr	r2, [pc, #124]	; (8001794 <HAL_I2S_MspInit+0xf4>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6313      	str	r3, [r2, #48]	; 0x30
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_I2S_MspInit+0xf4>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_I2S_MspInit+0xf4>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	4a18      	ldr	r2, [pc, #96]	; (8001794 <HAL_I2S_MspInit+0xf4>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	6313      	str	r3, [r2, #48]	; 0x30
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_I2S_MspInit+0xf4>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001744:	2310      	movs	r3, #16
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001754:	2306      	movs	r3, #6
 8001756:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175c:	4619      	mov	r1, r3
 800175e:	480e      	ldr	r0, [pc, #56]	; (8001798 <HAL_I2S_MspInit+0xf8>)
 8001760:	f000 fbc2 	bl	8001ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001764:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001776:	2306      	movs	r3, #6
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177e:	4619      	mov	r1, r3
 8001780:	4806      	ldr	r0, [pc, #24]	; (800179c <HAL_I2S_MspInit+0xfc>)
 8001782:	f000 fbb1 	bl	8001ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001786:	bf00      	nop
 8001788:	3738      	adds	r7, #56	; 0x38
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40003c00 	.word	0x40003c00
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	40020800 	.word	0x40020800

080017a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a19      	ldr	r2, [pc, #100]	; (8001824 <HAL_SPI_MspInit+0x84>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d12b      	bne.n	800181a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_SPI_MspInit+0x88>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	4a17      	ldr	r2, [pc, #92]	; (8001828 <HAL_SPI_MspInit+0x88>)
 80017cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017d0:	6453      	str	r3, [r2, #68]	; 0x44
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_SPI_MspInit+0x88>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_SPI_MspInit+0x88>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a10      	ldr	r2, [pc, #64]	; (8001828 <HAL_SPI_MspInit+0x88>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_SPI_MspInit+0x88>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80017fa:	23e0      	movs	r3, #224	; 0xe0
 80017fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800180a:	2305      	movs	r3, #5
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <HAL_SPI_MspInit+0x8c>)
 8001816:	f000 fb67 	bl	8001ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	; 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40013000 	.word	0x40013000
 8001828:	40023800 	.word	0x40023800
 800182c:	40020000 	.word	0x40020000

08001830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a42      	ldr	r2, [pc, #264]	; (8001958 <HAL_UART_MspInit+0x128>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d12c      	bne.n	80018ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	4b41      	ldr	r3, [pc, #260]	; (800195c <HAL_UART_MspInit+0x12c>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a40      	ldr	r2, [pc, #256]	; (800195c <HAL_UART_MspInit+0x12c>)
 800185c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b3e      	ldr	r3, [pc, #248]	; (800195c <HAL_UART_MspInit+0x12c>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	4b3a      	ldr	r3, [pc, #232]	; (800195c <HAL_UART_MspInit+0x12c>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a39      	ldr	r2, [pc, #228]	; (800195c <HAL_UART_MspInit+0x12c>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b37      	ldr	r3, [pc, #220]	; (800195c <HAL_UART_MspInit+0x12c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800188a:	230c      	movs	r3, #12
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	2303      	movs	r3, #3
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800189a:	2307      	movs	r3, #7
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4619      	mov	r1, r3
 80018a4:	482e      	ldr	r0, [pc, #184]	; (8001960 <HAL_UART_MspInit+0x130>)
 80018a6:	f000 fb1f 	bl	8001ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018aa:	e050      	b.n	800194e <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a2c      	ldr	r2, [pc, #176]	; (8001964 <HAL_UART_MspInit+0x134>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d14b      	bne.n	800194e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b28      	ldr	r3, [pc, #160]	; (800195c <HAL_UART_MspInit+0x12c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a27      	ldr	r2, [pc, #156]	; (800195c <HAL_UART_MspInit+0x12c>)
 80018c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
 80018c6:	4b25      	ldr	r3, [pc, #148]	; (800195c <HAL_UART_MspInit+0x12c>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b21      	ldr	r3, [pc, #132]	; (800195c <HAL_UART_MspInit+0x12c>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a20      	ldr	r2, [pc, #128]	; (800195c <HAL_UART_MspInit+0x12c>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <HAL_UART_MspInit+0x12c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b1a      	ldr	r3, [pc, #104]	; (800195c <HAL_UART_MspInit+0x12c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a19      	ldr	r2, [pc, #100]	; (800195c <HAL_UART_MspInit+0x12c>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <HAL_UART_MspInit+0x12c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800190a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800191c:	2307      	movs	r3, #7
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	4619      	mov	r1, r3
 8001926:	4810      	ldr	r0, [pc, #64]	; (8001968 <HAL_UART_MspInit+0x138>)
 8001928:	f000 fade 	bl	8001ee8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800192c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800193e:	2307      	movs	r3, #7
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001942:	f107 031c 	add.w	r3, r7, #28
 8001946:	4619      	mov	r1, r3
 8001948:	4808      	ldr	r0, [pc, #32]	; (800196c <HAL_UART_MspInit+0x13c>)
 800194a:	f000 facd 	bl	8001ee8 <HAL_GPIO_Init>
}
 800194e:	bf00      	nop
 8001950:	3730      	adds	r7, #48	; 0x30
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40004400 	.word	0x40004400
 800195c:	40023800 	.word	0x40023800
 8001960:	40020000 	.word	0x40020000
 8001964:	40004800 	.word	0x40004800
 8001968:	40020400 	.word	0x40020400
 800196c:	40020c00 	.word	0x40020c00

08001970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <NMI_Handler+0x4>

08001976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <HardFault_Handler+0x4>

0800197c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <MemManage_Handler+0x4>

08001982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001986:	e7fe      	b.n	8001986 <BusFault_Handler+0x4>

08001988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800198c:	e7fe      	b.n	800198c <UsageFault_Handler+0x4>

0800198e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019bc:	f000 f93e 	bl	8001c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <OTG_FS_IRQHandler+0x10>)
 80019ca:	f000 fead 	bl	8002728 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000d9c 	.word	0x20000d9c

080019d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e00a      	b.n	8001a00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ea:	f3af 8000 	nop.w
 80019ee:	4601      	mov	r1, r0
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	60ba      	str	r2, [r7, #8]
 80019f6:	b2ca      	uxtb	r2, r1
 80019f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dbf0      	blt.n	80019ea <_read+0x12>
  }

  return len;
 8001a08:	687b      	ldr	r3, [r7, #4]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	e009      	b.n	8001a38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fd8d 	bl	800154c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbf1      	blt.n	8001a24 <_write+0x12>
  }
  return len;
 8001a40:	687b      	ldr	r3, [r7, #4]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_close>:

int _close(int file)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a72:	605a      	str	r2, [r3, #4]
  return 0;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <_isatty>:

int _isatty(int file)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001abc:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <_sbrk+0x5c>)
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <_sbrk+0x60>)
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <_sbrk+0x64>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <_sbrk+0x68>)
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d207      	bcs.n	8001af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae4:	f00a f802 	bl	800baec <__errno>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	220c      	movs	r2, #12
 8001aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
 8001af2:	e009      	b.n	8001b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <_sbrk+0x64>)
 8001b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20020000 	.word	0x20020000
 8001b14:	00000400 	.word	0x00000400
 8001b18:	200009b8 	.word	0x200009b8
 8001b1c:	20001708 	.word	0x20001708

08001b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <SystemInit+0x20>)
 8001b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <SystemInit+0x20>)
 8001b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b48:	480d      	ldr	r0, [pc, #52]	; (8001b80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b4a:	490e      	ldr	r1, [pc, #56]	; (8001b84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b60:	4c0b      	ldr	r4, [pc, #44]	; (8001b90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b6e:	f7ff ffd7 	bl	8001b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b72:	f009 ffc1 	bl	800baf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b76:	f7ff f987 	bl	8000e88 <main>
  bx  lr    
 8001b7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b84:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001b88:	0800c8a0 	.word	0x0800c8a0
  ldr r2, =_sbss
 8001b8c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001b90:	20001704 	.word	0x20001704

08001b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b94:	e7fe      	b.n	8001b94 <ADC_IRQHandler>
	...

08001b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_Init+0x40>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <HAL_Init+0x40>)
 8001ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_Init+0x40>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <HAL_Init+0x40>)
 8001bae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <HAL_Init+0x40>)
 8001bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	f000 f94f 	bl	8001e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f000 f808 	bl	8001bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bcc:	f7ff fcd6 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023c00 	.word	0x40023c00

08001bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_InitTick+0x54>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_InitTick+0x58>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f967 	bl	8001ece <HAL_SYSTICK_Config>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00e      	b.n	8001c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b0f      	cmp	r3, #15
 8001c0e:	d80a      	bhi.n	8001c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c10:	2200      	movs	r2, #0
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f000 f92f 	bl	8001e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c1c:	4a06      	ldr	r2, [pc, #24]	; (8001c38 <HAL_InitTick+0x5c>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e000      	b.n	8001c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000008 	.word	0x20000008
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_IncTick+0x20>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_IncTick+0x24>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <HAL_IncTick+0x24>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	200009bc 	.word	0x200009bc

08001c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return uwTick;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HAL_GetTick+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	200009bc 	.word	0x200009bc

08001c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c84:	f7ff ffee 	bl	8001c64 <HAL_GetTick>
 8001c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c94:	d005      	beq.n	8001ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_Delay+0x44>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ca2:	bf00      	nop
 8001ca4:	f7ff ffde 	bl	8001c64 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d8f7      	bhi.n	8001ca4 <HAL_Delay+0x28>
  {
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000008 	.word	0x20000008

08001cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf6:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	60d3      	str	r3, [r2, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <__NVIC_GetPriorityGrouping+0x18>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	f003 0307 	and.w	r3, r3, #7
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	db0b      	blt.n	8001d52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	f003 021f 	and.w	r2, r3, #31
 8001d40:	4907      	ldr	r1, [pc, #28]	; (8001d60 <__NVIC_EnableIRQ+0x38>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	2001      	movs	r0, #1
 8001d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0a      	blt.n	8001d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	490c      	ldr	r1, [pc, #48]	; (8001db0 <__NVIC_SetPriority+0x4c>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d8c:	e00a      	b.n	8001da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4908      	ldr	r1, [pc, #32]	; (8001db4 <__NVIC_SetPriority+0x50>)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	0112      	lsls	r2, r2, #4
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	761a      	strb	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f1c3 0307 	rsb	r3, r3, #7
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf28      	it	cs
 8001dd6:	2304      	movcs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d902      	bls.n	8001de8 <NVIC_EncodePriority+0x30>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	e000      	b.n	8001dea <NVIC_EncodePriority+0x32>
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	4313      	orrs	r3, r2
         );
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e30:	d301      	bcc.n	8001e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00f      	b.n	8001e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <SysTick_Config+0x40>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3e:	210f      	movs	r1, #15
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f7ff ff8e 	bl	8001d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <SysTick_Config+0x40>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4e:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <SysTick_Config+0x40>)
 8001e50:	2207      	movs	r2, #7
 8001e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	e000e010 	.word	0xe000e010

08001e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ff29 	bl	8001cc4 <__NVIC_SetPriorityGrouping>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e8c:	f7ff ff3e 	bl	8001d0c <__NVIC_GetPriorityGrouping>
 8001e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	6978      	ldr	r0, [r7, #20]
 8001e98:	f7ff ff8e 	bl	8001db8 <NVIC_EncodePriority>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff5d 	bl	8001d64 <__NVIC_SetPriority>
}
 8001eaa:	bf00      	nop
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff31 	bl	8001d28 <__NVIC_EnableIRQ>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ffa2 	bl	8001e20 <SysTick_Config>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	e16b      	b.n	80021dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f04:	2201      	movs	r2, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	f040 815a 	bne.w	80021d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d005      	beq.n	8001f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d130      	bne.n	8001f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	2203      	movs	r2, #3
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f70:	2201      	movs	r2, #1
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 0201 	and.w	r2, r3, #1
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d017      	beq.n	8001fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d123      	bne.n	800202c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	08da      	lsrs	r2, r3, #3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3208      	adds	r2, #8
 8001fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	220f      	movs	r2, #15
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	08da      	lsrs	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3208      	adds	r2, #8
 8002026:	69b9      	ldr	r1, [r7, #24]
 8002028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	2203      	movs	r2, #3
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0203 	and.w	r2, r3, #3
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 80b4 	beq.w	80021d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b60      	ldr	r3, [pc, #384]	; (80021f4 <HAL_GPIO_Init+0x30c>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a5f      	ldr	r2, [pc, #380]	; (80021f4 <HAL_GPIO_Init+0x30c>)
 8002078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b5d      	ldr	r3, [pc, #372]	; (80021f4 <HAL_GPIO_Init+0x30c>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800208a:	4a5b      	ldr	r2, [pc, #364]	; (80021f8 <HAL_GPIO_Init+0x310>)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	220f      	movs	r2, #15
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a52      	ldr	r2, [pc, #328]	; (80021fc <HAL_GPIO_Init+0x314>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d02b      	beq.n	800210e <HAL_GPIO_Init+0x226>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a51      	ldr	r2, [pc, #324]	; (8002200 <HAL_GPIO_Init+0x318>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d025      	beq.n	800210a <HAL_GPIO_Init+0x222>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a50      	ldr	r2, [pc, #320]	; (8002204 <HAL_GPIO_Init+0x31c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d01f      	beq.n	8002106 <HAL_GPIO_Init+0x21e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4f      	ldr	r2, [pc, #316]	; (8002208 <HAL_GPIO_Init+0x320>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d019      	beq.n	8002102 <HAL_GPIO_Init+0x21a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4e      	ldr	r2, [pc, #312]	; (800220c <HAL_GPIO_Init+0x324>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d013      	beq.n	80020fe <HAL_GPIO_Init+0x216>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4d      	ldr	r2, [pc, #308]	; (8002210 <HAL_GPIO_Init+0x328>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00d      	beq.n	80020fa <HAL_GPIO_Init+0x212>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4c      	ldr	r2, [pc, #304]	; (8002214 <HAL_GPIO_Init+0x32c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d007      	beq.n	80020f6 <HAL_GPIO_Init+0x20e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4b      	ldr	r2, [pc, #300]	; (8002218 <HAL_GPIO_Init+0x330>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d101      	bne.n	80020f2 <HAL_GPIO_Init+0x20a>
 80020ee:	2307      	movs	r3, #7
 80020f0:	e00e      	b.n	8002110 <HAL_GPIO_Init+0x228>
 80020f2:	2308      	movs	r3, #8
 80020f4:	e00c      	b.n	8002110 <HAL_GPIO_Init+0x228>
 80020f6:	2306      	movs	r3, #6
 80020f8:	e00a      	b.n	8002110 <HAL_GPIO_Init+0x228>
 80020fa:	2305      	movs	r3, #5
 80020fc:	e008      	b.n	8002110 <HAL_GPIO_Init+0x228>
 80020fe:	2304      	movs	r3, #4
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x228>
 8002102:	2303      	movs	r3, #3
 8002104:	e004      	b.n	8002110 <HAL_GPIO_Init+0x228>
 8002106:	2302      	movs	r3, #2
 8002108:	e002      	b.n	8002110 <HAL_GPIO_Init+0x228>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_GPIO_Init+0x228>
 800210e:	2300      	movs	r3, #0
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	f002 0203 	and.w	r2, r2, #3
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	4093      	lsls	r3, r2
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002120:	4935      	ldr	r1, [pc, #212]	; (80021f8 <HAL_GPIO_Init+0x310>)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	3302      	adds	r3, #2
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800212e:	4b3b      	ldr	r3, [pc, #236]	; (800221c <HAL_GPIO_Init+0x334>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002152:	4a32      	ldr	r2, [pc, #200]	; (800221c <HAL_GPIO_Init+0x334>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002158:	4b30      	ldr	r3, [pc, #192]	; (800221c <HAL_GPIO_Init+0x334>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800217c:	4a27      	ldr	r2, [pc, #156]	; (800221c <HAL_GPIO_Init+0x334>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002182:	4b26      	ldr	r3, [pc, #152]	; (800221c <HAL_GPIO_Init+0x334>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021a6:	4a1d      	ldr	r2, [pc, #116]	; (800221c <HAL_GPIO_Init+0x334>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ac:	4b1b      	ldr	r3, [pc, #108]	; (800221c <HAL_GPIO_Init+0x334>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021d0:	4a12      	ldr	r2, [pc, #72]	; (800221c <HAL_GPIO_Init+0x334>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3301      	adds	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b0f      	cmp	r3, #15
 80021e0:	f67f ae90 	bls.w	8001f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	3724      	adds	r7, #36	; 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40013800 	.word	0x40013800
 80021fc:	40020000 	.word	0x40020000
 8002200:	40020400 	.word	0x40020400
 8002204:	40020800 	.word	0x40020800
 8002208:	40020c00 	.word	0x40020c00
 800220c:	40021000 	.word	0x40021000
 8002210:	40021400 	.word	0x40021400
 8002214:	40021800 	.word	0x40021800
 8002218:	40021c00 	.word	0x40021c00
 800221c:	40013c00 	.word	0x40013c00

08002220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	807b      	strh	r3, [r7, #2]
 800222c:	4613      	mov	r3, r2
 800222e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002230:	787b      	ldrb	r3, [r7, #1]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002236:	887a      	ldrh	r2, [r7, #2]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800223c:	e003      	b.n	8002246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	041a      	lsls	r2, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	619a      	str	r2, [r3, #24]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002252:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002254:	b08f      	sub	sp, #60	; 0x3c
 8002256:	af0a      	add	r7, sp, #40	; 0x28
 8002258:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e054      	b.n	800230e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f007 faa8 	bl	80097d4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2203      	movs	r2, #3
 8002288:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f004 fad4 	bl	8006850 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	603b      	str	r3, [r7, #0]
 80022ae:	687e      	ldr	r6, [r7, #4]
 80022b0:	466d      	mov	r5, sp
 80022b2:	f106 0410 	add.w	r4, r6, #16
 80022b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80022c6:	1d33      	adds	r3, r6, #4
 80022c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ca:	6838      	ldr	r0, [r7, #0]
 80022cc:	f004 fa4e 	bl	800676c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2101      	movs	r1, #1
 80022d6:	4618      	mov	r0, r3
 80022d8:	f004 facb 	bl	8006872 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	687e      	ldr	r6, [r7, #4]
 80022e4:	466d      	mov	r5, sp
 80022e6:	f106 0410 	add.w	r4, r6, #16
 80022ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80022fa:	1d33      	adds	r3, r6, #4
 80022fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022fe:	6838      	ldr	r0, [r7, #0]
 8002300:	f004 fc54 	bl	8006bac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002316 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002316:	b590      	push	{r4, r7, lr}
 8002318:	b089      	sub	sp, #36	; 0x24
 800231a:	af04      	add	r7, sp, #16
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	4608      	mov	r0, r1
 8002320:	4611      	mov	r1, r2
 8002322:	461a      	mov	r2, r3
 8002324:	4603      	mov	r3, r0
 8002326:	70fb      	strb	r3, [r7, #3]
 8002328:	460b      	mov	r3, r1
 800232a:	70bb      	strb	r3, [r7, #2]
 800232c:	4613      	mov	r3, r2
 800232e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_HCD_HC_Init+0x28>
 800233a:	2302      	movs	r3, #2
 800233c:	e076      	b.n	800242c <HAL_HCD_HC_Init+0x116>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	212c      	movs	r1, #44	; 0x2c
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	333d      	adds	r3, #61	; 0x3d
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	212c      	movs	r1, #44	; 0x2c
 800235e:	fb01 f303 	mul.w	r3, r1, r3
 8002362:	4413      	add	r3, r2
 8002364:	3338      	adds	r3, #56	; 0x38
 8002366:	787a      	ldrb	r2, [r7, #1]
 8002368:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	212c      	movs	r1, #44	; 0x2c
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	4413      	add	r3, r2
 8002376:	3340      	adds	r3, #64	; 0x40
 8002378:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800237a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	3339      	adds	r3, #57	; 0x39
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	333f      	adds	r3, #63	; 0x3f
 800239c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80023a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	78ba      	ldrb	r2, [r7, #2]
 80023a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023aa:	b2d0      	uxtb	r0, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	333a      	adds	r3, #58	; 0x3a
 80023b8:	4602      	mov	r2, r0
 80023ba:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80023bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	da09      	bge.n	80023d8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	333b      	adds	r3, #59	; 0x3b
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
 80023d6:	e008      	b.n	80023ea <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	333b      	adds	r3, #59	; 0x3b
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	212c      	movs	r1, #44	; 0x2c
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	333c      	adds	r3, #60	; 0x3c
 80023f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023fc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	787c      	ldrb	r4, [r7, #1]
 8002404:	78ba      	ldrb	r2, [r7, #2]
 8002406:	78f9      	ldrb	r1, [r7, #3]
 8002408:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800240a:	9302      	str	r3, [sp, #8]
 800240c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	4623      	mov	r3, r4
 800241a:	f004 fd4d 	bl	8006eb8 <USB_HC_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800242a:	7bfb      	ldrb	r3, [r7, #15]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	bd90      	pop	{r4, r7, pc}

08002434 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_HCD_HC_Halt+0x1e>
 800244e:	2302      	movs	r3, #2
 8002450:	e00f      	b.n	8002472 <HAL_HCD_HC_Halt+0x3e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	78fa      	ldrb	r2, [r7, #3]
 8002460:	4611      	mov	r1, r2
 8002462:	4618      	mov	r0, r3
 8002464:	f004 ff9d 	bl	80073a2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002470:	7bfb      	ldrb	r3, [r7, #15]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	4608      	mov	r0, r1
 8002486:	4611      	mov	r1, r2
 8002488:	461a      	mov	r2, r3
 800248a:	4603      	mov	r3, r0
 800248c:	70fb      	strb	r3, [r7, #3]
 800248e:	460b      	mov	r3, r1
 8002490:	70bb      	strb	r3, [r7, #2]
 8002492:	4613      	mov	r3, r2
 8002494:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	333b      	adds	r3, #59	; 0x3b
 80024a4:	78ba      	ldrb	r2, [r7, #2]
 80024a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	212c      	movs	r1, #44	; 0x2c
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	333f      	adds	r3, #63	; 0x3f
 80024b6:	787a      	ldrb	r2, [r7, #1]
 80024b8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80024ba:	7c3b      	ldrb	r3, [r7, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d112      	bne.n	80024e6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	212c      	movs	r1, #44	; 0x2c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	3342      	adds	r3, #66	; 0x42
 80024ce:	2203      	movs	r2, #3
 80024d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	212c      	movs	r1, #44	; 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	333d      	adds	r3, #61	; 0x3d
 80024e0:	7f3a      	ldrb	r2, [r7, #28]
 80024e2:	701a      	strb	r2, [r3, #0]
 80024e4:	e008      	b.n	80024f8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	212c      	movs	r1, #44	; 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	3342      	adds	r3, #66	; 0x42
 80024f4:	2202      	movs	r2, #2
 80024f6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80024f8:	787b      	ldrb	r3, [r7, #1]
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	f200 80c6 	bhi.w	800268c <HAL_HCD_HC_SubmitRequest+0x210>
 8002500:	a201      	add	r2, pc, #4	; (adr r2, 8002508 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002506:	bf00      	nop
 8002508:	08002519 	.word	0x08002519
 800250c:	08002679 	.word	0x08002679
 8002510:	0800257d 	.word	0x0800257d
 8002514:	080025fb 	.word	0x080025fb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002518:	7c3b      	ldrb	r3, [r7, #16]
 800251a:	2b01      	cmp	r3, #1
 800251c:	f040 80b8 	bne.w	8002690 <HAL_HCD_HC_SubmitRequest+0x214>
 8002520:	78bb      	ldrb	r3, [r7, #2]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 80b4 	bne.w	8002690 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002528:	8b3b      	ldrh	r3, [r7, #24]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d108      	bne.n	8002540 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	212c      	movs	r1, #44	; 0x2c
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	4413      	add	r3, r2
 800253a:	3355      	adds	r3, #85	; 0x55
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	3355      	adds	r3, #85	; 0x55
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d109      	bne.n	8002568 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	3342      	adds	r3, #66	; 0x42
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002566:	e093      	b.n	8002690 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	212c      	movs	r1, #44	; 0x2c
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	4413      	add	r3, r2
 8002574:	3342      	adds	r3, #66	; 0x42
 8002576:	2202      	movs	r2, #2
 8002578:	701a      	strb	r2, [r3, #0]
      break;
 800257a:	e089      	b.n	8002690 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800257c:	78bb      	ldrb	r3, [r7, #2]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d11d      	bne.n	80025be <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	212c      	movs	r1, #44	; 0x2c
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	3355      	adds	r3, #85	; 0x55
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	212c      	movs	r1, #44	; 0x2c
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	4413      	add	r3, r2
 80025a2:	3342      	adds	r3, #66	; 0x42
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80025a8:	e073      	b.n	8002692 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025aa:	78fb      	ldrb	r3, [r7, #3]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	212c      	movs	r1, #44	; 0x2c
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	3342      	adds	r3, #66	; 0x42
 80025b8:	2202      	movs	r2, #2
 80025ba:	701a      	strb	r2, [r3, #0]
      break;
 80025bc:	e069      	b.n	8002692 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	212c      	movs	r1, #44	; 0x2c
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	3354      	adds	r3, #84	; 0x54
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	212c      	movs	r1, #44	; 0x2c
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	4413      	add	r3, r2
 80025de:	3342      	adds	r3, #66	; 0x42
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
      break;
 80025e4:	e055      	b.n	8002692 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3342      	adds	r3, #66	; 0x42
 80025f4:	2202      	movs	r2, #2
 80025f6:	701a      	strb	r2, [r3, #0]
      break;
 80025f8:	e04b      	b.n	8002692 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80025fa:	78bb      	ldrb	r3, [r7, #2]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d11d      	bne.n	800263c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	212c      	movs	r1, #44	; 0x2c
 8002606:	fb01 f303 	mul.w	r3, r1, r3
 800260a:	4413      	add	r3, r2
 800260c:	3355      	adds	r3, #85	; 0x55
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d109      	bne.n	8002628 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	212c      	movs	r1, #44	; 0x2c
 800261a:	fb01 f303 	mul.w	r3, r1, r3
 800261e:	4413      	add	r3, r2
 8002620:	3342      	adds	r3, #66	; 0x42
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002626:	e034      	b.n	8002692 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	212c      	movs	r1, #44	; 0x2c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	3342      	adds	r3, #66	; 0x42
 8002636:	2202      	movs	r2, #2
 8002638:	701a      	strb	r2, [r3, #0]
      break;
 800263a:	e02a      	b.n	8002692 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3354      	adds	r3, #84	; 0x54
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	3342      	adds	r3, #66	; 0x42
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
      break;
 8002662:	e016      	b.n	8002692 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	3342      	adds	r3, #66	; 0x42
 8002672:	2202      	movs	r2, #2
 8002674:	701a      	strb	r2, [r3, #0]
      break;
 8002676:	e00c      	b.n	8002692 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	3342      	adds	r3, #66	; 0x42
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
      break;
 800268a:	e002      	b.n	8002692 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800268c:	bf00      	nop
 800268e:	e000      	b.n	8002692 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002690:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	3344      	adds	r3, #68	; 0x44
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	8b3a      	ldrh	r2, [r7, #24]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	202c      	movs	r0, #44	; 0x2c
 80026ac:	fb00 f303 	mul.w	r3, r0, r3
 80026b0:	440b      	add	r3, r1
 80026b2:	334c      	adds	r3, #76	; 0x4c
 80026b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	212c      	movs	r1, #44	; 0x2c
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	3360      	adds	r3, #96	; 0x60
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	3350      	adds	r3, #80	; 0x50
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80026da:	78fb      	ldrb	r3, [r7, #3]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	212c      	movs	r1, #44	; 0x2c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	3339      	adds	r3, #57	; 0x39
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	212c      	movs	r1, #44	; 0x2c
 80026f2:	fb01 f303 	mul.w	r3, r1, r3
 80026f6:	4413      	add	r3, r2
 80026f8:	3361      	adds	r3, #97	; 0x61
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	222c      	movs	r2, #44	; 0x2c
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	3338      	adds	r3, #56	; 0x38
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	18d1      	adds	r1, r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	f004 fcf0 	bl	80070fc <USB_HC_StartXfer>
 800271c:	4603      	mov	r3, r0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop

08002728 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f004 f9f1 	bl	8006b26 <USB_GetMode>
 8002744:	4603      	mov	r3, r0
 8002746:	2b01      	cmp	r3, #1
 8002748:	f040 80f6 	bne.w	8002938 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f004 f9d5 	bl	8006b00 <USB_ReadInterrupts>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 80ec 	beq.w	8002936 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f004 f9cc 	bl	8006b00 <USB_ReadInterrupts>
 8002768:	4603      	mov	r3, r0
 800276a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800276e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002772:	d104      	bne.n	800277e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800277c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f004 f9bc 	bl	8006b00 <USB_ReadInterrupts>
 8002788:	4603      	mov	r3, r0
 800278a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800278e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002792:	d104      	bne.n	800279e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800279c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f004 f9ac 	bl	8006b00 <USB_ReadInterrupts>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027b2:	d104      	bne.n	80027be <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f004 f99c 	bl	8006b00 <USB_ReadInterrupts>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d103      	bne.n	80027da <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2202      	movs	r2, #2
 80027d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f004 f98e 	bl	8006b00 <USB_ReadInterrupts>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ee:	d11c      	bne.n	800282a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80027f8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10f      	bne.n	800282a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800280a:	2110      	movs	r1, #16
 800280c:	6938      	ldr	r0, [r7, #16]
 800280e:	f004 f87d 	bl	800690c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002812:	6938      	ldr	r0, [r7, #16]
 8002814:	f004 f8ae 	bl	8006974 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2101      	movs	r1, #1
 800281e:	4618      	mov	r0, r3
 8002820:	f004 fa84 	bl	8006d2c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f007 f853 	bl	80098d0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f004 f966 	bl	8006b00 <USB_ReadInterrupts>
 8002834:	4603      	mov	r3, r0
 8002836:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800283a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800283e:	d102      	bne.n	8002846 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f001 f89e 	bl	8003982 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f004 f958 	bl	8006b00 <USB_ReadInterrupts>
 8002850:	4603      	mov	r3, r0
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b08      	cmp	r3, #8
 8002858:	d106      	bne.n	8002868 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f007 f81c 	bl	8009898 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2208      	movs	r2, #8
 8002866:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f004 f947 	bl	8006b00 <USB_ReadInterrupts>
 8002872:	4603      	mov	r3, r0
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b10      	cmp	r3, #16
 800287a:	d101      	bne.n	8002880 <HAL_HCD_IRQHandler+0x158>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <HAL_HCD_IRQHandler+0x15a>
 8002880:	2300      	movs	r3, #0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d012      	beq.n	80028ac <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0210 	bic.w	r2, r2, #16
 8002894:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 ffa1 	bl	80037de <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0210 	orr.w	r2, r2, #16
 80028aa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f004 f925 	bl	8006b00 <USB_ReadInterrupts>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028c0:	d13a      	bne.n	8002938 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f004 fd5a 	bl	8007380 <USB_HC_ReadInterrupt>
 80028cc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e025      	b.n	8002920 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d018      	beq.n	800291a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028fe:	d106      	bne.n	800290e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	4619      	mov	r1, r3
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f8ab 	bl	8002a62 <HCD_HC_IN_IRQHandler>
 800290c:	e005      	b.n	800291a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	4619      	mov	r1, r3
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fbf9 	bl	800310c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	3301      	adds	r3, #1
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	429a      	cmp	r2, r3
 8002928:	d3d4      	bcc.n	80028d4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002932:	615a      	str	r2, [r3, #20]
 8002934:	e000      	b.n	8002938 <HAL_HCD_IRQHandler+0x210>
      return;
 8002936:	bf00      	nop
    }
  }
}
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_HCD_Start+0x16>
 8002950:	2302      	movs	r3, #2
 8002952:	e013      	b.n	800297c <HAL_HCD_Start+0x3e>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2101      	movs	r1, #1
 8002962:	4618      	mov	r0, r3
 8002964:	f004 fa46 	bl	8006df4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f003 ff5e 	bl	800682e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_HCD_Stop+0x16>
 8002996:	2302      	movs	r3, #2
 8002998:	e00d      	b.n	80029b6 <HAL_HCD_Stop+0x32>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f004 fe34 	bl	8007614 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f004 f9e8 	bl	8006da0 <USB_ResetPort>
 80029d0:	4603      	mov	r3, r0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	460b      	mov	r3, r1
 80029e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	3360      	adds	r3, #96	; 0x60
 80029f4:	781b      	ldrb	r3, [r3, #0]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3350      	adds	r3, #80	; 0x50
 8002a1c:	681b      	ldr	r3, [r3, #0]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f004 fa2c 	bl	8006e94 <USB_GetCurrentFrame>
 8002a3c:	4603      	mov	r3, r0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f004 fa07 	bl	8006e66 <USB_GetHostSpeed>
 8002a58:	4603      	mov	r3, r0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b086      	sub	sp, #24
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d11a      	bne.n	8002ac8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3361      	adds	r3, #97	; 0x61
 8002ab2:	2206      	movs	r2, #6
 8002ab4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f004 fc6e 	bl	80073a2 <USB_HC_Halt>
 8002ac6:	e0af      	b.n	8002c28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ade:	d11b      	bne.n	8002b18 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aec:	461a      	mov	r2, r3
 8002aee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002af2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	3361      	adds	r3, #97	; 0x61
 8002b02:	2207      	movs	r2, #7
 8002b04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f004 fc46 	bl	80073a2 <USB_HC_Halt>
 8002b16:	e087      	b.n	8002c28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d109      	bne.n	8002b42 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	6093      	str	r3, [r2, #8]
 8002b40:	e072      	b.n	8002c28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d11a      	bne.n	8002b8e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b64:	461a      	mov	r2, r3
 8002b66:	2308      	movs	r3, #8
 8002b68:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	3361      	adds	r3, #97	; 0x61
 8002b78:	2205      	movs	r2, #5
 8002b7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f004 fc0b 	bl	80073a2 <USB_HC_Halt>
 8002b8c:	e04c      	b.n	8002c28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba4:	d11b      	bne.n	8002bde <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3361      	adds	r3, #97	; 0x61
 8002bc8:	2208      	movs	r2, #8
 8002bca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f004 fbe3 	bl	80073a2 <USB_HC_Halt>
 8002bdc:	e024      	b.n	8002c28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b80      	cmp	r3, #128	; 0x80
 8002bf2:	d119      	bne.n	8002c28 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c00:	461a      	mov	r2, r3
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	3361      	adds	r3, #97	; 0x61
 8002c14:	2206      	movs	r2, #6
 8002c16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f004 fbbd 	bl	80073a2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c3e:	d112      	bne.n	8002c66 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f004 fba9 	bl	80073a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c62:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c64:	e24e      	b.n	8003104 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	f040 80df 	bne.w	8002e3c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d019      	beq.n	8002cba <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	3348      	adds	r3, #72	; 0x48
 8002c94:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	0159      	lsls	r1, r3, #5
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	440b      	add	r3, r1
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002ca8:	1ad2      	subs	r2, r2, r3
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	202c      	movs	r0, #44	; 0x2c
 8002cb0:	fb00 f303 	mul.w	r3, r0, r3
 8002cb4:	440b      	add	r3, r1
 8002cb6:	3350      	adds	r3, #80	; 0x50
 8002cb8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3361      	adds	r3, #97	; 0x61
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	335c      	adds	r3, #92	; 0x5c
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cea:	461a      	mov	r2, r3
 8002cec:	2301      	movs	r3, #1
 8002cee:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	333f      	adds	r3, #63	; 0x3f
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d009      	beq.n	8002d18 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	333f      	adds	r3, #63	; 0x3f
 8002d12:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d111      	bne.n	8002d3c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f004 fb3d 	bl	80073a2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d34:	461a      	mov	r2, r3
 8002d36:	2310      	movs	r3, #16
 8002d38:	6093      	str	r3, [r2, #8]
 8002d3a:	e03a      	b.n	8002db2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	212c      	movs	r1, #44	; 0x2c
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	333f      	adds	r3, #63	; 0x3f
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d009      	beq.n	8002d64 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	212c      	movs	r1, #44	; 0x2c
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	333f      	adds	r3, #63	; 0x3f
 8002d5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d126      	bne.n	8002db2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	0151      	lsls	r1, r2, #5
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	440a      	add	r2, r1
 8002d7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d82:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	212c      	movs	r1, #44	; 0x2c
 8002d8a:	fb01 f303 	mul.w	r3, r1, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	3360      	adds	r3, #96	; 0x60
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	b2d9      	uxtb	r1, r3
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	202c      	movs	r0, #44	; 0x2c
 8002da0:	fb00 f303 	mul.w	r3, r0, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	3360      	adds	r3, #96	; 0x60
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f006 fd9d 	bl	80098ec <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d12b      	bne.n	8002e12 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	212c      	movs	r1, #44	; 0x2c
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3348      	adds	r3, #72	; 0x48
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	202c      	movs	r0, #44	; 0x2c
 8002dd0:	fb00 f202 	mul.w	r2, r0, r2
 8002dd4:	440a      	add	r2, r1
 8002dd6:	3240      	adds	r2, #64	; 0x40
 8002dd8:	8812      	ldrh	r2, [r2, #0]
 8002dda:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 818e 	beq.w	8003104 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	212c      	movs	r1, #44	; 0x2c
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	3354      	adds	r3, #84	; 0x54
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	f083 0301 	eor.w	r3, r3, #1
 8002dfc:	b2d8      	uxtb	r0, r3
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	3354      	adds	r3, #84	; 0x54
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	701a      	strb	r2, [r3, #0]
}
 8002e10:	e178      	b.n	8003104 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	212c      	movs	r1, #44	; 0x2c
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3354      	adds	r3, #84	; 0x54
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	f083 0301 	eor.w	r3, r3, #1
 8002e26:	b2d8      	uxtb	r0, r3
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	212c      	movs	r1, #44	; 0x2c
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	3354      	adds	r3, #84	; 0x54
 8002e36:	4602      	mov	r2, r0
 8002e38:	701a      	strb	r2, [r3, #0]
}
 8002e3a:	e163      	b.n	8003104 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	f040 80f6 	bne.w	8003040 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3361      	adds	r3, #97	; 0x61
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d109      	bne.n	8002e7c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3360      	adds	r3, #96	; 0x60
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e0c9      	b.n	8003010 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3361      	adds	r3, #97	; 0x61
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	d109      	bne.n	8002ea4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3360      	adds	r3, #96	; 0x60
 8002e9e:	2205      	movs	r2, #5
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	e0b5      	b.n	8003010 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	212c      	movs	r1, #44	; 0x2c
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	4413      	add	r3, r2
 8002eb0:	3361      	adds	r3, #97	; 0x61
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b06      	cmp	r3, #6
 8002eb6:	d009      	beq.n	8002ecc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3361      	adds	r3, #97	; 0x61
 8002ec6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d150      	bne.n	8002f6e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	335c      	adds	r3, #92	; 0x5c
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	202c      	movs	r0, #44	; 0x2c
 8002ee4:	fb00 f303 	mul.w	r3, r0, r3
 8002ee8:	440b      	add	r3, r1
 8002eea:	335c      	adds	r3, #92	; 0x5c
 8002eec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	212c      	movs	r1, #44	; 0x2c
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	4413      	add	r3, r2
 8002efa:	335c      	adds	r3, #92	; 0x5c
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d912      	bls.n	8002f28 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	212c      	movs	r1, #44	; 0x2c
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	335c      	adds	r3, #92	; 0x5c
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	3360      	adds	r3, #96	; 0x60
 8002f22:	2204      	movs	r2, #4
 8002f24:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f26:	e073      	b.n	8003010 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	212c      	movs	r1, #44	; 0x2c
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	3360      	adds	r3, #96	; 0x60
 8002f36:	2202      	movs	r2, #2
 8002f38:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f50:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f58:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f66:	461a      	mov	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f6c:	e050      	b.n	8003010 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	3361      	adds	r3, #97	; 0x61
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d122      	bne.n	8002fc8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3360      	adds	r3, #96	; 0x60
 8002f90:	2202      	movs	r2, #2
 8002f92:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002faa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fb2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	e023      	b.n	8003010 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3361      	adds	r3, #97	; 0x61
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b07      	cmp	r3, #7
 8002fda:	d119      	bne.n	8003010 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	212c      	movs	r1, #44	; 0x2c
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	335c      	adds	r3, #92	; 0x5c
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	202c      	movs	r0, #44	; 0x2c
 8002ff4:	fb00 f303 	mul.w	r3, r0, r3
 8002ff8:	440b      	add	r3, r1
 8002ffa:	335c      	adds	r3, #92	; 0x5c
 8002ffc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	3360      	adds	r3, #96	; 0x60
 800300c:	2204      	movs	r2, #4
 800300e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4413      	add	r3, r2
 8003018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301c:	461a      	mov	r2, r3
 800301e:	2302      	movs	r3, #2
 8003020:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	b2d9      	uxtb	r1, r3
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	202c      	movs	r0, #44	; 0x2c
 800302c:	fb00 f303 	mul.w	r3, r0, r3
 8003030:	4413      	add	r3, r2
 8003032:	3360      	adds	r3, #96	; 0x60
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f006 fc57 	bl	80098ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800303e:	e061      	b.n	8003104 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b10      	cmp	r3, #16
 8003054:	d156      	bne.n	8003104 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	333f      	adds	r3, #63	; 0x3f
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b03      	cmp	r3, #3
 8003068:	d111      	bne.n	800308e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	335c      	adds	r3, #92	; 0x5c
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f004 f98b 	bl	80073a2 <USB_HC_Halt>
 800308c:	e031      	b.n	80030f2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	212c      	movs	r1, #44	; 0x2c
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	4413      	add	r3, r2
 800309a:	333f      	adds	r3, #63	; 0x3f
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	212c      	movs	r1, #44	; 0x2c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	333f      	adds	r3, #63	; 0x3f
 80030b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d11d      	bne.n	80030f2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	335c      	adds	r3, #92	; 0x5c
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d110      	bne.n	80030f2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	3361      	adds	r3, #97	; 0x61
 80030de:	2203      	movs	r2, #3
 80030e0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f004 f958 	bl	80073a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fe:	461a      	mov	r2, r3
 8003100:	2310      	movs	r3, #16
 8003102:	6093      	str	r3, [r2, #8]
}
 8003104:	bf00      	nop
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	4413      	add	r3, r2
 800312e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b04      	cmp	r3, #4
 800313a:	d11a      	bne.n	8003172 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	4413      	add	r3, r2
 8003144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003148:	461a      	mov	r2, r3
 800314a:	2304      	movs	r3, #4
 800314c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	212c      	movs	r1, #44	; 0x2c
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4413      	add	r3, r2
 800315a:	3361      	adds	r3, #97	; 0x61
 800315c:	2206      	movs	r2, #6
 800315e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f004 f919 	bl	80073a2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003170:	e331      	b.n	80037d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	4413      	add	r3, r2
 800317a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b20      	cmp	r3, #32
 8003186:	d12e      	bne.n	80031e6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	4413      	add	r3, r2
 8003190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003194:	461a      	mov	r2, r3
 8003196:	2320      	movs	r3, #32
 8003198:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	212c      	movs	r1, #44	; 0x2c
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	333d      	adds	r3, #61	; 0x3d
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	f040 8313 	bne.w	80037d6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	212c      	movs	r1, #44	; 0x2c
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	333d      	adds	r3, #61	; 0x3d
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	3360      	adds	r3, #96	; 0x60
 80031d0:	2202      	movs	r2, #2
 80031d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	4611      	mov	r1, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f004 f8df 	bl	80073a2 <USB_HC_Halt>
}
 80031e4:	e2f7      	b.n	80037d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fc:	d112      	bne.n	8003224 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	4413      	add	r3, r2
 8003206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320a:	461a      	mov	r2, r3
 800320c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003210:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f004 f8c0 	bl	80073a2 <USB_HC_Halt>
}
 8003222:	e2d8      	b.n	80037d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	4413      	add	r3, r2
 800322c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b01      	cmp	r3, #1
 8003238:	d140      	bne.n	80032bc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	212c      	movs	r1, #44	; 0x2c
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	4413      	add	r3, r2
 8003246:	335c      	adds	r3, #92	; 0x5c
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	4413      	add	r3, r2
 8003254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325e:	2b40      	cmp	r3, #64	; 0x40
 8003260:	d111      	bne.n	8003286 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	212c      	movs	r1, #44	; 0x2c
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	4413      	add	r3, r2
 800326e:	333d      	adds	r3, #61	; 0x3d
 8003270:	2201      	movs	r2, #1
 8003272:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	4413      	add	r3, r2
 800327c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003280:	461a      	mov	r2, r3
 8003282:	2340      	movs	r3, #64	; 0x40
 8003284:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	4413      	add	r3, r2
 800328e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003292:	461a      	mov	r2, r3
 8003294:	2301      	movs	r3, #1
 8003296:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	3361      	adds	r3, #97	; 0x61
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f004 f874 	bl	80073a2 <USB_HC_Halt>
}
 80032ba:	e28c      	b.n	80037d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b40      	cmp	r3, #64	; 0x40
 80032d0:	d12c      	bne.n	800332c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	212c      	movs	r1, #44	; 0x2c
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	4413      	add	r3, r2
 80032de:	3361      	adds	r3, #97	; 0x61
 80032e0:	2204      	movs	r2, #4
 80032e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	212c      	movs	r1, #44	; 0x2c
 80032ea:	fb01 f303 	mul.w	r3, r1, r3
 80032ee:	4413      	add	r3, r2
 80032f0:	333d      	adds	r3, #61	; 0x3d
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	212c      	movs	r1, #44	; 0x2c
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	4413      	add	r3, r2
 8003302:	335c      	adds	r3, #92	; 0x5c
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	4611      	mov	r1, r2
 8003312:	4618      	mov	r0, r3
 8003314:	f004 f845 	bl	80073a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	4413      	add	r3, r2
 8003320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003324:	461a      	mov	r2, r3
 8003326:	2340      	movs	r3, #64	; 0x40
 8003328:	6093      	str	r3, [r2, #8]
}
 800332a:	e254      	b.n	80037d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	4413      	add	r3, r2
 8003334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b08      	cmp	r3, #8
 8003340:	d11a      	bne.n	8003378 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	4413      	add	r3, r2
 800334a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334e:	461a      	mov	r2, r3
 8003350:	2308      	movs	r3, #8
 8003352:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	212c      	movs	r1, #44	; 0x2c
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	4413      	add	r3, r2
 8003360:	3361      	adds	r3, #97	; 0x61
 8003362:	2205      	movs	r2, #5
 8003364:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f004 f816 	bl	80073a2 <USB_HC_Halt>
}
 8003376:	e22e      	b.n	80037d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	4413      	add	r3, r2
 8003380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b10      	cmp	r3, #16
 800338c:	d140      	bne.n	8003410 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	335c      	adds	r3, #92	; 0x5c
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	212c      	movs	r1, #44	; 0x2c
 80033a6:	fb01 f303 	mul.w	r3, r1, r3
 80033aa:	4413      	add	r3, r2
 80033ac:	3361      	adds	r3, #97	; 0x61
 80033ae:	2203      	movs	r2, #3
 80033b0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	212c      	movs	r1, #44	; 0x2c
 80033b8:	fb01 f303 	mul.w	r3, r1, r3
 80033bc:	4413      	add	r3, r2
 80033be:	333d      	adds	r3, #61	; 0x3d
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d112      	bne.n	80033ec <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	212c      	movs	r1, #44	; 0x2c
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	333c      	adds	r3, #60	; 0x3c
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d108      	bne.n	80033ec <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	212c      	movs	r1, #44	; 0x2c
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	4413      	add	r3, r2
 80033e6:	333d      	adds	r3, #61	; 0x3d
 80033e8:	2201      	movs	r2, #1
 80033ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	4611      	mov	r1, r2
 80033f6:	4618      	mov	r0, r3
 80033f8:	f003 ffd3 	bl	80073a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	4413      	add	r3, r2
 8003404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003408:	461a      	mov	r2, r3
 800340a:	2310      	movs	r3, #16
 800340c:	6093      	str	r3, [r2, #8]
}
 800340e:	e1e2      	b.n	80037d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	4413      	add	r3, r2
 8003418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003422:	2b80      	cmp	r3, #128	; 0x80
 8003424:	d164      	bne.n	80034f0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d111      	bne.n	8003452 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	212c      	movs	r1, #44	; 0x2c
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	4413      	add	r3, r2
 800343a:	3361      	adds	r3, #97	; 0x61
 800343c:	2206      	movs	r2, #6
 800343e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	4611      	mov	r1, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f003 ffa9 	bl	80073a2 <USB_HC_Halt>
 8003450:	e044      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	212c      	movs	r1, #44	; 0x2c
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	4413      	add	r3, r2
 800345e:	335c      	adds	r3, #92	; 0x5c
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	202c      	movs	r0, #44	; 0x2c
 800346a:	fb00 f303 	mul.w	r3, r0, r3
 800346e:	440b      	add	r3, r1
 8003470:	335c      	adds	r3, #92	; 0x5c
 8003472:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	212c      	movs	r1, #44	; 0x2c
 800347a:	fb01 f303 	mul.w	r3, r1, r3
 800347e:	4413      	add	r3, r2
 8003480:	335c      	adds	r3, #92	; 0x5c
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d920      	bls.n	80034ca <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	335c      	adds	r3, #92	; 0x5c
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	212c      	movs	r1, #44	; 0x2c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	3360      	adds	r3, #96	; 0x60
 80034a8:	2204      	movs	r2, #4
 80034aa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	b2d9      	uxtb	r1, r3
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	202c      	movs	r0, #44	; 0x2c
 80034b6:	fb00 f303 	mul.w	r3, r0, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	3360      	adds	r3, #96	; 0x60
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f006 fa12 	bl	80098ec <HAL_HCD_HC_NotifyURBChange_Callback>
 80034c8:	e008      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	212c      	movs	r1, #44	; 0x2c
 80034d0:	fb01 f303 	mul.w	r3, r1, r3
 80034d4:	4413      	add	r3, r2
 80034d6:	3360      	adds	r3, #96	; 0x60
 80034d8:	2202      	movs	r2, #2
 80034da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e8:	461a      	mov	r2, r3
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	6093      	str	r3, [r2, #8]
}
 80034ee:	e172      	b.n	80037d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003506:	d11b      	bne.n	8003540 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	212c      	movs	r1, #44	; 0x2c
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	3361      	adds	r3, #97	; 0x61
 8003516:	2208      	movs	r2, #8
 8003518:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	4611      	mov	r1, r2
 8003524:	4618      	mov	r0, r3
 8003526:	f003 ff3c 	bl	80073a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	4413      	add	r3, r2
 8003532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003536:	461a      	mov	r2, r3
 8003538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800353c:	6093      	str	r3, [r2, #8]
}
 800353e:	e14a      	b.n	80037d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	4413      	add	r3, r2
 8003548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	f040 813f 	bne.w	80037d6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	3361      	adds	r3, #97	; 0x61
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d17d      	bne.n	8003668 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	212c      	movs	r1, #44	; 0x2c
 8003572:	fb01 f303 	mul.w	r3, r1, r3
 8003576:	4413      	add	r3, r2
 8003578:	3360      	adds	r3, #96	; 0x60
 800357a:	2201      	movs	r2, #1
 800357c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	212c      	movs	r1, #44	; 0x2c
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	333f      	adds	r3, #63	; 0x3f
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d00a      	beq.n	80035a8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	333f      	adds	r3, #63	; 0x3f
 80035a0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	f040 8100 	bne.w	80037a8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d113      	bne.n	80035d8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	212c      	movs	r1, #44	; 0x2c
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	4413      	add	r3, r2
 80035bc:	3355      	adds	r3, #85	; 0x55
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	f083 0301 	eor.w	r3, r3, #1
 80035c4:	b2d8      	uxtb	r0, r3
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	212c      	movs	r1, #44	; 0x2c
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	4413      	add	r3, r2
 80035d2:	3355      	adds	r3, #85	; 0x55
 80035d4:	4602      	mov	r2, r0
 80035d6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	f040 80e3 	bne.w	80037a8 <HCD_HC_OUT_IRQHandler+0x69c>
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	212c      	movs	r1, #44	; 0x2c
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	4413      	add	r3, r2
 80035ee:	334c      	adds	r3, #76	; 0x4c
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80d8 	beq.w	80037a8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	212c      	movs	r1, #44	; 0x2c
 80035fe:	fb01 f303 	mul.w	r3, r1, r3
 8003602:	4413      	add	r3, r2
 8003604:	334c      	adds	r3, #76	; 0x4c
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	202c      	movs	r0, #44	; 0x2c
 800360e:	fb00 f202 	mul.w	r2, r0, r2
 8003612:	440a      	add	r2, r1
 8003614:	3240      	adds	r2, #64	; 0x40
 8003616:	8812      	ldrh	r2, [r2, #0]
 8003618:	4413      	add	r3, r2
 800361a:	3b01      	subs	r3, #1
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	202c      	movs	r0, #44	; 0x2c
 8003622:	fb00 f202 	mul.w	r2, r0, r2
 8003626:	440a      	add	r2, r1
 8003628:	3240      	adds	r2, #64	; 0x40
 800362a:	8812      	ldrh	r2, [r2, #0]
 800362c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80b5 	beq.w	80037a8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	212c      	movs	r1, #44	; 0x2c
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	4413      	add	r3, r2
 800364a:	3355      	adds	r3, #85	; 0x55
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	f083 0301 	eor.w	r3, r3, #1
 8003652:	b2d8      	uxtb	r0, r3
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	212c      	movs	r1, #44	; 0x2c
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	4413      	add	r3, r2
 8003660:	3355      	adds	r3, #85	; 0x55
 8003662:	4602      	mov	r2, r0
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	e09f      	b.n	80037a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	212c      	movs	r1, #44	; 0x2c
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	4413      	add	r3, r2
 8003674:	3361      	adds	r3, #97	; 0x61
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d109      	bne.n	8003690 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	212c      	movs	r1, #44	; 0x2c
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	4413      	add	r3, r2
 8003688:	3360      	adds	r3, #96	; 0x60
 800368a:	2202      	movs	r2, #2
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	e08b      	b.n	80037a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	212c      	movs	r1, #44	; 0x2c
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	4413      	add	r3, r2
 800369c:	3361      	adds	r3, #97	; 0x61
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d109      	bne.n	80036b8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	212c      	movs	r1, #44	; 0x2c
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	4413      	add	r3, r2
 80036b0:	3360      	adds	r3, #96	; 0x60
 80036b2:	2202      	movs	r2, #2
 80036b4:	701a      	strb	r2, [r3, #0]
 80036b6:	e077      	b.n	80037a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	212c      	movs	r1, #44	; 0x2c
 80036be:	fb01 f303 	mul.w	r3, r1, r3
 80036c2:	4413      	add	r3, r2
 80036c4:	3361      	adds	r3, #97	; 0x61
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b05      	cmp	r3, #5
 80036ca:	d109      	bne.n	80036e0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	212c      	movs	r1, #44	; 0x2c
 80036d2:	fb01 f303 	mul.w	r3, r1, r3
 80036d6:	4413      	add	r3, r2
 80036d8:	3360      	adds	r3, #96	; 0x60
 80036da:	2205      	movs	r2, #5
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	e063      	b.n	80037a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	212c      	movs	r1, #44	; 0x2c
 80036e6:	fb01 f303 	mul.w	r3, r1, r3
 80036ea:	4413      	add	r3, r2
 80036ec:	3361      	adds	r3, #97	; 0x61
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b06      	cmp	r3, #6
 80036f2:	d009      	beq.n	8003708 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	212c      	movs	r1, #44	; 0x2c
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	4413      	add	r3, r2
 8003700:	3361      	adds	r3, #97	; 0x61
 8003702:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003704:	2b08      	cmp	r3, #8
 8003706:	d14f      	bne.n	80037a8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	212c      	movs	r1, #44	; 0x2c
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	4413      	add	r3, r2
 8003714:	335c      	adds	r3, #92	; 0x5c
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	202c      	movs	r0, #44	; 0x2c
 8003720:	fb00 f303 	mul.w	r3, r0, r3
 8003724:	440b      	add	r3, r1
 8003726:	335c      	adds	r3, #92	; 0x5c
 8003728:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	212c      	movs	r1, #44	; 0x2c
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	4413      	add	r3, r2
 8003736:	335c      	adds	r3, #92	; 0x5c
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d912      	bls.n	8003764 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	212c      	movs	r1, #44	; 0x2c
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	4413      	add	r3, r2
 800374a:	335c      	adds	r3, #92	; 0x5c
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	212c      	movs	r1, #44	; 0x2c
 8003756:	fb01 f303 	mul.w	r3, r1, r3
 800375a:	4413      	add	r3, r2
 800375c:	3360      	adds	r3, #96	; 0x60
 800375e:	2204      	movs	r2, #4
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	e021      	b.n	80037a8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	212c      	movs	r1, #44	; 0x2c
 800376a:	fb01 f303 	mul.w	r3, r1, r3
 800376e:	4413      	add	r3, r2
 8003770:	3360      	adds	r3, #96	; 0x60
 8003772:	2202      	movs	r2, #2
 8003774:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	4413      	add	r3, r2
 800377e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800378c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003794:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	4413      	add	r3, r2
 800379e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a2:	461a      	mov	r2, r3
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b4:	461a      	mov	r2, r3
 80037b6:	2302      	movs	r3, #2
 80037b8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	b2d9      	uxtb	r1, r3
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	202c      	movs	r0, #44	; 0x2c
 80037c4:	fb00 f303 	mul.w	r3, r0, r3
 80037c8:	4413      	add	r3, r2
 80037ca:	3360      	adds	r3, #96	; 0x60
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f006 f88b 	bl	80098ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80037d6:	bf00      	nop
 80037d8:	3720      	adds	r7, #32
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b08a      	sub	sp, #40	; 0x28
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	0c5b      	lsrs	r3, r3, #17
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003812:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d004      	beq.n	8003824 <HCD_RXQLVL_IRQHandler+0x46>
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b05      	cmp	r3, #5
 800381e:	f000 80a9 	beq.w	8003974 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003822:	e0aa      	b.n	800397a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80a6 	beq.w	8003978 <HCD_RXQLVL_IRQHandler+0x19a>
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	212c      	movs	r1, #44	; 0x2c
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	4413      	add	r3, r2
 8003838:	3344      	adds	r3, #68	; 0x44
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 809b 	beq.w	8003978 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	212c      	movs	r1, #44	; 0x2c
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	4413      	add	r3, r2
 800384e:	3350      	adds	r3, #80	; 0x50
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	441a      	add	r2, r3
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	202c      	movs	r0, #44	; 0x2c
 800385c:	fb00 f303 	mul.w	r3, r0, r3
 8003860:	440b      	add	r3, r1
 8003862:	334c      	adds	r3, #76	; 0x4c
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d87a      	bhi.n	8003960 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	212c      	movs	r1, #44	; 0x2c
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	4413      	add	r3, r2
 800387a:	3344      	adds	r3, #68	; 0x44
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	b292      	uxth	r2, r2
 8003882:	4619      	mov	r1, r3
 8003884:	f003 f8e4 	bl	8006a50 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	212c      	movs	r1, #44	; 0x2c
 800388e:	fb01 f303 	mul.w	r3, r1, r3
 8003892:	4413      	add	r3, r2
 8003894:	3344      	adds	r3, #68	; 0x44
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	441a      	add	r2, r3
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	202c      	movs	r0, #44	; 0x2c
 80038a2:	fb00 f303 	mul.w	r3, r0, r3
 80038a6:	440b      	add	r3, r1
 80038a8:	3344      	adds	r3, #68	; 0x44
 80038aa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	212c      	movs	r1, #44	; 0x2c
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	3350      	adds	r3, #80	; 0x50
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	441a      	add	r2, r3
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	202c      	movs	r0, #44	; 0x2c
 80038c6:	fb00 f303 	mul.w	r3, r0, r3
 80038ca:	440b      	add	r3, r1
 80038cc:	3350      	adds	r3, #80	; 0x50
 80038ce:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	0cdb      	lsrs	r3, r3, #19
 80038e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038e4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	212c      	movs	r1, #44	; 0x2c
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	4413      	add	r3, r2
 80038f2:	3340      	adds	r3, #64	; 0x40
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d13c      	bne.n	8003978 <HCD_RXQLVL_IRQHandler+0x19a>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d039      	beq.n	8003978 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800391a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003922:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003930:	461a      	mov	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	212c      	movs	r1, #44	; 0x2c
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	4413      	add	r3, r2
 8003942:	3354      	adds	r3, #84	; 0x54
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	f083 0301 	eor.w	r3, r3, #1
 800394a:	b2d8      	uxtb	r0, r3
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	212c      	movs	r1, #44	; 0x2c
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	3354      	adds	r3, #84	; 0x54
 800395a:	4602      	mov	r2, r0
 800395c:	701a      	strb	r2, [r3, #0]
      break;
 800395e:	e00b      	b.n	8003978 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	212c      	movs	r1, #44	; 0x2c
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	3360      	adds	r3, #96	; 0x60
 800396e:	2204      	movs	r2, #4
 8003970:	701a      	strb	r2, [r3, #0]
      break;
 8003972:	e001      	b.n	8003978 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003974:	bf00      	nop
 8003976:	e000      	b.n	800397a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003978:	bf00      	nop
  }
}
 800397a:	bf00      	nop
 800397c:	3728      	adds	r7, #40	; 0x28
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80039ae:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d10b      	bne.n	80039d2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d102      	bne.n	80039ca <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f005 ff75 	bl	80098b4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f043 0302 	orr.w	r3, r3, #2
 80039d0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d132      	bne.n	8003a42 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f043 0308 	orr.w	r3, r3, #8
 80039e2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d126      	bne.n	8003a3c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d113      	bne.n	8003a1e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80039fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a00:	d106      	bne.n	8003a10 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2102      	movs	r1, #2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f003 f98f 	bl	8006d2c <USB_InitFSLSPClkSel>
 8003a0e:	e011      	b.n	8003a34 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2101      	movs	r1, #1
 8003a16:	4618      	mov	r0, r3
 8003a18:	f003 f988 	bl	8006d2c <USB_InitFSLSPClkSel>
 8003a1c:	e00a      	b.n	8003a34 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d106      	bne.n	8003a34 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003a32:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f005 ff67 	bl	8009908 <HAL_HCD_PortEnabled_Callback>
 8003a3a:	e002      	b.n	8003a42 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f005 ff71 	bl	8009924 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d103      	bne.n	8003a54 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f043 0320 	orr.w	r3, r3, #32
 8003a52:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	6013      	str	r3, [r2, #0]
}
 8003a60:	bf00      	nop
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e12b      	b.n	8003cd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fd fd9c 	bl	80015cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2224      	movs	r2, #36	; 0x24
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003acc:	f002 f89c 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 8003ad0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4a81      	ldr	r2, [pc, #516]	; (8003cdc <HAL_I2C_Init+0x274>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d807      	bhi.n	8003aec <HAL_I2C_Init+0x84>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4a80      	ldr	r2, [pc, #512]	; (8003ce0 <HAL_I2C_Init+0x278>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	bf94      	ite	ls
 8003ae4:	2301      	movls	r3, #1
 8003ae6:	2300      	movhi	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e006      	b.n	8003afa <HAL_I2C_Init+0x92>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a7d      	ldr	r2, [pc, #500]	; (8003ce4 <HAL_I2C_Init+0x27c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	bf94      	ite	ls
 8003af4:	2301      	movls	r3, #1
 8003af6:	2300      	movhi	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e0e7      	b.n	8003cd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4a78      	ldr	r2, [pc, #480]	; (8003ce8 <HAL_I2C_Init+0x280>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	0c9b      	lsrs	r3, r3, #18
 8003b0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4a6a      	ldr	r2, [pc, #424]	; (8003cdc <HAL_I2C_Init+0x274>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d802      	bhi.n	8003b3c <HAL_I2C_Init+0xd4>
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	e009      	b.n	8003b50 <HAL_I2C_Init+0xe8>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b42:	fb02 f303 	mul.w	r3, r2, r3
 8003b46:	4a69      	ldr	r2, [pc, #420]	; (8003cec <HAL_I2C_Init+0x284>)
 8003b48:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4c:	099b      	lsrs	r3, r3, #6
 8003b4e:	3301      	adds	r3, #1
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6812      	ldr	r2, [r2, #0]
 8003b54:	430b      	orrs	r3, r1
 8003b56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	495c      	ldr	r1, [pc, #368]	; (8003cdc <HAL_I2C_Init+0x274>)
 8003b6c:	428b      	cmp	r3, r1
 8003b6e:	d819      	bhi.n	8003ba4 <HAL_I2C_Init+0x13c>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	1e59      	subs	r1, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b7e:	1c59      	adds	r1, r3, #1
 8003b80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b84:	400b      	ands	r3, r1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_I2C_Init+0x138>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1e59      	subs	r1, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b98:	3301      	adds	r3, #1
 8003b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b9e:	e051      	b.n	8003c44 <HAL_I2C_Init+0x1dc>
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	e04f      	b.n	8003c44 <HAL_I2C_Init+0x1dc>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d111      	bne.n	8003bd0 <HAL_I2C_Init+0x168>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1e58      	subs	r0, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6859      	ldr	r1, [r3, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	440b      	add	r3, r1
 8003bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	bf0c      	ite	eq
 8003bc8:	2301      	moveq	r3, #1
 8003bca:	2300      	movne	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	e012      	b.n	8003bf6 <HAL_I2C_Init+0x18e>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1e58      	subs	r0, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	0099      	lsls	r1, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be6:	3301      	adds	r3, #1
 8003be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_I2C_Init+0x196>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e022      	b.n	8003c44 <HAL_I2C_Init+0x1dc>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10e      	bne.n	8003c24 <HAL_I2C_Init+0x1bc>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1e58      	subs	r0, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6859      	ldr	r1, [r3, #4]
 8003c0e:	460b      	mov	r3, r1
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	440b      	add	r3, r1
 8003c14:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c18:	3301      	adds	r3, #1
 8003c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c22:	e00f      	b.n	8003c44 <HAL_I2C_Init+0x1dc>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1e58      	subs	r0, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	0099      	lsls	r1, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	6809      	ldr	r1, [r1, #0]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69da      	ldr	r2, [r3, #28]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6911      	ldr	r1, [r2, #16]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	68d2      	ldr	r2, [r2, #12]
 8003c7e:	4311      	orrs	r1, r2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	430b      	orrs	r3, r1
 8003c86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	000186a0 	.word	0x000186a0
 8003ce0:	001e847f 	.word	0x001e847f
 8003ce4:	003d08ff 	.word	0x003d08ff
 8003ce8:	431bde83 	.word	0x431bde83
 8003cec:	10624dd3 	.word	0x10624dd3

08003cf0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	4608      	mov	r0, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	817b      	strh	r3, [r7, #10]
 8003d02:	460b      	mov	r3, r1
 8003d04:	813b      	strh	r3, [r7, #8]
 8003d06:	4613      	mov	r3, r2
 8003d08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d0a:	f7fd ffab 	bl	8001c64 <HAL_GetTick>
 8003d0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	f040 80d9 	bne.w	8003ed0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	2319      	movs	r3, #25
 8003d24:	2201      	movs	r2, #1
 8003d26:	496d      	ldr	r1, [pc, #436]	; (8003edc <HAL_I2C_Mem_Write+0x1ec>)
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fc7f 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d34:	2302      	movs	r3, #2
 8003d36:	e0cc      	b.n	8003ed2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_I2C_Mem_Write+0x56>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e0c5      	b.n	8003ed2 <HAL_I2C_Mem_Write+0x1e2>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d007      	beq.n	8003d6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2221      	movs	r2, #33	; 0x21
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2240      	movs	r2, #64	; 0x40
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a3a      	ldr	r2, [r7, #32]
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4a4d      	ldr	r2, [pc, #308]	; (8003ee0 <HAL_I2C_Mem_Write+0x1f0>)
 8003dac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dae:	88f8      	ldrh	r0, [r7, #6]
 8003db0:	893a      	ldrh	r2, [r7, #8]
 8003db2:	8979      	ldrh	r1, [r7, #10]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	9301      	str	r3, [sp, #4]
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 fab6 	bl	8004330 <I2C_RequestMemoryWrite>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d052      	beq.n	8003e70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e081      	b.n	8003ed2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fd00 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d107      	bne.n	8003df6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e06b      	b.n	8003ed2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d11b      	bne.n	8003e70 <HAL_I2C_Mem_Write+0x180>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d017      	beq.n	8003e70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	781a      	ldrb	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1aa      	bne.n	8003dce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 fcec 	bl	800485a <I2C_WaitOnBTFFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00d      	beq.n	8003ea4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d107      	bne.n	8003ea0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e016      	b.n	8003ed2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e000      	b.n	8003ed2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ed0:	2302      	movs	r3, #2
  }
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	00100002 	.word	0x00100002
 8003ee0:	ffff0000 	.word	0xffff0000

08003ee4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08c      	sub	sp, #48	; 0x30
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	4608      	mov	r0, r1
 8003eee:	4611      	mov	r1, r2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	817b      	strh	r3, [r7, #10]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	813b      	strh	r3, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003efe:	f7fd feb1 	bl	8001c64 <HAL_GetTick>
 8003f02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	f040 8208 	bne.w	8004322 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	2319      	movs	r3, #25
 8003f18:	2201      	movs	r2, #1
 8003f1a:	497b      	ldr	r1, [pc, #492]	; (8004108 <HAL_I2C_Mem_Read+0x224>)
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 fb85 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e1fb      	b.n	8004324 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_I2C_Mem_Read+0x56>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e1f4      	b.n	8004324 <HAL_I2C_Mem_Read+0x440>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d007      	beq.n	8003f60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2222      	movs	r2, #34	; 0x22
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2240      	movs	r2, #64	; 0x40
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4a5b      	ldr	r2, [pc, #364]	; (800410c <HAL_I2C_Mem_Read+0x228>)
 8003fa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fa2:	88f8      	ldrh	r0, [r7, #6]
 8003fa4:	893a      	ldrh	r2, [r7, #8]
 8003fa6:	8979      	ldrh	r1, [r7, #10]
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fa52 	bl	800445c <I2C_RequestMemoryRead>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e1b0      	b.n	8004324 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d113      	bne.n	8003ff2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	623b      	str	r3, [r7, #32]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	623b      	str	r3, [r7, #32]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	623b      	str	r3, [r7, #32]
 8003fde:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	e184      	b.n	80042fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d11b      	bne.n	8004032 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004008:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	e164      	b.n	80042fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004036:	2b02      	cmp	r3, #2
 8004038:	d11b      	bne.n	8004072 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004048:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004058:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405a:	2300      	movs	r3, #0
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	e144      	b.n	80042fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004088:	e138      	b.n	80042fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	2b03      	cmp	r3, #3
 8004090:	f200 80f1 	bhi.w	8004276 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004098:	2b01      	cmp	r3, #1
 800409a:	d123      	bne.n	80040e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800409c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fc1b 	bl	80048dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e139      	b.n	8004324 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040e2:	e10b      	b.n	80042fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d14e      	bne.n	800418a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	2200      	movs	r2, #0
 80040f4:	4906      	ldr	r1, [pc, #24]	; (8004110 <HAL_I2C_Mem_Read+0x22c>)
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 fa98 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d008      	beq.n	8004114 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e10e      	b.n	8004324 <HAL_I2C_Mem_Read+0x440>
 8004106:	bf00      	nop
 8004108:	00100002 	.word	0x00100002
 800410c:	ffff0000 	.word	0xffff0000
 8004110:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004188:	e0b8      	b.n	80042fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004190:	2200      	movs	r2, #0
 8004192:	4966      	ldr	r1, [pc, #408]	; (800432c <HAL_I2C_Mem_Read+0x448>)
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 fa49 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0bf      	b.n	8004324 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	2200      	movs	r2, #0
 80041ee:	494f      	ldr	r1, [pc, #316]	; (800432c <HAL_I2C_Mem_Read+0x448>)
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fa1b 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e091      	b.n	8004324 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004274:	e042      	b.n	80042fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004278:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 fb2e 	bl	80048dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e04c      	b.n	8004324 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d118      	bne.n	80042fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004300:	2b00      	cmp	r3, #0
 8004302:	f47f aec2 	bne.w	800408a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e000      	b.n	8004324 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004322:	2302      	movs	r3, #2
  }
}
 8004324:	4618      	mov	r0, r3
 8004326:	3728      	adds	r7, #40	; 0x28
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	00010004 	.word	0x00010004

08004330 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	4608      	mov	r0, r1
 800433a:	4611      	mov	r1, r2
 800433c:	461a      	mov	r2, r3
 800433e:	4603      	mov	r3, r0
 8004340:	817b      	strh	r3, [r7, #10]
 8004342:	460b      	mov	r3, r1
 8004344:	813b      	strh	r3, [r7, #8]
 8004346:	4613      	mov	r3, r2
 8004348:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004358:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	2200      	movs	r2, #0
 8004362:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f960 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004380:	d103      	bne.n	800438a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004388:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e05f      	b.n	800444e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800438e:	897b      	ldrh	r3, [r7, #10]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	461a      	mov	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800439c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	6a3a      	ldr	r2, [r7, #32]
 80043a2:	492d      	ldr	r1, [pc, #180]	; (8004458 <I2C_RequestMemoryWrite+0x128>)
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f998 	bl	80046da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e04c      	b.n	800444e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043cc:	6a39      	ldr	r1, [r7, #32]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 fa02 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00d      	beq.n	80043f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d107      	bne.n	80043f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e02b      	b.n	800444e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d105      	bne.n	8004408 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043fc:	893b      	ldrh	r3, [r7, #8]
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	611a      	str	r2, [r3, #16]
 8004406:	e021      	b.n	800444c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004408:	893b      	ldrh	r3, [r7, #8]
 800440a:	0a1b      	lsrs	r3, r3, #8
 800440c:	b29b      	uxth	r3, r3
 800440e:	b2da      	uxtb	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004418:	6a39      	ldr	r1, [r7, #32]
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f9dc 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00d      	beq.n	8004442 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	2b04      	cmp	r3, #4
 800442c:	d107      	bne.n	800443e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e005      	b.n	800444e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004442:	893b      	ldrh	r3, [r7, #8]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	00010002 	.word	0x00010002

0800445c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af02      	add	r7, sp, #8
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	4608      	mov	r0, r1
 8004466:	4611      	mov	r1, r2
 8004468:	461a      	mov	r2, r3
 800446a:	4603      	mov	r3, r0
 800446c:	817b      	strh	r3, [r7, #10]
 800446e:	460b      	mov	r3, r1
 8004470:	813b      	strh	r3, [r7, #8]
 8004472:	4613      	mov	r3, r2
 8004474:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004484:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004494:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	2200      	movs	r2, #0
 800449e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 f8c2 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00d      	beq.n	80044ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044bc:	d103      	bne.n	80044c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e0aa      	b.n	8004620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044ca:	897b      	ldrh	r3, [r7, #10]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	6a3a      	ldr	r2, [r7, #32]
 80044de:	4952      	ldr	r1, [pc, #328]	; (8004628 <I2C_RequestMemoryRead+0x1cc>)
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 f8fa 	bl	80046da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e097      	b.n	8004620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004508:	6a39      	ldr	r1, [r7, #32]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f964 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00d      	beq.n	8004532 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	2b04      	cmp	r3, #4
 800451c:	d107      	bne.n	800452e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800452c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e076      	b.n	8004620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d105      	bne.n	8004544 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004538:	893b      	ldrh	r3, [r7, #8]
 800453a:	b2da      	uxtb	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	611a      	str	r2, [r3, #16]
 8004542:	e021      	b.n	8004588 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004544:	893b      	ldrh	r3, [r7, #8]
 8004546:	0a1b      	lsrs	r3, r3, #8
 8004548:	b29b      	uxth	r3, r3
 800454a:	b2da      	uxtb	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004554:	6a39      	ldr	r1, [r7, #32]
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f93e 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00d      	beq.n	800457e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	2b04      	cmp	r3, #4
 8004568:	d107      	bne.n	800457a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004578:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e050      	b.n	8004620 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800457e:	893b      	ldrh	r3, [r7, #8]
 8004580:	b2da      	uxtb	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458a:	6a39      	ldr	r1, [r7, #32]
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f923 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00d      	beq.n	80045b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	2b04      	cmp	r3, #4
 800459e:	d107      	bne.n	80045b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e035      	b.n	8004620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f82b 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00d      	beq.n	80045f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ea:	d103      	bne.n	80045f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e013      	b.n	8004620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045f8:	897b      	ldrh	r3, [r7, #10]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	f043 0301 	orr.w	r3, r3, #1
 8004600:	b2da      	uxtb	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	6a3a      	ldr	r2, [r7, #32]
 800460c:	4906      	ldr	r1, [pc, #24]	; (8004628 <I2C_RequestMemoryRead+0x1cc>)
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f863 	bl	80046da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	00010002 	.word	0x00010002

0800462c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	4613      	mov	r3, r2
 800463a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800463c:	e025      	b.n	800468a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d021      	beq.n	800468a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004646:	f7fd fb0d 	bl	8001c64 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d116      	bne.n	800468a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f043 0220 	orr.w	r2, r3, #32
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e023      	b.n	80046d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b01      	cmp	r3, #1
 8004692:	d10d      	bne.n	80046b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	43da      	mvns	r2, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4013      	ands	r3, r2
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	bf0c      	ite	eq
 80046a6:	2301      	moveq	r3, #1
 80046a8:	2300      	movne	r3, #0
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	461a      	mov	r2, r3
 80046ae:	e00c      	b.n	80046ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	43da      	mvns	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4013      	ands	r3, r2
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	bf0c      	ite	eq
 80046c2:	2301      	moveq	r3, #1
 80046c4:	2300      	movne	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d0b6      	beq.n	800463e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b084      	sub	sp, #16
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	607a      	str	r2, [r7, #4]
 80046e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046e8:	e051      	b.n	800478e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f8:	d123      	bne.n	8004742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004708:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004712:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f043 0204 	orr.w	r2, r3, #4
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e046      	b.n	80047d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d021      	beq.n	800478e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474a:	f7fd fa8b 	bl	8001c64 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	429a      	cmp	r2, r3
 8004758:	d302      	bcc.n	8004760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d116      	bne.n	800478e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f043 0220 	orr.w	r2, r3, #32
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e020      	b.n	80047d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	d10c      	bne.n	80047b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	43da      	mvns	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4013      	ands	r3, r2
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bf14      	ite	ne
 80047aa:	2301      	movne	r3, #1
 80047ac:	2300      	moveq	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	e00b      	b.n	80047ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	43da      	mvns	r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	4013      	ands	r3, r2
 80047be:	b29b      	uxth	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	bf14      	ite	ne
 80047c4:	2301      	movne	r3, #1
 80047c6:	2300      	moveq	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d18d      	bne.n	80046ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047e4:	e02d      	b.n	8004842 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f8ce 	bl	8004988 <I2C_IsAcknowledgeFailed>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e02d      	b.n	8004852 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fc:	d021      	beq.n	8004842 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fe:	f7fd fa31 	bl	8001c64 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	429a      	cmp	r2, r3
 800480c:	d302      	bcc.n	8004814 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d116      	bne.n	8004842 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f043 0220 	orr.w	r2, r3, #32
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e007      	b.n	8004852 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484c:	2b80      	cmp	r3, #128	; 0x80
 800484e:	d1ca      	bne.n	80047e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b084      	sub	sp, #16
 800485e:	af00      	add	r7, sp, #0
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004866:	e02d      	b.n	80048c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 f88d 	bl	8004988 <I2C_IsAcknowledgeFailed>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e02d      	b.n	80048d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487e:	d021      	beq.n	80048c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004880:	f7fd f9f0 	bl	8001c64 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	429a      	cmp	r2, r3
 800488e:	d302      	bcc.n	8004896 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d116      	bne.n	80048c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	f043 0220 	orr.w	r2, r3, #32
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e007      	b.n	80048d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d1ca      	bne.n	8004868 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048e8:	e042      	b.n	8004970 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d119      	bne.n	800492c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0210 	mvn.w	r2, #16
 8004900:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e029      	b.n	8004980 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492c:	f7fd f99a 	bl	8001c64 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	429a      	cmp	r2, r3
 800493a:	d302      	bcc.n	8004942 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d116      	bne.n	8004970 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	f043 0220 	orr.w	r2, r3, #32
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e007      	b.n	8004980 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b40      	cmp	r3, #64	; 0x40
 800497c:	d1b5      	bne.n	80048ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800499e:	d11b      	bne.n	80049d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	f043 0204 	orr.w	r2, r3, #4
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e000      	b.n	80049da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e128      	b.n	8004c4c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a90      	ldr	r2, [pc, #576]	; (8004c54 <HAL_I2S_Init+0x26c>)
 8004a12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7fc fe43 	bl	80016a0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a30:	f023 030f 	bic.w	r3, r3, #15
 8004a34:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d060      	beq.n	8004b08 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d102      	bne.n	8004a54 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004a4e:	2310      	movs	r3, #16
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	e001      	b.n	8004a58 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004a54:	2320      	movs	r3, #32
 8004a56:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d802      	bhi.n	8004a66 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004a66:	2001      	movs	r0, #1
 8004a68:	f001 f9d8 	bl	8005e1c <HAL_RCCEx_GetPeriphCLKFreq>
 8004a6c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a76:	d125      	bne.n	8004ac4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d010      	beq.n	8004aa2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	461a      	mov	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9c:	3305      	adds	r3, #5
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	e01f      	b.n	8004ae2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abe:	3305      	adds	r3, #5
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	e00e      	b.n	8004ae2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ade:	3305      	adds	r3, #5
 8004ae0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	4a5c      	ldr	r2, [pc, #368]	; (8004c58 <HAL_I2S_Init+0x270>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	08db      	lsrs	r3, r3, #3
 8004aec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	085b      	lsrs	r3, r3, #1
 8004afe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	021b      	lsls	r3, r3, #8
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	e003      	b.n	8004b10 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d902      	bls.n	8004b1c <HAL_I2S_Init+0x134>
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	2bff      	cmp	r3, #255	; 0xff
 8004b1a:	d907      	bls.n	8004b2c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b20:	f043 0210 	orr.w	r2, r3, #16
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e08f      	b.n	8004c4c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	ea42 0103 	orr.w	r1, r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b4a:	f023 030f 	bic.w	r3, r3, #15
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6851      	ldr	r1, [r2, #4]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6892      	ldr	r2, [r2, #8]
 8004b56:	4311      	orrs	r1, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	68d2      	ldr	r2, [r2, #12]
 8004b5c:	4311      	orrs	r1, r2
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6992      	ldr	r2, [r2, #24]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b6e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d161      	bne.n	8004c3c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a38      	ldr	r2, [pc, #224]	; (8004c5c <HAL_I2S_Init+0x274>)
 8004b7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a37      	ldr	r2, [pc, #220]	; (8004c60 <HAL_I2S_Init+0x278>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d101      	bne.n	8004b8c <HAL_I2S_Init+0x1a4>
 8004b88:	4b36      	ldr	r3, [pc, #216]	; (8004c64 <HAL_I2S_Init+0x27c>)
 8004b8a:	e001      	b.n	8004b90 <HAL_I2S_Init+0x1a8>
 8004b8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	4932      	ldr	r1, [pc, #200]	; (8004c60 <HAL_I2S_Init+0x278>)
 8004b98:	428a      	cmp	r2, r1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_I2S_Init+0x1b8>
 8004b9c:	4a31      	ldr	r2, [pc, #196]	; (8004c64 <HAL_I2S_Init+0x27c>)
 8004b9e:	e001      	b.n	8004ba4 <HAL_I2S_Init+0x1bc>
 8004ba0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004ba4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ba8:	f023 030f 	bic.w	r3, r3, #15
 8004bac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a2b      	ldr	r2, [pc, #172]	; (8004c60 <HAL_I2S_Init+0x278>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d101      	bne.n	8004bbc <HAL_I2S_Init+0x1d4>
 8004bb8:	4b2a      	ldr	r3, [pc, #168]	; (8004c64 <HAL_I2S_Init+0x27c>)
 8004bba:	e001      	b.n	8004bc0 <HAL_I2S_Init+0x1d8>
 8004bbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a25      	ldr	r2, [pc, #148]	; (8004c60 <HAL_I2S_Init+0x278>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d101      	bne.n	8004bd2 <HAL_I2S_Init+0x1ea>
 8004bce:	4b25      	ldr	r3, [pc, #148]	; (8004c64 <HAL_I2S_Init+0x27c>)
 8004bd0:	e001      	b.n	8004bd6 <HAL_I2S_Init+0x1ee>
 8004bd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004be2:	d003      	beq.n	8004bec <HAL_I2S_Init+0x204>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d103      	bne.n	8004bf4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	e001      	b.n	8004bf8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c02:	4313      	orrs	r3, r2
 8004c04:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c16:	4313      	orrs	r3, r2
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	897b      	ldrh	r3, [r7, #10]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c24:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a0d      	ldr	r2, [pc, #52]	; (8004c60 <HAL_I2S_Init+0x278>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d101      	bne.n	8004c34 <HAL_I2S_Init+0x24c>
 8004c30:	4b0c      	ldr	r3, [pc, #48]	; (8004c64 <HAL_I2S_Init+0x27c>)
 8004c32:	e001      	b.n	8004c38 <HAL_I2S_Init+0x250>
 8004c34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c38:	897a      	ldrh	r2, [r7, #10]
 8004c3a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3720      	adds	r7, #32
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	08004d5f 	.word	0x08004d5f
 8004c58:	cccccccd 	.word	0xcccccccd
 8004c5c:	08004e75 	.word	0x08004e75
 8004c60:	40003800 	.word	0x40003800
 8004c64:	40003400 	.word	0x40003400

08004c68 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	881a      	ldrh	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	1c9a      	adds	r2, r3, #2
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10e      	bne.n	8004cf8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ce8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff ffb8 	bl	8004c68 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	b292      	uxth	r2, r2
 8004d14:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1a:	1c9a      	adds	r2, r3, #2
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10e      	bne.n	8004d56 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d46:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff ff93 	bl	8004c7c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b086      	sub	sp, #24
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d13a      	bne.n	8004df0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d109      	bne.n	8004d98 <I2S_IRQHandler+0x3a>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8e:	2b40      	cmp	r3, #64	; 0x40
 8004d90:	d102      	bne.n	8004d98 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff ffb4 	bl	8004d00 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d126      	bne.n	8004df0 <I2S_IRQHandler+0x92>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d11f      	bne.n	8004df0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dbe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	613b      	str	r3, [r7, #16]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	613b      	str	r3, [r7, #16]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	613b      	str	r3, [r7, #16]
 8004dd4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de2:	f043 0202 	orr.w	r2, r3, #2
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7ff ff50 	bl	8004c90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d136      	bne.n	8004e6a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d109      	bne.n	8004e1a <I2S_IRQHandler+0xbc>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e10:	2b80      	cmp	r3, #128	; 0x80
 8004e12:	d102      	bne.n	8004e1a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff ff45 	bl	8004ca4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d122      	bne.n	8004e6a <I2S_IRQHandler+0x10c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d11b      	bne.n	8004e6a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e40:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004e42:	2300      	movs	r3, #0
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5c:	f043 0204 	orr.w	r2, r3, #4
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff ff13 	bl	8004c90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e6a:	bf00      	nop
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a92      	ldr	r2, [pc, #584]	; (80050d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d101      	bne.n	8004e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004e8e:	4b92      	ldr	r3, [pc, #584]	; (80050d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e90:	e001      	b.n	8004e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004e92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a8b      	ldr	r2, [pc, #556]	; (80050d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d101      	bne.n	8004eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004eac:	4b8a      	ldr	r3, [pc, #552]	; (80050d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004eae:	e001      	b.n	8004eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004eb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ec0:	d004      	beq.n	8004ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f040 8099 	bne.w	8004ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d107      	bne.n	8004ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f925 	bl	8005130 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d107      	bne.n	8004f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f9c8 	bl	8005290 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b40      	cmp	r3, #64	; 0x40
 8004f08:	d13a      	bne.n	8004f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f003 0320 	and.w	r3, r3, #32
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d035      	beq.n	8004f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a6e      	ldr	r2, [pc, #440]	; (80050d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d101      	bne.n	8004f22 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004f1e:	4b6e      	ldr	r3, [pc, #440]	; (80050d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f20:	e001      	b.n	8004f26 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004f22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4969      	ldr	r1, [pc, #420]	; (80050d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f2e:	428b      	cmp	r3, r1
 8004f30:	d101      	bne.n	8004f36 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004f32:	4b69      	ldr	r3, [pc, #420]	; (80050d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f34:	e001      	b.n	8004f3a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004f36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f3e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f4e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	f043 0202 	orr.w	r2, r3, #2
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7ff fe88 	bl	8004c90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	f040 80c3 	bne.w	8005112 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 80bd 	beq.w	8005112 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fa6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a49      	ldr	r2, [pc, #292]	; (80050d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d101      	bne.n	8004fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004fb2:	4b49      	ldr	r3, [pc, #292]	; (80050d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fb4:	e001      	b.n	8004fba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004fb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4944      	ldr	r1, [pc, #272]	; (80050d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fc2:	428b      	cmp	r3, r1
 8004fc4:	d101      	bne.n	8004fca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004fc6:	4b44      	ldr	r3, [pc, #272]	; (80050d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fc8:	e001      	b.n	8004fce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004fca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fd2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60bb      	str	r3, [r7, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	60bb      	str	r3, [r7, #8]
 8004fe0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fee:	f043 0204 	orr.w	r2, r3, #4
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff fe4a 	bl	8004c90 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ffc:	e089      	b.n	8005112 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b02      	cmp	r3, #2
 8005006:	d107      	bne.n	8005018 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f8be 	bl	8005194 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b01      	cmp	r3, #1
 8005020:	d107      	bne.n	8005032 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f8fd 	bl	800522c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005038:	2b40      	cmp	r3, #64	; 0x40
 800503a:	d12f      	bne.n	800509c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b00      	cmp	r3, #0
 8005044:	d02a      	beq.n	800509c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005054:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1e      	ldr	r2, [pc, #120]	; (80050d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d101      	bne.n	8005064 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005060:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005062:	e001      	b.n	8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005064:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4919      	ldr	r1, [pc, #100]	; (80050d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005070:	428b      	cmp	r3, r1
 8005072:	d101      	bne.n	8005078 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005074:	4b18      	ldr	r3, [pc, #96]	; (80050d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005076:	e001      	b.n	800507c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005078:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800507c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005080:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508e:	f043 0202 	orr.w	r2, r3, #2
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7ff fdfa 	bl	8004c90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d136      	bne.n	8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d031      	beq.n	8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a07      	ldr	r2, [pc, #28]	; (80050d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d101      	bne.n	80050be <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80050ba:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050bc:	e001      	b.n	80050c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80050be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4902      	ldr	r1, [pc, #8]	; (80050d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050ca:	428b      	cmp	r3, r1
 80050cc:	d106      	bne.n	80050dc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80050ce:	4b02      	ldr	r3, [pc, #8]	; (80050d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050d0:	e006      	b.n	80050e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80050d2:	bf00      	nop
 80050d4:	40003800 	.word	0x40003800
 80050d8:	40003400 	.word	0x40003400
 80050dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050e4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005102:	f043 0204 	orr.w	r2, r3, #4
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7ff fdc0 	bl	8004c90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005110:	e000      	b.n	8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005112:	bf00      	nop
}
 8005114:	bf00      	nop
 8005116:	3720      	adds	r7, #32
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	1c99      	adds	r1, r3, #2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6251      	str	r1, [r2, #36]	; 0x24
 8005142:	881a      	ldrh	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d113      	bne.n	800518a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005170:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d106      	bne.n	800518a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff ffc9 	bl	800511c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	1c99      	adds	r1, r3, #2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6251      	str	r1, [r2, #36]	; 0x24
 80051a6:	8819      	ldrh	r1, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a1d      	ldr	r2, [pc, #116]	; (8005224 <I2SEx_TxISR_I2SExt+0x90>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d101      	bne.n	80051b6 <I2SEx_TxISR_I2SExt+0x22>
 80051b2:	4b1d      	ldr	r3, [pc, #116]	; (8005228 <I2SEx_TxISR_I2SExt+0x94>)
 80051b4:	e001      	b.n	80051ba <I2SEx_TxISR_I2SExt+0x26>
 80051b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051ba:	460a      	mov	r2, r1
 80051bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d121      	bne.n	800521a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a12      	ldr	r2, [pc, #72]	; (8005224 <I2SEx_TxISR_I2SExt+0x90>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d101      	bne.n	80051e4 <I2SEx_TxISR_I2SExt+0x50>
 80051e0:	4b11      	ldr	r3, [pc, #68]	; (8005228 <I2SEx_TxISR_I2SExt+0x94>)
 80051e2:	e001      	b.n	80051e8 <I2SEx_TxISR_I2SExt+0x54>
 80051e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	490d      	ldr	r1, [pc, #52]	; (8005224 <I2SEx_TxISR_I2SExt+0x90>)
 80051f0:	428b      	cmp	r3, r1
 80051f2:	d101      	bne.n	80051f8 <I2SEx_TxISR_I2SExt+0x64>
 80051f4:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <I2SEx_TxISR_I2SExt+0x94>)
 80051f6:	e001      	b.n	80051fc <I2SEx_TxISR_I2SExt+0x68>
 80051f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005200:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d106      	bne.n	800521a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7ff ff81 	bl	800511c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800521a:	bf00      	nop
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40003800 	.word	0x40003800
 8005228:	40003400 	.word	0x40003400

0800522c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68d8      	ldr	r0, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	1c99      	adds	r1, r3, #2
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005244:	b282      	uxth	r2, r0
 8005246:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800525a:	b29b      	uxth	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d113      	bne.n	8005288 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800526e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff ff4a 	bl	800511c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005288:	bf00      	nop
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a20      	ldr	r2, [pc, #128]	; (8005320 <I2SEx_RxISR_I2SExt+0x90>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d101      	bne.n	80052a6 <I2SEx_RxISR_I2SExt+0x16>
 80052a2:	4b20      	ldr	r3, [pc, #128]	; (8005324 <I2SEx_RxISR_I2SExt+0x94>)
 80052a4:	e001      	b.n	80052aa <I2SEx_RxISR_I2SExt+0x1a>
 80052a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052aa:	68d8      	ldr	r0, [r3, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	1c99      	adds	r1, r3, #2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80052b6:	b282      	uxth	r2, r0
 80052b8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052be:	b29b      	uxth	r3, r3
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d121      	bne.n	8005316 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a12      	ldr	r2, [pc, #72]	; (8005320 <I2SEx_RxISR_I2SExt+0x90>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d101      	bne.n	80052e0 <I2SEx_RxISR_I2SExt+0x50>
 80052dc:	4b11      	ldr	r3, [pc, #68]	; (8005324 <I2SEx_RxISR_I2SExt+0x94>)
 80052de:	e001      	b.n	80052e4 <I2SEx_RxISR_I2SExt+0x54>
 80052e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	490d      	ldr	r1, [pc, #52]	; (8005320 <I2SEx_RxISR_I2SExt+0x90>)
 80052ec:	428b      	cmp	r3, r1
 80052ee:	d101      	bne.n	80052f4 <I2SEx_RxISR_I2SExt+0x64>
 80052f0:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <I2SEx_RxISR_I2SExt+0x94>)
 80052f2:	e001      	b.n	80052f8 <I2SEx_RxISR_I2SExt+0x68>
 80052f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052fc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff ff03 	bl	800511c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	40003800 	.word	0x40003800
 8005324:	40003400 	.word	0x40003400

08005328 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e267      	b.n	800580a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d075      	beq.n	8005432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005346:	4b88      	ldr	r3, [pc, #544]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 030c 	and.w	r3, r3, #12
 800534e:	2b04      	cmp	r3, #4
 8005350:	d00c      	beq.n	800536c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005352:	4b85      	ldr	r3, [pc, #532]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800535a:	2b08      	cmp	r3, #8
 800535c:	d112      	bne.n	8005384 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800535e:	4b82      	ldr	r3, [pc, #520]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800536a:	d10b      	bne.n	8005384 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800536c:	4b7e      	ldr	r3, [pc, #504]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d05b      	beq.n	8005430 <HAL_RCC_OscConfig+0x108>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d157      	bne.n	8005430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e242      	b.n	800580a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800538c:	d106      	bne.n	800539c <HAL_RCC_OscConfig+0x74>
 800538e:	4b76      	ldr	r3, [pc, #472]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a75      	ldr	r2, [pc, #468]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 8005394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	e01d      	b.n	80053d8 <HAL_RCC_OscConfig+0xb0>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053a4:	d10c      	bne.n	80053c0 <HAL_RCC_OscConfig+0x98>
 80053a6:	4b70      	ldr	r3, [pc, #448]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a6f      	ldr	r2, [pc, #444]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 80053ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	4b6d      	ldr	r3, [pc, #436]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a6c      	ldr	r2, [pc, #432]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 80053b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	e00b      	b.n	80053d8 <HAL_RCC_OscConfig+0xb0>
 80053c0:	4b69      	ldr	r3, [pc, #420]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a68      	ldr	r2, [pc, #416]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 80053c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	4b66      	ldr	r3, [pc, #408]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a65      	ldr	r2, [pc, #404]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 80053d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d013      	beq.n	8005408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e0:	f7fc fc40 	bl	8001c64 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053e8:	f7fc fc3c 	bl	8001c64 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b64      	cmp	r3, #100	; 0x64
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e207      	b.n	800580a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053fa:	4b5b      	ldr	r3, [pc, #364]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0f0      	beq.n	80053e8 <HAL_RCC_OscConfig+0xc0>
 8005406:	e014      	b.n	8005432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005408:	f7fc fc2c 	bl	8001c64 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005410:	f7fc fc28 	bl	8001c64 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b64      	cmp	r3, #100	; 0x64
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e1f3      	b.n	800580a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005422:	4b51      	ldr	r3, [pc, #324]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f0      	bne.n	8005410 <HAL_RCC_OscConfig+0xe8>
 800542e:	e000      	b.n	8005432 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d063      	beq.n	8005506 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800543e:	4b4a      	ldr	r3, [pc, #296]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 030c 	and.w	r3, r3, #12
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00b      	beq.n	8005462 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800544a:	4b47      	ldr	r3, [pc, #284]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005452:	2b08      	cmp	r3, #8
 8005454:	d11c      	bne.n	8005490 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005456:	4b44      	ldr	r3, [pc, #272]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d116      	bne.n	8005490 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005462:	4b41      	ldr	r3, [pc, #260]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d005      	beq.n	800547a <HAL_RCC_OscConfig+0x152>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d001      	beq.n	800547a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e1c7      	b.n	800580a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800547a:	4b3b      	ldr	r3, [pc, #236]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	4937      	ldr	r1, [pc, #220]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 800548a:	4313      	orrs	r3, r2
 800548c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800548e:	e03a      	b.n	8005506 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d020      	beq.n	80054da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005498:	4b34      	ldr	r3, [pc, #208]	; (800556c <HAL_RCC_OscConfig+0x244>)
 800549a:	2201      	movs	r2, #1
 800549c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549e:	f7fc fbe1 	bl	8001c64 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054a6:	f7fc fbdd 	bl	8001c64 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e1a8      	b.n	800580a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b8:	4b2b      	ldr	r3, [pc, #172]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0f0      	beq.n	80054a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c4:	4b28      	ldr	r3, [pc, #160]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	4925      	ldr	r1, [pc, #148]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	600b      	str	r3, [r1, #0]
 80054d8:	e015      	b.n	8005506 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054da:	4b24      	ldr	r3, [pc, #144]	; (800556c <HAL_RCC_OscConfig+0x244>)
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e0:	f7fc fbc0 	bl	8001c64 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054e8:	f7fc fbbc 	bl	8001c64 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e187      	b.n	800580a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054fa:	4b1b      	ldr	r3, [pc, #108]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f0      	bne.n	80054e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b00      	cmp	r3, #0
 8005510:	d036      	beq.n	8005580 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d016      	beq.n	8005548 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800551a:	4b15      	ldr	r3, [pc, #84]	; (8005570 <HAL_RCC_OscConfig+0x248>)
 800551c:	2201      	movs	r2, #1
 800551e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005520:	f7fc fba0 	bl	8001c64 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005528:	f7fc fb9c 	bl	8001c64 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e167      	b.n	800580a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800553a:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <HAL_RCC_OscConfig+0x240>)
 800553c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f0      	beq.n	8005528 <HAL_RCC_OscConfig+0x200>
 8005546:	e01b      	b.n	8005580 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005548:	4b09      	ldr	r3, [pc, #36]	; (8005570 <HAL_RCC_OscConfig+0x248>)
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800554e:	f7fc fb89 	bl	8001c64 <HAL_GetTick>
 8005552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005554:	e00e      	b.n	8005574 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005556:	f7fc fb85 	bl	8001c64 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d907      	bls.n	8005574 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e150      	b.n	800580a <HAL_RCC_OscConfig+0x4e2>
 8005568:	40023800 	.word	0x40023800
 800556c:	42470000 	.word	0x42470000
 8005570:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005574:	4b88      	ldr	r3, [pc, #544]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 8005576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1ea      	bne.n	8005556 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 8097 	beq.w	80056bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800558e:	2300      	movs	r3, #0
 8005590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005592:	4b81      	ldr	r3, [pc, #516]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10f      	bne.n	80055be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800559e:	2300      	movs	r3, #0
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	4b7d      	ldr	r3, [pc, #500]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	4a7c      	ldr	r2, [pc, #496]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 80055a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ac:	6413      	str	r3, [r2, #64]	; 0x40
 80055ae:	4b7a      	ldr	r3, [pc, #488]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b6:	60bb      	str	r3, [r7, #8]
 80055b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ba:	2301      	movs	r3, #1
 80055bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055be:	4b77      	ldr	r3, [pc, #476]	; (800579c <HAL_RCC_OscConfig+0x474>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d118      	bne.n	80055fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ca:	4b74      	ldr	r3, [pc, #464]	; (800579c <HAL_RCC_OscConfig+0x474>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a73      	ldr	r2, [pc, #460]	; (800579c <HAL_RCC_OscConfig+0x474>)
 80055d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055d6:	f7fc fb45 	bl	8001c64 <HAL_GetTick>
 80055da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055de:	f7fc fb41 	bl	8001c64 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e10c      	b.n	800580a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f0:	4b6a      	ldr	r3, [pc, #424]	; (800579c <HAL_RCC_OscConfig+0x474>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0f0      	beq.n	80055de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d106      	bne.n	8005612 <HAL_RCC_OscConfig+0x2ea>
 8005604:	4b64      	ldr	r3, [pc, #400]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 8005606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005608:	4a63      	ldr	r2, [pc, #396]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 800560a:	f043 0301 	orr.w	r3, r3, #1
 800560e:	6713      	str	r3, [r2, #112]	; 0x70
 8005610:	e01c      	b.n	800564c <HAL_RCC_OscConfig+0x324>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b05      	cmp	r3, #5
 8005618:	d10c      	bne.n	8005634 <HAL_RCC_OscConfig+0x30c>
 800561a:	4b5f      	ldr	r3, [pc, #380]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 800561c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561e:	4a5e      	ldr	r2, [pc, #376]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 8005620:	f043 0304 	orr.w	r3, r3, #4
 8005624:	6713      	str	r3, [r2, #112]	; 0x70
 8005626:	4b5c      	ldr	r3, [pc, #368]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 8005628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562a:	4a5b      	ldr	r2, [pc, #364]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 800562c:	f043 0301 	orr.w	r3, r3, #1
 8005630:	6713      	str	r3, [r2, #112]	; 0x70
 8005632:	e00b      	b.n	800564c <HAL_RCC_OscConfig+0x324>
 8005634:	4b58      	ldr	r3, [pc, #352]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 8005636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005638:	4a57      	ldr	r2, [pc, #348]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 800563a:	f023 0301 	bic.w	r3, r3, #1
 800563e:	6713      	str	r3, [r2, #112]	; 0x70
 8005640:	4b55      	ldr	r3, [pc, #340]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 8005642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005644:	4a54      	ldr	r2, [pc, #336]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 8005646:	f023 0304 	bic.w	r3, r3, #4
 800564a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d015      	beq.n	8005680 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005654:	f7fc fb06 	bl	8001c64 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800565a:	e00a      	b.n	8005672 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800565c:	f7fc fb02 	bl	8001c64 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	f241 3288 	movw	r2, #5000	; 0x1388
 800566a:	4293      	cmp	r3, r2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e0cb      	b.n	800580a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005672:	4b49      	ldr	r3, [pc, #292]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 8005674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0ee      	beq.n	800565c <HAL_RCC_OscConfig+0x334>
 800567e:	e014      	b.n	80056aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005680:	f7fc faf0 	bl	8001c64 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005686:	e00a      	b.n	800569e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005688:	f7fc faec 	bl	8001c64 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	f241 3288 	movw	r2, #5000	; 0x1388
 8005696:	4293      	cmp	r3, r2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e0b5      	b.n	800580a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800569e:	4b3e      	ldr	r3, [pc, #248]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 80056a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1ee      	bne.n	8005688 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056aa:	7dfb      	ldrb	r3, [r7, #23]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d105      	bne.n	80056bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056b0:	4b39      	ldr	r3, [pc, #228]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	4a38      	ldr	r2, [pc, #224]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 80056b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 80a1 	beq.w	8005808 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056c6:	4b34      	ldr	r3, [pc, #208]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 030c 	and.w	r3, r3, #12
 80056ce:	2b08      	cmp	r3, #8
 80056d0:	d05c      	beq.n	800578c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d141      	bne.n	800575e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056da:	4b31      	ldr	r3, [pc, #196]	; (80057a0 <HAL_RCC_OscConfig+0x478>)
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e0:	f7fc fac0 	bl	8001c64 <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056e8:	f7fc fabc 	bl	8001c64 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e087      	b.n	800580a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056fa:	4b27      	ldr	r3, [pc, #156]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f0      	bne.n	80056e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	69da      	ldr	r2, [r3, #28]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	019b      	lsls	r3, r3, #6
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571c:	085b      	lsrs	r3, r3, #1
 800571e:	3b01      	subs	r3, #1
 8005720:	041b      	lsls	r3, r3, #16
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	061b      	lsls	r3, r3, #24
 800572a:	491b      	ldr	r1, [pc, #108]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 800572c:	4313      	orrs	r3, r2
 800572e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005730:	4b1b      	ldr	r3, [pc, #108]	; (80057a0 <HAL_RCC_OscConfig+0x478>)
 8005732:	2201      	movs	r2, #1
 8005734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005736:	f7fc fa95 	bl	8001c64 <HAL_GetTick>
 800573a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800573c:	e008      	b.n	8005750 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800573e:	f7fc fa91 	bl	8001c64 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e05c      	b.n	800580a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005750:	4b11      	ldr	r3, [pc, #68]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0f0      	beq.n	800573e <HAL_RCC_OscConfig+0x416>
 800575c:	e054      	b.n	8005808 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800575e:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <HAL_RCC_OscConfig+0x478>)
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005764:	f7fc fa7e 	bl	8001c64 <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800576c:	f7fc fa7a 	bl	8001c64 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e045      	b.n	800580a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800577e:	4b06      	ldr	r3, [pc, #24]	; (8005798 <HAL_RCC_OscConfig+0x470>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f0      	bne.n	800576c <HAL_RCC_OscConfig+0x444>
 800578a:	e03d      	b.n	8005808 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d107      	bne.n	80057a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e038      	b.n	800580a <HAL_RCC_OscConfig+0x4e2>
 8005798:	40023800 	.word	0x40023800
 800579c:	40007000 	.word	0x40007000
 80057a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057a4:	4b1b      	ldr	r3, [pc, #108]	; (8005814 <HAL_RCC_OscConfig+0x4ec>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d028      	beq.n	8005804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057bc:	429a      	cmp	r2, r3
 80057be:	d121      	bne.n	8005804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d11a      	bne.n	8005804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057d4:	4013      	ands	r3, r2
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057dc:	4293      	cmp	r3, r2
 80057de:	d111      	bne.n	8005804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ea:	085b      	lsrs	r3, r3, #1
 80057ec:	3b01      	subs	r3, #1
 80057ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d107      	bne.n	8005804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005800:	429a      	cmp	r2, r3
 8005802:	d001      	beq.n	8005808 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	40023800 	.word	0x40023800

08005818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e0cc      	b.n	80059c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800582c:	4b68      	ldr	r3, [pc, #416]	; (80059d0 <HAL_RCC_ClockConfig+0x1b8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d90c      	bls.n	8005854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800583a:	4b65      	ldr	r3, [pc, #404]	; (80059d0 <HAL_RCC_ClockConfig+0x1b8>)
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005842:	4b63      	ldr	r3, [pc, #396]	; (80059d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d001      	beq.n	8005854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e0b8      	b.n	80059c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d020      	beq.n	80058a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800586c:	4b59      	ldr	r3, [pc, #356]	; (80059d4 <HAL_RCC_ClockConfig+0x1bc>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	4a58      	ldr	r2, [pc, #352]	; (80059d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005872:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005876:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b00      	cmp	r3, #0
 8005882:	d005      	beq.n	8005890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005884:	4b53      	ldr	r3, [pc, #332]	; (80059d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	4a52      	ldr	r2, [pc, #328]	; (80059d4 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800588e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005890:	4b50      	ldr	r3, [pc, #320]	; (80059d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	494d      	ldr	r1, [pc, #308]	; (80059d4 <HAL_RCC_ClockConfig+0x1bc>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d044      	beq.n	8005938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d107      	bne.n	80058c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058b6:	4b47      	ldr	r3, [pc, #284]	; (80059d4 <HAL_RCC_ClockConfig+0x1bc>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d119      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e07f      	b.n	80059c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d003      	beq.n	80058d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	d107      	bne.n	80058e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058d6:	4b3f      	ldr	r3, [pc, #252]	; (80059d4 <HAL_RCC_ClockConfig+0x1bc>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d109      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e06f      	b.n	80059c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058e6:	4b3b      	ldr	r3, [pc, #236]	; (80059d4 <HAL_RCC_ClockConfig+0x1bc>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e067      	b.n	80059c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058f6:	4b37      	ldr	r3, [pc, #220]	; (80059d4 <HAL_RCC_ClockConfig+0x1bc>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f023 0203 	bic.w	r2, r3, #3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	4934      	ldr	r1, [pc, #208]	; (80059d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005904:	4313      	orrs	r3, r2
 8005906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005908:	f7fc f9ac 	bl	8001c64 <HAL_GetTick>
 800590c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800590e:	e00a      	b.n	8005926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005910:	f7fc f9a8 	bl	8001c64 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	f241 3288 	movw	r2, #5000	; 0x1388
 800591e:	4293      	cmp	r3, r2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e04f      	b.n	80059c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005926:	4b2b      	ldr	r3, [pc, #172]	; (80059d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 020c 	and.w	r2, r3, #12
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	429a      	cmp	r2, r3
 8005936:	d1eb      	bne.n	8005910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005938:	4b25      	ldr	r3, [pc, #148]	; (80059d0 <HAL_RCC_ClockConfig+0x1b8>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	429a      	cmp	r2, r3
 8005944:	d20c      	bcs.n	8005960 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005946:	4b22      	ldr	r3, [pc, #136]	; (80059d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800594e:	4b20      	ldr	r3, [pc, #128]	; (80059d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	429a      	cmp	r2, r3
 800595a:	d001      	beq.n	8005960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e032      	b.n	80059c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b00      	cmp	r3, #0
 800596a:	d008      	beq.n	800597e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800596c:	4b19      	ldr	r3, [pc, #100]	; (80059d4 <HAL_RCC_ClockConfig+0x1bc>)
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	4916      	ldr	r1, [pc, #88]	; (80059d4 <HAL_RCC_ClockConfig+0x1bc>)
 800597a:	4313      	orrs	r3, r2
 800597c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b00      	cmp	r3, #0
 8005988:	d009      	beq.n	800599e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800598a:	4b12      	ldr	r3, [pc, #72]	; (80059d4 <HAL_RCC_ClockConfig+0x1bc>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	490e      	ldr	r1, [pc, #56]	; (80059d4 <HAL_RCC_ClockConfig+0x1bc>)
 800599a:	4313      	orrs	r3, r2
 800599c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800599e:	f000 f821 	bl	80059e4 <HAL_RCC_GetSysClockFreq>
 80059a2:	4602      	mov	r2, r0
 80059a4:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <HAL_RCC_ClockConfig+0x1bc>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	091b      	lsrs	r3, r3, #4
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	490a      	ldr	r1, [pc, #40]	; (80059d8 <HAL_RCC_ClockConfig+0x1c0>)
 80059b0:	5ccb      	ldrb	r3, [r1, r3]
 80059b2:	fa22 f303 	lsr.w	r3, r2, r3
 80059b6:	4a09      	ldr	r2, [pc, #36]	; (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 80059b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059ba:	4b09      	ldr	r3, [pc, #36]	; (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fc f90c 	bl	8001bdc <HAL_InitTick>

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	40023c00 	.word	0x40023c00
 80059d4:	40023800 	.word	0x40023800
 80059d8:	0800c844 	.word	0x0800c844
 80059dc:	20000000 	.word	0x20000000
 80059e0:	20000004 	.word	0x20000004

080059e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059e8:	b094      	sub	sp, #80	; 0x50
 80059ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	647b      	str	r3, [r7, #68]	; 0x44
 80059f0:	2300      	movs	r3, #0
 80059f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f4:	2300      	movs	r3, #0
 80059f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059fc:	4b79      	ldr	r3, [pc, #484]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x200>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f003 030c 	and.w	r3, r3, #12
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d00d      	beq.n	8005a24 <HAL_RCC_GetSysClockFreq+0x40>
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	f200 80e1 	bhi.w	8005bd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <HAL_RCC_GetSysClockFreq+0x34>
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d003      	beq.n	8005a1e <HAL_RCC_GetSysClockFreq+0x3a>
 8005a16:	e0db      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a18:	4b73      	ldr	r3, [pc, #460]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a1c:	e0db      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a1e:	4b73      	ldr	r3, [pc, #460]	; (8005bec <HAL_RCC_GetSysClockFreq+0x208>)
 8005a20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a22:	e0d8      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a24:	4b6f      	ldr	r3, [pc, #444]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a2e:	4b6d      	ldr	r3, [pc, #436]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d063      	beq.n	8005b02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a3a:	4b6a      	ldr	r3, [pc, #424]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	099b      	lsrs	r3, r3, #6
 8005a40:	2200      	movs	r2, #0
 8005a42:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a4e:	2300      	movs	r3, #0
 8005a50:	637b      	str	r3, [r7, #52]	; 0x34
 8005a52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a56:	4622      	mov	r2, r4
 8005a58:	462b      	mov	r3, r5
 8005a5a:	f04f 0000 	mov.w	r0, #0
 8005a5e:	f04f 0100 	mov.w	r1, #0
 8005a62:	0159      	lsls	r1, r3, #5
 8005a64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a68:	0150      	lsls	r0, r2, #5
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4621      	mov	r1, r4
 8005a70:	1a51      	subs	r1, r2, r1
 8005a72:	6139      	str	r1, [r7, #16]
 8005a74:	4629      	mov	r1, r5
 8005a76:	eb63 0301 	sbc.w	r3, r3, r1
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a88:	4659      	mov	r1, fp
 8005a8a:	018b      	lsls	r3, r1, #6
 8005a8c:	4651      	mov	r1, sl
 8005a8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a92:	4651      	mov	r1, sl
 8005a94:	018a      	lsls	r2, r1, #6
 8005a96:	4651      	mov	r1, sl
 8005a98:	ebb2 0801 	subs.w	r8, r2, r1
 8005a9c:	4659      	mov	r1, fp
 8005a9e:	eb63 0901 	sbc.w	r9, r3, r1
 8005aa2:	f04f 0200 	mov.w	r2, #0
 8005aa6:	f04f 0300 	mov.w	r3, #0
 8005aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ab6:	4690      	mov	r8, r2
 8005ab8:	4699      	mov	r9, r3
 8005aba:	4623      	mov	r3, r4
 8005abc:	eb18 0303 	adds.w	r3, r8, r3
 8005ac0:	60bb      	str	r3, [r7, #8]
 8005ac2:	462b      	mov	r3, r5
 8005ac4:	eb49 0303 	adc.w	r3, r9, r3
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	024b      	lsls	r3, r1, #9
 8005ada:	4621      	mov	r1, r4
 8005adc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	024a      	lsls	r2, r1, #9
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aea:	2200      	movs	r2, #0
 8005aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005af0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005af4:	f7fa ff7a 	bl	80009ec <__aeabi_uldivmod>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4613      	mov	r3, r2
 8005afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b00:	e058      	b.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b02:	4b38      	ldr	r3, [pc, #224]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	099b      	lsrs	r3, r3, #6
 8005b08:	2200      	movs	r2, #0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	4611      	mov	r1, r2
 8005b0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b12:	623b      	str	r3, [r7, #32]
 8005b14:	2300      	movs	r3, #0
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
 8005b18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b1c:	4642      	mov	r2, r8
 8005b1e:	464b      	mov	r3, r9
 8005b20:	f04f 0000 	mov.w	r0, #0
 8005b24:	f04f 0100 	mov.w	r1, #0
 8005b28:	0159      	lsls	r1, r3, #5
 8005b2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b2e:	0150      	lsls	r0, r2, #5
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4641      	mov	r1, r8
 8005b36:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b54:	ebb2 040a 	subs.w	r4, r2, sl
 8005b58:	eb63 050b 	sbc.w	r5, r3, fp
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	00eb      	lsls	r3, r5, #3
 8005b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b6a:	00e2      	lsls	r2, r4, #3
 8005b6c:	4614      	mov	r4, r2
 8005b6e:	461d      	mov	r5, r3
 8005b70:	4643      	mov	r3, r8
 8005b72:	18e3      	adds	r3, r4, r3
 8005b74:	603b      	str	r3, [r7, #0]
 8005b76:	464b      	mov	r3, r9
 8005b78:	eb45 0303 	adc.w	r3, r5, r3
 8005b7c:	607b      	str	r3, [r7, #4]
 8005b7e:	f04f 0200 	mov.w	r2, #0
 8005b82:	f04f 0300 	mov.w	r3, #0
 8005b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b8a:	4629      	mov	r1, r5
 8005b8c:	028b      	lsls	r3, r1, #10
 8005b8e:	4621      	mov	r1, r4
 8005b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b94:	4621      	mov	r1, r4
 8005b96:	028a      	lsls	r2, r1, #10
 8005b98:	4610      	mov	r0, r2
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	61bb      	str	r3, [r7, #24]
 8005ba2:	61fa      	str	r2, [r7, #28]
 8005ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ba8:	f7fa ff20 	bl	80009ec <__aeabi_uldivmod>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	0c1b      	lsrs	r3, r3, #16
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005bc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bce:	e002      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3750      	adds	r7, #80	; 0x50
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005be2:	bf00      	nop
 8005be4:	40023800 	.word	0x40023800
 8005be8:	00f42400 	.word	0x00f42400
 8005bec:	007a1200 	.word	0x007a1200

08005bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bf4:	4b03      	ldr	r3, [pc, #12]	; (8005c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20000000 	.word	0x20000000

08005c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c0c:	f7ff fff0 	bl	8005bf0 <HAL_RCC_GetHCLKFreq>
 8005c10:	4602      	mov	r2, r0
 8005c12:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	0a9b      	lsrs	r3, r3, #10
 8005c18:	f003 0307 	and.w	r3, r3, #7
 8005c1c:	4903      	ldr	r1, [pc, #12]	; (8005c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c1e:	5ccb      	ldrb	r3, [r1, r3]
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	0800c854 	.word	0x0800c854

08005c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c34:	f7ff ffdc 	bl	8005bf0 <HAL_RCC_GetHCLKFreq>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	0b5b      	lsrs	r3, r3, #13
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	4903      	ldr	r1, [pc, #12]	; (8005c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c46:	5ccb      	ldrb	r3, [r1, r3]
 8005c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40023800 	.word	0x40023800
 8005c54:	0800c854 	.word	0x0800c854

08005c58 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d105      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d035      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c80:	4b62      	ldr	r3, [pc, #392]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c86:	f7fb ffed 	bl	8001c64 <HAL_GetTick>
 8005c8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c8e:	f7fb ffe9 	bl	8001c64 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e0b0      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ca0:	4b5b      	ldr	r3, [pc, #364]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f0      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	019a      	lsls	r2, r3, #6
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	071b      	lsls	r3, r3, #28
 8005cb8:	4955      	ldr	r1, [pc, #340]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005cc0:	4b52      	ldr	r3, [pc, #328]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cc6:	f7fb ffcd 	bl	8001c64 <HAL_GetTick>
 8005cca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cce:	f7fb ffc9 	bl	8001c64 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e090      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ce0:	4b4b      	ldr	r3, [pc, #300]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0f0      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8083 	beq.w	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	4b44      	ldr	r3, [pc, #272]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	4a43      	ldr	r2, [pc, #268]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d08:	6413      	str	r3, [r2, #64]	; 0x40
 8005d0a:	4b41      	ldr	r3, [pc, #260]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d16:	4b3f      	ldr	r3, [pc, #252]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a3e      	ldr	r2, [pc, #248]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d22:	f7fb ff9f 	bl	8001c64 <HAL_GetTick>
 8005d26:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d28:	e008      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d2a:	f7fb ff9b 	bl	8001c64 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e062      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d3c:	4b35      	ldr	r3, [pc, #212]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0f0      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d48:	4b31      	ldr	r3, [pc, #196]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d50:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d02f      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d028      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d66:	4b2a      	ldr	r3, [pc, #168]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d70:	4b29      	ldr	r3, [pc, #164]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d72:	2201      	movs	r2, #1
 8005d74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d76:	4b28      	ldr	r3, [pc, #160]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d7c:	4a24      	ldr	r2, [pc, #144]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d82:	4b23      	ldr	r3, [pc, #140]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d114      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d8e:	f7fb ff69 	bl	8001c64 <HAL_GetTick>
 8005d92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d94:	e00a      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d96:	f7fb ff65 	bl	8001c64 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d901      	bls.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e02a      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dac:	4b18      	ldr	r3, [pc, #96]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0ee      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc4:	d10d      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005dc6:	4b12      	ldr	r3, [pc, #72]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dda:	490d      	ldr	r1, [pc, #52]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	608b      	str	r3, [r1, #8]
 8005de0:	e005      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005de2:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	4a0a      	ldr	r2, [pc, #40]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005de8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005dec:	6093      	str	r3, [r2, #8]
 8005dee:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dfa:	4905      	ldr	r1, [pc, #20]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	42470068 	.word	0x42470068
 8005e10:	40023800 	.word	0x40023800
 8005e14:	40007000 	.word	0x40007000
 8005e18:	42470e40 	.word	0x42470e40

08005e1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d13e      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005e3a:	4b23      	ldr	r3, [pc, #140]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d005      	beq.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d12f      	bne.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e50:	4b1e      	ldr	r3, [pc, #120]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e52:	617b      	str	r3, [r7, #20]
          break;
 8005e54:	e02f      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e56:	4b1c      	ldr	r3, [pc, #112]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e62:	d108      	bne.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e64:	4b18      	ldr	r3, [pc, #96]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e6c:	4a18      	ldr	r2, [pc, #96]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e72:	613b      	str	r3, [r7, #16]
 8005e74:	e007      	b.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e76:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e7e:	4a15      	ldr	r2, [pc, #84]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e84:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005e86:	4b10      	ldr	r3, [pc, #64]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e8c:	099b      	lsrs	r3, r3, #6
 8005e8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	fb02 f303 	mul.w	r3, r2, r3
 8005e98:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ea0:	0f1b      	lsrs	r3, r3, #28
 8005ea2:	f003 0307 	and.w	r3, r3, #7
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eac:	617b      	str	r3, [r7, #20]
          break;
 8005eae:	e002      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	617b      	str	r3, [r7, #20]
          break;
 8005eb4:	bf00      	nop
        }
      }
      break;
 8005eb6:	bf00      	nop
    }
  }
  return frequency;
 8005eb8:	697b      	ldr	r3, [r7, #20]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	00bb8000 	.word	0x00bb8000
 8005ed0:	007a1200 	.word	0x007a1200
 8005ed4:	00f42400 	.word	0x00f42400

08005ed8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e07b      	b.n	8005fe2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d108      	bne.n	8005f04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005efa:	d009      	beq.n	8005f10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	61da      	str	r2, [r3, #28]
 8005f02:	e005      	b.n	8005f10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7fb fc38 	bl	80017a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	431a      	orrs	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f80:	431a      	orrs	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f94:	ea42 0103 	orr.w	r1, r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	0c1b      	lsrs	r3, r3, #16
 8005fae:	f003 0104 	and.w	r1, r3, #4
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	f003 0210 	and.w	r2, r3, #16
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69da      	ldr	r2, [r3, #28]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b082      	sub	sp, #8
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e03f      	b.n	800607c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d106      	bne.n	8006016 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7fb fc0d 	bl	8001830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2224      	movs	r2, #36	; 0x24
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800602c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f928 	bl	8006284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	691a      	ldr	r2, [r3, #16]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006042:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695a      	ldr	r2, [r3, #20]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006052:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006062:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08a      	sub	sp, #40	; 0x28
 8006088:	af02      	add	r7, sp, #8
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	4613      	mov	r3, r2
 8006092:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	d17c      	bne.n	800619e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <HAL_UART_Transmit+0x2c>
 80060aa:	88fb      	ldrh	r3, [r7, #6]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e075      	b.n	80061a0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d101      	bne.n	80060c2 <HAL_UART_Transmit+0x3e>
 80060be:	2302      	movs	r3, #2
 80060c0:	e06e      	b.n	80061a0 <HAL_UART_Transmit+0x11c>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2221      	movs	r2, #33	; 0x21
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060d8:	f7fb fdc4 	bl	8001c64 <HAL_GetTick>
 80060dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	88fa      	ldrh	r2, [r7, #6]
 80060e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	88fa      	ldrh	r2, [r7, #6]
 80060e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f2:	d108      	bne.n	8006106 <HAL_UART_Transmit+0x82>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d104      	bne.n	8006106 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	61bb      	str	r3, [r7, #24]
 8006104:	e003      	b.n	800610e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800610a:	2300      	movs	r3, #0
 800610c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006116:	e02a      	b.n	800616e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2200      	movs	r2, #0
 8006120:	2180      	movs	r1, #128	; 0x80
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 f840 	bl	80061a8 <UART_WaitOnFlagUntilTimeout>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e036      	b.n	80061a0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10b      	bne.n	8006150 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006146:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	3302      	adds	r3, #2
 800614c:	61bb      	str	r3, [r7, #24]
 800614e:	e007      	b.n	8006160 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	781a      	ldrb	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	3301      	adds	r3, #1
 800615e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006164:	b29b      	uxth	r3, r3
 8006166:	3b01      	subs	r3, #1
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006172:	b29b      	uxth	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1cf      	bne.n	8006118 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2200      	movs	r2, #0
 8006180:	2140      	movs	r1, #64	; 0x40
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 f810 	bl	80061a8 <UART_WaitOnFlagUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e006      	b.n	80061a0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	e000      	b.n	80061a0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800619e:	2302      	movs	r3, #2
  }
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3720      	adds	r7, #32
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b090      	sub	sp, #64	; 0x40
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	603b      	str	r3, [r7, #0]
 80061b4:	4613      	mov	r3, r2
 80061b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b8:	e050      	b.n	800625c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c0:	d04c      	beq.n	800625c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d007      	beq.n	80061d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80061c8:	f7fb fd4c 	bl	8001c64 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d241      	bcs.n	800625c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	330c      	adds	r3, #12
 80061de:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	e853 3f00 	ldrex	r3, [r3]
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	330c      	adds	r3, #12
 80061f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061f8:	637a      	str	r2, [r7, #52]	; 0x34
 80061fa:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006200:	e841 2300 	strex	r3, r2, [r1]
 8006204:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e5      	bne.n	80061d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3314      	adds	r3, #20
 8006212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	e853 3f00 	ldrex	r3, [r3]
 800621a:	613b      	str	r3, [r7, #16]
   return(result);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f023 0301 	bic.w	r3, r3, #1
 8006222:	63bb      	str	r3, [r7, #56]	; 0x38
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3314      	adds	r3, #20
 800622a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800622c:	623a      	str	r2, [r7, #32]
 800622e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	69f9      	ldr	r1, [r7, #28]
 8006232:	6a3a      	ldr	r2, [r7, #32]
 8006234:	e841 2300 	strex	r3, r2, [r1]
 8006238:	61bb      	str	r3, [r7, #24]
   return(result);
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e5      	bne.n	800620c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2220      	movs	r2, #32
 800624c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e00f      	b.n	800627c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	4013      	ands	r3, r2
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	429a      	cmp	r2, r3
 800626a:	bf0c      	ite	eq
 800626c:	2301      	moveq	r3, #1
 800626e:	2300      	movne	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	461a      	mov	r2, r3
 8006274:	79fb      	ldrb	r3, [r7, #7]
 8006276:	429a      	cmp	r2, r3
 8006278:	d09f      	beq.n	80061ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3740      	adds	r7, #64	; 0x40
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006288:	b0c0      	sub	sp, #256	; 0x100
 800628a:	af00      	add	r7, sp, #0
 800628c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800629c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a0:	68d9      	ldr	r1, [r3, #12]
 80062a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	ea40 0301 	orr.w	r3, r0, r1
 80062ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	431a      	orrs	r2, r3
 80062bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062dc:	f021 010c 	bic.w	r1, r1, #12
 80062e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062ea:	430b      	orrs	r3, r1
 80062ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fe:	6999      	ldr	r1, [r3, #24]
 8006300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	ea40 0301 	orr.w	r3, r0, r1
 800630a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4b8f      	ldr	r3, [pc, #572]	; (8006550 <UART_SetConfig+0x2cc>)
 8006314:	429a      	cmp	r2, r3
 8006316:	d005      	beq.n	8006324 <UART_SetConfig+0xa0>
 8006318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	4b8d      	ldr	r3, [pc, #564]	; (8006554 <UART_SetConfig+0x2d0>)
 8006320:	429a      	cmp	r2, r3
 8006322:	d104      	bne.n	800632e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006324:	f7ff fc84 	bl	8005c30 <HAL_RCC_GetPCLK2Freq>
 8006328:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800632c:	e003      	b.n	8006336 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800632e:	f7ff fc6b 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 8006332:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006340:	f040 810c 	bne.w	800655c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006348:	2200      	movs	r2, #0
 800634a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800634e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006352:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006356:	4622      	mov	r2, r4
 8006358:	462b      	mov	r3, r5
 800635a:	1891      	adds	r1, r2, r2
 800635c:	65b9      	str	r1, [r7, #88]	; 0x58
 800635e:	415b      	adcs	r3, r3
 8006360:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006362:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006366:	4621      	mov	r1, r4
 8006368:	eb12 0801 	adds.w	r8, r2, r1
 800636c:	4629      	mov	r1, r5
 800636e:	eb43 0901 	adc.w	r9, r3, r1
 8006372:	f04f 0200 	mov.w	r2, #0
 8006376:	f04f 0300 	mov.w	r3, #0
 800637a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800637e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006386:	4690      	mov	r8, r2
 8006388:	4699      	mov	r9, r3
 800638a:	4623      	mov	r3, r4
 800638c:	eb18 0303 	adds.w	r3, r8, r3
 8006390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006394:	462b      	mov	r3, r5
 8006396:	eb49 0303 	adc.w	r3, r9, r3
 800639a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800639e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063b2:	460b      	mov	r3, r1
 80063b4:	18db      	adds	r3, r3, r3
 80063b6:	653b      	str	r3, [r7, #80]	; 0x50
 80063b8:	4613      	mov	r3, r2
 80063ba:	eb42 0303 	adc.w	r3, r2, r3
 80063be:	657b      	str	r3, [r7, #84]	; 0x54
 80063c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063c8:	f7fa fb10 	bl	80009ec <__aeabi_uldivmod>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4b61      	ldr	r3, [pc, #388]	; (8006558 <UART_SetConfig+0x2d4>)
 80063d2:	fba3 2302 	umull	r2, r3, r3, r2
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	011c      	lsls	r4, r3, #4
 80063da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063de:	2200      	movs	r2, #0
 80063e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063ec:	4642      	mov	r2, r8
 80063ee:	464b      	mov	r3, r9
 80063f0:	1891      	adds	r1, r2, r2
 80063f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80063f4:	415b      	adcs	r3, r3
 80063f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063fc:	4641      	mov	r1, r8
 80063fe:	eb12 0a01 	adds.w	sl, r2, r1
 8006402:	4649      	mov	r1, r9
 8006404:	eb43 0b01 	adc.w	fp, r3, r1
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006414:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800641c:	4692      	mov	sl, r2
 800641e:	469b      	mov	fp, r3
 8006420:	4643      	mov	r3, r8
 8006422:	eb1a 0303 	adds.w	r3, sl, r3
 8006426:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800642a:	464b      	mov	r3, r9
 800642c:	eb4b 0303 	adc.w	r3, fp, r3
 8006430:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006440:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006444:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006448:	460b      	mov	r3, r1
 800644a:	18db      	adds	r3, r3, r3
 800644c:	643b      	str	r3, [r7, #64]	; 0x40
 800644e:	4613      	mov	r3, r2
 8006450:	eb42 0303 	adc.w	r3, r2, r3
 8006454:	647b      	str	r3, [r7, #68]	; 0x44
 8006456:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800645a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800645e:	f7fa fac5 	bl	80009ec <__aeabi_uldivmod>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4611      	mov	r1, r2
 8006468:	4b3b      	ldr	r3, [pc, #236]	; (8006558 <UART_SetConfig+0x2d4>)
 800646a:	fba3 2301 	umull	r2, r3, r3, r1
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	2264      	movs	r2, #100	; 0x64
 8006472:	fb02 f303 	mul.w	r3, r2, r3
 8006476:	1acb      	subs	r3, r1, r3
 8006478:	00db      	lsls	r3, r3, #3
 800647a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800647e:	4b36      	ldr	r3, [pc, #216]	; (8006558 <UART_SetConfig+0x2d4>)
 8006480:	fba3 2302 	umull	r2, r3, r3, r2
 8006484:	095b      	lsrs	r3, r3, #5
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800648c:	441c      	add	r4, r3
 800648e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006492:	2200      	movs	r2, #0
 8006494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006498:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800649c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064a0:	4642      	mov	r2, r8
 80064a2:	464b      	mov	r3, r9
 80064a4:	1891      	adds	r1, r2, r2
 80064a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80064a8:	415b      	adcs	r3, r3
 80064aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064b0:	4641      	mov	r1, r8
 80064b2:	1851      	adds	r1, r2, r1
 80064b4:	6339      	str	r1, [r7, #48]	; 0x30
 80064b6:	4649      	mov	r1, r9
 80064b8:	414b      	adcs	r3, r1
 80064ba:	637b      	str	r3, [r7, #52]	; 0x34
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	f04f 0300 	mov.w	r3, #0
 80064c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064c8:	4659      	mov	r1, fp
 80064ca:	00cb      	lsls	r3, r1, #3
 80064cc:	4651      	mov	r1, sl
 80064ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064d2:	4651      	mov	r1, sl
 80064d4:	00ca      	lsls	r2, r1, #3
 80064d6:	4610      	mov	r0, r2
 80064d8:	4619      	mov	r1, r3
 80064da:	4603      	mov	r3, r0
 80064dc:	4642      	mov	r2, r8
 80064de:	189b      	adds	r3, r3, r2
 80064e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064e4:	464b      	mov	r3, r9
 80064e6:	460a      	mov	r2, r1
 80064e8:	eb42 0303 	adc.w	r3, r2, r3
 80064ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006500:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006504:	460b      	mov	r3, r1
 8006506:	18db      	adds	r3, r3, r3
 8006508:	62bb      	str	r3, [r7, #40]	; 0x28
 800650a:	4613      	mov	r3, r2
 800650c:	eb42 0303 	adc.w	r3, r2, r3
 8006510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006516:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800651a:	f7fa fa67 	bl	80009ec <__aeabi_uldivmod>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4b0d      	ldr	r3, [pc, #52]	; (8006558 <UART_SetConfig+0x2d4>)
 8006524:	fba3 1302 	umull	r1, r3, r3, r2
 8006528:	095b      	lsrs	r3, r3, #5
 800652a:	2164      	movs	r1, #100	; 0x64
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	3332      	adds	r3, #50	; 0x32
 8006536:	4a08      	ldr	r2, [pc, #32]	; (8006558 <UART_SetConfig+0x2d4>)
 8006538:	fba2 2303 	umull	r2, r3, r2, r3
 800653c:	095b      	lsrs	r3, r3, #5
 800653e:	f003 0207 	and.w	r2, r3, #7
 8006542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4422      	add	r2, r4
 800654a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800654c:	e106      	b.n	800675c <UART_SetConfig+0x4d8>
 800654e:	bf00      	nop
 8006550:	40011000 	.word	0x40011000
 8006554:	40011400 	.word	0x40011400
 8006558:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800655c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006560:	2200      	movs	r2, #0
 8006562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006566:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800656a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800656e:	4642      	mov	r2, r8
 8006570:	464b      	mov	r3, r9
 8006572:	1891      	adds	r1, r2, r2
 8006574:	6239      	str	r1, [r7, #32]
 8006576:	415b      	adcs	r3, r3
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
 800657a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800657e:	4641      	mov	r1, r8
 8006580:	1854      	adds	r4, r2, r1
 8006582:	4649      	mov	r1, r9
 8006584:	eb43 0501 	adc.w	r5, r3, r1
 8006588:	f04f 0200 	mov.w	r2, #0
 800658c:	f04f 0300 	mov.w	r3, #0
 8006590:	00eb      	lsls	r3, r5, #3
 8006592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006596:	00e2      	lsls	r2, r4, #3
 8006598:	4614      	mov	r4, r2
 800659a:	461d      	mov	r5, r3
 800659c:	4643      	mov	r3, r8
 800659e:	18e3      	adds	r3, r4, r3
 80065a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065a4:	464b      	mov	r3, r9
 80065a6:	eb45 0303 	adc.w	r3, r5, r3
 80065aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065be:	f04f 0200 	mov.w	r2, #0
 80065c2:	f04f 0300 	mov.w	r3, #0
 80065c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065ca:	4629      	mov	r1, r5
 80065cc:	008b      	lsls	r3, r1, #2
 80065ce:	4621      	mov	r1, r4
 80065d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065d4:	4621      	mov	r1, r4
 80065d6:	008a      	lsls	r2, r1, #2
 80065d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065dc:	f7fa fa06 	bl	80009ec <__aeabi_uldivmod>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	4b60      	ldr	r3, [pc, #384]	; (8006768 <UART_SetConfig+0x4e4>)
 80065e6:	fba3 2302 	umull	r2, r3, r3, r2
 80065ea:	095b      	lsrs	r3, r3, #5
 80065ec:	011c      	lsls	r4, r3, #4
 80065ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006600:	4642      	mov	r2, r8
 8006602:	464b      	mov	r3, r9
 8006604:	1891      	adds	r1, r2, r2
 8006606:	61b9      	str	r1, [r7, #24]
 8006608:	415b      	adcs	r3, r3
 800660a:	61fb      	str	r3, [r7, #28]
 800660c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006610:	4641      	mov	r1, r8
 8006612:	1851      	adds	r1, r2, r1
 8006614:	6139      	str	r1, [r7, #16]
 8006616:	4649      	mov	r1, r9
 8006618:	414b      	adcs	r3, r1
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	f04f 0200 	mov.w	r2, #0
 8006620:	f04f 0300 	mov.w	r3, #0
 8006624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006628:	4659      	mov	r1, fp
 800662a:	00cb      	lsls	r3, r1, #3
 800662c:	4651      	mov	r1, sl
 800662e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006632:	4651      	mov	r1, sl
 8006634:	00ca      	lsls	r2, r1, #3
 8006636:	4610      	mov	r0, r2
 8006638:	4619      	mov	r1, r3
 800663a:	4603      	mov	r3, r0
 800663c:	4642      	mov	r2, r8
 800663e:	189b      	adds	r3, r3, r2
 8006640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006644:	464b      	mov	r3, r9
 8006646:	460a      	mov	r2, r1
 8006648:	eb42 0303 	adc.w	r3, r2, r3
 800664c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	67bb      	str	r3, [r7, #120]	; 0x78
 800665a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800665c:	f04f 0200 	mov.w	r2, #0
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006668:	4649      	mov	r1, r9
 800666a:	008b      	lsls	r3, r1, #2
 800666c:	4641      	mov	r1, r8
 800666e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006672:	4641      	mov	r1, r8
 8006674:	008a      	lsls	r2, r1, #2
 8006676:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800667a:	f7fa f9b7 	bl	80009ec <__aeabi_uldivmod>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	4611      	mov	r1, r2
 8006684:	4b38      	ldr	r3, [pc, #224]	; (8006768 <UART_SetConfig+0x4e4>)
 8006686:	fba3 2301 	umull	r2, r3, r3, r1
 800668a:	095b      	lsrs	r3, r3, #5
 800668c:	2264      	movs	r2, #100	; 0x64
 800668e:	fb02 f303 	mul.w	r3, r2, r3
 8006692:	1acb      	subs	r3, r1, r3
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	3332      	adds	r3, #50	; 0x32
 8006698:	4a33      	ldr	r2, [pc, #204]	; (8006768 <UART_SetConfig+0x4e4>)
 800669a:	fba2 2303 	umull	r2, r3, r2, r3
 800669e:	095b      	lsrs	r3, r3, #5
 80066a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066a4:	441c      	add	r4, r3
 80066a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066aa:	2200      	movs	r2, #0
 80066ac:	673b      	str	r3, [r7, #112]	; 0x70
 80066ae:	677a      	str	r2, [r7, #116]	; 0x74
 80066b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066b4:	4642      	mov	r2, r8
 80066b6:	464b      	mov	r3, r9
 80066b8:	1891      	adds	r1, r2, r2
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	415b      	adcs	r3, r3
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066c4:	4641      	mov	r1, r8
 80066c6:	1851      	adds	r1, r2, r1
 80066c8:	6039      	str	r1, [r7, #0]
 80066ca:	4649      	mov	r1, r9
 80066cc:	414b      	adcs	r3, r1
 80066ce:	607b      	str	r3, [r7, #4]
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066dc:	4659      	mov	r1, fp
 80066de:	00cb      	lsls	r3, r1, #3
 80066e0:	4651      	mov	r1, sl
 80066e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066e6:	4651      	mov	r1, sl
 80066e8:	00ca      	lsls	r2, r1, #3
 80066ea:	4610      	mov	r0, r2
 80066ec:	4619      	mov	r1, r3
 80066ee:	4603      	mov	r3, r0
 80066f0:	4642      	mov	r2, r8
 80066f2:	189b      	adds	r3, r3, r2
 80066f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80066f6:	464b      	mov	r3, r9
 80066f8:	460a      	mov	r2, r1
 80066fa:	eb42 0303 	adc.w	r3, r2, r3
 80066fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	663b      	str	r3, [r7, #96]	; 0x60
 800670a:	667a      	str	r2, [r7, #100]	; 0x64
 800670c:	f04f 0200 	mov.w	r2, #0
 8006710:	f04f 0300 	mov.w	r3, #0
 8006714:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006718:	4649      	mov	r1, r9
 800671a:	008b      	lsls	r3, r1, #2
 800671c:	4641      	mov	r1, r8
 800671e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006722:	4641      	mov	r1, r8
 8006724:	008a      	lsls	r2, r1, #2
 8006726:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800672a:	f7fa f95f 	bl	80009ec <__aeabi_uldivmod>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	4b0d      	ldr	r3, [pc, #52]	; (8006768 <UART_SetConfig+0x4e4>)
 8006734:	fba3 1302 	umull	r1, r3, r3, r2
 8006738:	095b      	lsrs	r3, r3, #5
 800673a:	2164      	movs	r1, #100	; 0x64
 800673c:	fb01 f303 	mul.w	r3, r1, r3
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	3332      	adds	r3, #50	; 0x32
 8006746:	4a08      	ldr	r2, [pc, #32]	; (8006768 <UART_SetConfig+0x4e4>)
 8006748:	fba2 2303 	umull	r2, r3, r2, r3
 800674c:	095b      	lsrs	r3, r3, #5
 800674e:	f003 020f 	and.w	r2, r3, #15
 8006752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4422      	add	r2, r4
 800675a:	609a      	str	r2, [r3, #8]
}
 800675c:	bf00      	nop
 800675e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006762:	46bd      	mov	sp, r7
 8006764:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006768:	51eb851f 	.word	0x51eb851f

0800676c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800676c:	b084      	sub	sp, #16
 800676e:	b580      	push	{r7, lr}
 8006770:	b084      	sub	sp, #16
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	f107 001c 	add.w	r0, r7, #28
 800677a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	2b01      	cmp	r3, #1
 8006782:	d122      	bne.n	80067ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006788:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d105      	bne.n	80067be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f9c0 	bl	8006b44 <USB_CoreReset>
 80067c4:	4603      	mov	r3, r0
 80067c6:	73fb      	strb	r3, [r7, #15]
 80067c8:	e01a      	b.n	8006800 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f9b4 	bl	8006b44 <USB_CoreReset>
 80067dc:	4603      	mov	r3, r0
 80067de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80067e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d106      	bne.n	80067f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	639a      	str	r2, [r3, #56]	; 0x38
 80067f2:	e005      	b.n	8006800 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	2b01      	cmp	r3, #1
 8006804:	d10b      	bne.n	800681e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f043 0206 	orr.w	r2, r3, #6
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f043 0220 	orr.w	r2, r3, #32
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800681e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800682a:	b004      	add	sp, #16
 800682c:	4770      	bx	lr

0800682e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f043 0201 	orr.w	r2, r3, #1
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f023 0201 	bic.w	r2, r3, #1
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	460b      	mov	r3, r1
 800687c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800688e:	78fb      	ldrb	r3, [r7, #3]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d115      	bne.n	80068c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068a0:	2001      	movs	r0, #1
 80068a2:	f7fb f9eb 	bl	8001c7c <HAL_Delay>
      ms++;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	3301      	adds	r3, #1
 80068aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f93a 	bl	8006b26 <USB_GetMode>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d01e      	beq.n	80068f6 <USB_SetCurrentMode+0x84>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b31      	cmp	r3, #49	; 0x31
 80068bc:	d9f0      	bls.n	80068a0 <USB_SetCurrentMode+0x2e>
 80068be:	e01a      	b.n	80068f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068c0:	78fb      	ldrb	r3, [r7, #3]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d115      	bne.n	80068f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068d2:	2001      	movs	r0, #1
 80068d4:	f7fb f9d2 	bl	8001c7c <HAL_Delay>
      ms++;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	3301      	adds	r3, #1
 80068dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f921 	bl	8006b26 <USB_GetMode>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <USB_SetCurrentMode+0x84>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b31      	cmp	r3, #49	; 0x31
 80068ee:	d9f0      	bls.n	80068d2 <USB_SetCurrentMode+0x60>
 80068f0:	e001      	b.n	80068f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e005      	b.n	8006902 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2b32      	cmp	r3, #50	; 0x32
 80068fa:	d101      	bne.n	8006900 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e000      	b.n	8006902 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
	...

0800690c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3301      	adds	r3, #1
 800691e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4a13      	ldr	r2, [pc, #76]	; (8006970 <USB_FlushTxFifo+0x64>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d901      	bls.n	800692c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e01b      	b.n	8006964 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	daf2      	bge.n	800691a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	019b      	lsls	r3, r3, #6
 800693c:	f043 0220 	orr.w	r2, r3, #32
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	3301      	adds	r3, #1
 8006948:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4a08      	ldr	r2, [pc, #32]	; (8006970 <USB_FlushTxFifo+0x64>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d901      	bls.n	8006956 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e006      	b.n	8006964 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b20      	cmp	r3, #32
 8006960:	d0f0      	beq.n	8006944 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	00030d40 	.word	0x00030d40

08006974 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3301      	adds	r3, #1
 8006984:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4a11      	ldr	r2, [pc, #68]	; (80069d0 <USB_FlushRxFifo+0x5c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d901      	bls.n	8006992 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e018      	b.n	80069c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	daf2      	bge.n	8006980 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2210      	movs	r2, #16
 80069a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	3301      	adds	r3, #1
 80069a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4a08      	ldr	r2, [pc, #32]	; (80069d0 <USB_FlushRxFifo+0x5c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d901      	bls.n	80069b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e006      	b.n	80069c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f003 0310 	and.w	r3, r3, #16
 80069be:	2b10      	cmp	r3, #16
 80069c0:	d0f0      	beq.n	80069a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3714      	adds	r7, #20
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	00030d40 	.word	0x00030d40

080069d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b089      	sub	sp, #36	; 0x24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	4611      	mov	r1, r2
 80069e0:	461a      	mov	r2, r3
 80069e2:	460b      	mov	r3, r1
 80069e4:	71fb      	strb	r3, [r7, #7]
 80069e6:	4613      	mov	r3, r2
 80069e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80069f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d123      	bne.n	8006a42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80069fa:	88bb      	ldrh	r3, [r7, #4]
 80069fc:	3303      	adds	r3, #3
 80069fe:	089b      	lsrs	r3, r3, #2
 8006a00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a02:	2300      	movs	r3, #0
 8006a04:	61bb      	str	r3, [r7, #24]
 8006a06:	e018      	b.n	8006a3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	031a      	lsls	r2, r3, #12
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a14:	461a      	mov	r2, r3
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	3301      	adds	r3, #1
 8006a26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	3301      	adds	r3, #1
 8006a32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	3301      	adds	r3, #1
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d3e2      	bcc.n	8006a08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3724      	adds	r7, #36	; 0x24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b08b      	sub	sp, #44	; 0x2c
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a66:	88fb      	ldrh	r3, [r7, #6]
 8006a68:	089b      	lsrs	r3, r3, #2
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a6e:	88fb      	ldrh	r3, [r7, #6]
 8006a70:	f003 0303 	and.w	r3, r3, #3
 8006a74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a76:	2300      	movs	r3, #0
 8006a78:	623b      	str	r3, [r7, #32]
 8006a7a:	e014      	b.n	8006aa6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	3301      	adds	r3, #1
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	3301      	adds	r3, #1
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	623b      	str	r3, [r7, #32]
 8006aa6:	6a3a      	ldr	r2, [r7, #32]
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d3e6      	bcc.n	8006a7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006aae:	8bfb      	ldrh	r3, [r7, #30]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d01e      	beq.n	8006af2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006abe:	461a      	mov	r2, r3
 8006ac0:	f107 0310 	add.w	r3, r7, #16
 8006ac4:	6812      	ldr	r2, [r2, #0]
 8006ac6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	701a      	strb	r2, [r3, #0]
      i++;
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	3301      	adds	r3, #1
 8006ade:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006ae6:	8bfb      	ldrh	r3, [r7, #30]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006aec:	8bfb      	ldrh	r3, [r7, #30]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1ea      	bne.n	8006ac8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	372c      	adds	r7, #44	; 0x2c
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4013      	ands	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b18:	68fb      	ldr	r3, [r7, #12]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	f003 0301 	and.w	r3, r3, #1
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
	...

08006b44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3301      	adds	r3, #1
 8006b54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	4a13      	ldr	r2, [pc, #76]	; (8006ba8 <USB_CoreReset+0x64>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d901      	bls.n	8006b62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e01b      	b.n	8006b9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	daf2      	bge.n	8006b50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	f043 0201 	orr.w	r2, r3, #1
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	4a09      	ldr	r2, [pc, #36]	; (8006ba8 <USB_CoreReset+0x64>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d901      	bls.n	8006b8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e006      	b.n	8006b9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d0f0      	beq.n	8006b7a <USB_CoreReset+0x36>

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	00030d40 	.word	0x00030d40

08006bac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bac:	b084      	sub	sp, #16
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b086      	sub	sp, #24
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006bba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bcc:	461a      	mov	r2, r3
 8006bce:	2300      	movs	r3, #0
 8006bd0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d018      	beq.n	8006c34 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d10a      	bne.n	8006c1e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c16:	f043 0304 	orr.w	r3, r3, #4
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	e014      	b.n	8006c48 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c2c:	f023 0304 	bic.w	r3, r3, #4
 8006c30:	6013      	str	r3, [r2, #0]
 8006c32:	e009      	b.n	8006c48 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c42:	f023 0304 	bic.w	r3, r3, #4
 8006c46:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c48:	2110      	movs	r1, #16
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7ff fe5e 	bl	800690c <USB_FlushTxFifo>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7ff fe8a 	bl	8006974 <USB_FlushRxFifo>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d001      	beq.n	8006c6a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	e015      	b.n	8006c9c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c82:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c90:	461a      	mov	r2, r3
 8006c92:	2300      	movs	r3, #0
 8006c94:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d3e5      	bcc.n	8006c70 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00b      	beq.n	8006cd6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cc4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a13      	ldr	r2, [pc, #76]	; (8006d18 <USB_HostInit+0x16c>)
 8006cca:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a13      	ldr	r2, [pc, #76]	; (8006d1c <USB_HostInit+0x170>)
 8006cd0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006cd4:	e009      	b.n	8006cea <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2280      	movs	r2, #128	; 0x80
 8006cda:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a10      	ldr	r2, [pc, #64]	; (8006d20 <USB_HostInit+0x174>)
 8006ce0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a0f      	ldr	r2, [pc, #60]	; (8006d24 <USB_HostInit+0x178>)
 8006ce6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d105      	bne.n	8006cfc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	f043 0210 	orr.w	r2, r3, #16
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	699a      	ldr	r2, [r3, #24]
 8006d00:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <USB_HostInit+0x17c>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d14:	b004      	add	sp, #16
 8006d16:	4770      	bx	lr
 8006d18:	01000200 	.word	0x01000200
 8006d1c:	00e00300 	.word	0x00e00300
 8006d20:	00600080 	.word	0x00600080
 8006d24:	004000e0 	.word	0x004000e0
 8006d28:	a3200008 	.word	0xa3200008

08006d2c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d4a:	f023 0303 	bic.w	r3, r3, #3
 8006d4e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	78fb      	ldrb	r3, [r7, #3]
 8006d5a:	f003 0303 	and.w	r3, r3, #3
 8006d5e:	68f9      	ldr	r1, [r7, #12]
 8006d60:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006d64:	4313      	orrs	r3, r2
 8006d66:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006d68:	78fb      	ldrb	r3, [r7, #3]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d107      	bne.n	8006d7e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d74:	461a      	mov	r2, r3
 8006d76:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006d7a:	6053      	str	r3, [r2, #4]
 8006d7c:	e009      	b.n	8006d92 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006d7e:	78fb      	ldrb	r3, [r7, #3]
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d106      	bne.n	8006d92 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006d90:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006dc0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dce:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006dd0:	2064      	movs	r0, #100	; 0x64
 8006dd2:	f7fa ff53 	bl	8001c7c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006dde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006de2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006de4:	200a      	movs	r0, #10
 8006de6:	f7fa ff49 	bl	8001c7c <HAL_Delay>

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006e18:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d109      	bne.n	8006e38 <USB_DriveVbus+0x44>
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d106      	bne.n	8006e38 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e36:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e42:	d109      	bne.n	8006e58 <USB_DriveVbus+0x64>
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d106      	bne.n	8006e58 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e56:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b085      	sub	sp, #20
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	0c5b      	lsrs	r3, r3, #17
 8006e84:	f003 0303 	and.w	r3, r3, #3
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	b29b      	uxth	r3, r3
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
	...

08006eb8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	4608      	mov	r0, r1
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	70fb      	strb	r3, [r7, #3]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	70bb      	strb	r3, [r7, #2]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006eda:	78fb      	ldrb	r3, [r7, #3]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8006eec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006eee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d87e      	bhi.n	8006ff4 <USB_HC_Init+0x13c>
 8006ef6:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <USB_HC_Init+0x44>)
 8006ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efc:	08006f0d 	.word	0x08006f0d
 8006f00:	08006fb7 	.word	0x08006fb7
 8006f04:	08006f0d 	.word	0x08006f0d
 8006f08:	08006f79 	.word	0x08006f79
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f0c:	78fb      	ldrb	r3, [r7, #3]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f18:	461a      	mov	r2, r3
 8006f1a:	f240 439d 	movw	r3, #1181	; 0x49d
 8006f1e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006f20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	da10      	bge.n	8006f4a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	78fa      	ldrb	r2, [r7, #3]
 8006f38:	0151      	lsls	r1, r2, #5
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	440a      	add	r2, r1
 8006f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f46:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006f48:	e057      	b.n	8006ffa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d051      	beq.n	8006ffa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006f56:	78fb      	ldrb	r3, [r7, #3]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	78fa      	ldrb	r2, [r7, #3]
 8006f66:	0151      	lsls	r1, r2, #5
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	440a      	add	r2, r1
 8006f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f70:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006f74:	60d3      	str	r3, [r2, #12]
      break;
 8006f76:	e040      	b.n	8006ffa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f78:	78fb      	ldrb	r3, [r7, #3]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f84:	461a      	mov	r2, r3
 8006f86:	f240 639d 	movw	r3, #1693	; 0x69d
 8006f8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006f8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	da34      	bge.n	8006ffe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006f94:	78fb      	ldrb	r3, [r7, #3]
 8006f96:	015a      	lsls	r2, r3, #5
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	78fa      	ldrb	r2, [r7, #3]
 8006fa4:	0151      	lsls	r1, r2, #5
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	440a      	add	r2, r1
 8006faa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fb2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006fb4:	e023      	b.n	8006ffe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006fb6:	78fb      	ldrb	r3, [r7, #3]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f240 2325 	movw	r3, #549	; 0x225
 8006fc8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006fca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	da17      	bge.n	8007002 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006fd2:	78fb      	ldrb	r3, [r7, #3]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	78fa      	ldrb	r2, [r7, #3]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006ff0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006ff2:	e006      	b.n	8007002 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	77fb      	strb	r3, [r7, #31]
      break;
 8006ff8:	e004      	b.n	8007004 <USB_HC_Init+0x14c>
      break;
 8006ffa:	bf00      	nop
 8006ffc:	e002      	b.n	8007004 <USB_HC_Init+0x14c>
      break;
 8006ffe:	bf00      	nop
 8007000:	e000      	b.n	8007004 <USB_HC_Init+0x14c>
      break;
 8007002:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	4413      	add	r3, r2
 800700c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	78fa      	ldrb	r2, [r7, #3]
 8007014:	0151      	lsls	r1, r2, #5
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	440a      	add	r2, r1
 800701a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800701e:	f043 0302 	orr.w	r3, r3, #2
 8007022:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800702a:	699a      	ldr	r2, [r3, #24]
 800702c:	78fb      	ldrb	r3, [r7, #3]
 800702e:	f003 030f 	and.w	r3, r3, #15
 8007032:	2101      	movs	r1, #1
 8007034:	fa01 f303 	lsl.w	r3, r1, r3
 8007038:	6939      	ldr	r1, [r7, #16]
 800703a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800703e:	4313      	orrs	r3, r2
 8007040:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800704e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007052:	2b00      	cmp	r3, #0
 8007054:	da03      	bge.n	800705e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800705a:	61bb      	str	r3, [r7, #24]
 800705c:	e001      	b.n	8007062 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800705e:	2300      	movs	r3, #0
 8007060:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff feff 	bl	8006e66 <USB_GetHostSpeed>
 8007068:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800706a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800706e:	2b02      	cmp	r3, #2
 8007070:	d106      	bne.n	8007080 <USB_HC_Init+0x1c8>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b02      	cmp	r3, #2
 8007076:	d003      	beq.n	8007080 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800707c:	617b      	str	r3, [r7, #20]
 800707e:	e001      	b.n	8007084 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007084:	787b      	ldrb	r3, [r7, #1]
 8007086:	059b      	lsls	r3, r3, #22
 8007088:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800708c:	78bb      	ldrb	r3, [r7, #2]
 800708e:	02db      	lsls	r3, r3, #11
 8007090:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007094:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007096:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800709a:	049b      	lsls	r3, r3, #18
 800709c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80070a0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80070a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80070a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80070a8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80070ae:	78fb      	ldrb	r3, [r7, #3]
 80070b0:	0159      	lsls	r1, r3, #5
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	440b      	add	r3, r1
 80070b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ba:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80070c0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80070c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d003      	beq.n	80070d2 <USB_HC_Init+0x21a>
 80070ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d10f      	bne.n	80070f2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80070d2:	78fb      	ldrb	r3, [r7, #3]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	78fa      	ldrb	r2, [r7, #3]
 80070e2:	0151      	lsls	r1, r2, #5
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	440a      	add	r2, r1
 80070e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070f0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80070f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3720      	adds	r7, #32
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08c      	sub	sp, #48	; 0x30
 8007100:	af02      	add	r7, sp, #8
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	4613      	mov	r3, r2
 8007108:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	785b      	ldrb	r3, [r3, #1]
 8007112:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007114:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007118:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007122:	2b00      	cmp	r3, #0
 8007124:	d02d      	beq.n	8007182 <USB_HC_StartXfer+0x86>
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	791b      	ldrb	r3, [r3, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d129      	bne.n	8007182 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d117      	bne.n	8007164 <USB_HC_StartXfer+0x68>
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	79db      	ldrb	r3, [r3, #7]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <USB_HC_StartXfer+0x48>
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	79db      	ldrb	r3, [r3, #7]
 8007140:	2b02      	cmp	r3, #2
 8007142:	d10f      	bne.n	8007164 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	4413      	add	r3, r2
 800714c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	0151      	lsls	r1, r2, #5
 8007156:	6a3a      	ldr	r2, [r7, #32]
 8007158:	440a      	add	r2, r1
 800715a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800715e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007162:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10b      	bne.n	8007182 <USB_HC_StartXfer+0x86>
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	795b      	ldrb	r3, [r3, #5]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d107      	bne.n	8007182 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	785b      	ldrb	r3, [r3, #1]
 8007176:	4619      	mov	r1, r3
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 fa0f 	bl	800759c <USB_DoPing>
      return HAL_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	e0f8      	b.n	8007374 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d018      	beq.n	80071bc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	8912      	ldrh	r2, [r2, #8]
 8007192:	4413      	add	r3, r2
 8007194:	3b01      	subs	r3, #1
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	8912      	ldrh	r2, [r2, #8]
 800719a:	fbb3 f3f2 	udiv	r3, r3, r2
 800719e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80071a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80071a2:	8b7b      	ldrh	r3, [r7, #26]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d90b      	bls.n	80071c0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80071a8:	8b7b      	ldrh	r3, [r7, #26]
 80071aa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80071ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	8912      	ldrh	r2, [r2, #8]
 80071b2:	fb03 f202 	mul.w	r2, r3, r2
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	611a      	str	r2, [r3, #16]
 80071ba:	e001      	b.n	80071c0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80071bc:	2301      	movs	r3, #1
 80071be:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	78db      	ldrb	r3, [r3, #3]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d007      	beq.n	80071d8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80071c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	8912      	ldrh	r2, [r2, #8]
 80071ce:	fb03 f202 	mul.w	r2, r3, r2
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	611a      	str	r2, [r3, #16]
 80071d6:	e003      	b.n	80071e0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	695a      	ldr	r2, [r3, #20]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80071e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80071ea:	04d9      	lsls	r1, r3, #19
 80071ec:	4b63      	ldr	r3, [pc, #396]	; (800737c <USB_HC_StartXfer+0x280>)
 80071ee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071f0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	7a9b      	ldrb	r3, [r3, #10]
 80071f6:	075b      	lsls	r3, r3, #29
 80071f8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071fc:	69f9      	ldr	r1, [r7, #28]
 80071fe:	0148      	lsls	r0, r1, #5
 8007200:	6a39      	ldr	r1, [r7, #32]
 8007202:	4401      	add	r1, r0
 8007204:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007208:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800720a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800720c:	79fb      	ldrb	r3, [r7, #7]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d009      	beq.n	8007226 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	68d9      	ldr	r1, [r3, #12]
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	4413      	add	r3, r2
 800721e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007222:	460a      	mov	r2, r1
 8007224:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	bf0c      	ite	eq
 8007236:	2301      	moveq	r3, #1
 8007238:	2300      	movne	r3, #0
 800723a:	b2db      	uxtb	r3, r3
 800723c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	4413      	add	r3, r2
 8007246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	69fa      	ldr	r2, [r7, #28]
 800724e:	0151      	lsls	r1, r2, #5
 8007250:	6a3a      	ldr	r2, [r7, #32]
 8007252:	440a      	add	r2, r1
 8007254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007258:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800725c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	4413      	add	r3, r2
 8007266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	7e7b      	ldrb	r3, [r7, #25]
 800726e:	075b      	lsls	r3, r3, #29
 8007270:	69f9      	ldr	r1, [r7, #28]
 8007272:	0148      	lsls	r0, r1, #5
 8007274:	6a39      	ldr	r1, [r7, #32]
 8007276:	4401      	add	r1, r0
 8007278:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800727c:	4313      	orrs	r3, r2
 800727e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	4413      	add	r3, r2
 8007288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007296:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	78db      	ldrb	r3, [r3, #3]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d004      	beq.n	80072aa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a6:	613b      	str	r3, [r7, #16]
 80072a8:	e003      	b.n	80072b2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072b0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072b8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072c6:	461a      	mov	r2, r3
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80072cc:	79fb      	ldrb	r3, [r7, #7]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	e04e      	b.n	8007374 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	78db      	ldrb	r3, [r3, #3]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d149      	bne.n	8007372 <USB_HC_StartXfer+0x276>
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d045      	beq.n	8007372 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	79db      	ldrb	r3, [r3, #7]
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d830      	bhi.n	8007350 <USB_HC_StartXfer+0x254>
 80072ee:	a201      	add	r2, pc, #4	; (adr r2, 80072f4 <USB_HC_StartXfer+0x1f8>)
 80072f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f4:	08007305 	.word	0x08007305
 80072f8:	08007329 	.word	0x08007329
 80072fc:	08007305 	.word	0x08007305
 8007300:	08007329 	.word	0x08007329
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	3303      	adds	r3, #3
 800730a:	089b      	lsrs	r3, r3, #2
 800730c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800730e:	8afa      	ldrh	r2, [r7, #22]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	b29b      	uxth	r3, r3
 8007316:	429a      	cmp	r2, r3
 8007318:	d91c      	bls.n	8007354 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	f043 0220 	orr.w	r2, r3, #32
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	619a      	str	r2, [r3, #24]
        }
        break;
 8007326:	e015      	b.n	8007354 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	3303      	adds	r3, #3
 800732e:	089b      	lsrs	r3, r3, #2
 8007330:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007332:	8afa      	ldrh	r2, [r7, #22]
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	b29b      	uxth	r3, r3
 800733e:	429a      	cmp	r2, r3
 8007340:	d90a      	bls.n	8007358 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	619a      	str	r2, [r3, #24]
        }
        break;
 800734e:	e003      	b.n	8007358 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007350:	bf00      	nop
 8007352:	e002      	b.n	800735a <USB_HC_StartXfer+0x25e>
        break;
 8007354:	bf00      	nop
 8007356:	e000      	b.n	800735a <USB_HC_StartXfer+0x25e>
        break;
 8007358:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	68d9      	ldr	r1, [r3, #12]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	785a      	ldrb	r2, [r3, #1]
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	b29b      	uxth	r3, r3
 8007368:	2000      	movs	r0, #0
 800736a:	9000      	str	r0, [sp, #0]
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f7ff fb31 	bl	80069d4 <USB_WritePacket>
  }

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3728      	adds	r7, #40	; 0x28
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	1ff80000 	.word	0x1ff80000

08007380 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	b29b      	uxth	r3, r3
}
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b089      	sub	sp, #36	; 0x24
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	460b      	mov	r3, r1
 80073ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80073b2:	78fb      	ldrb	r3, [r7, #3]
 80073b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	0c9b      	lsrs	r3, r3, #18
 80073ca:	f003 0303 	and.w	r3, r3, #3
 80073ce:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	0fdb      	lsrs	r3, r3, #31
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	d104      	bne.n	80073fc <USB_HC_Halt+0x5a>
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	e0c8      	b.n	800758e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <USB_HC_Halt+0x66>
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2b02      	cmp	r3, #2
 8007406:	d163      	bne.n	80074d0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	4413      	add	r3, r2
 8007410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	0151      	lsls	r1, r2, #5
 800741a:	69fa      	ldr	r2, [r7, #28]
 800741c:	440a      	add	r2, r1
 800741e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007422:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007426:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f003 0320 	and.w	r3, r3, #32
 8007430:	2b00      	cmp	r3, #0
 8007432:	f040 80ab 	bne.w	800758c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d133      	bne.n	80074aa <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	4413      	add	r3, r2
 800744a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	0151      	lsls	r1, r2, #5
 8007454:	69fa      	ldr	r2, [r7, #28]
 8007456:	440a      	add	r2, r1
 8007458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800745c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007460:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	4413      	add	r3, r2
 800746a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	0151      	lsls	r1, r2, #5
 8007474:	69fa      	ldr	r2, [r7, #28]
 8007476:	440a      	add	r2, r1
 8007478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800747c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007480:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3301      	adds	r3, #1
 8007486:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800748e:	d81d      	bhi.n	80074cc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	4413      	add	r3, r2
 8007498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074a6:	d0ec      	beq.n	8007482 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80074a8:	e070      	b.n	800758c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	0151      	lsls	r1, r2, #5
 80074bc:	69fa      	ldr	r2, [r7, #28]
 80074be:	440a      	add	r2, r1
 80074c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074c8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80074ca:	e05f      	b.n	800758c <USB_HC_Halt+0x1ea>
            break;
 80074cc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80074ce:	e05d      	b.n	800758c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69ba      	ldr	r2, [r7, #24]
 80074e0:	0151      	lsls	r1, r2, #5
 80074e2:	69fa      	ldr	r2, [r7, #28]
 80074e4:	440a      	add	r2, r1
 80074e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074ee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d133      	bne.n	8007568 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	4413      	add	r3, r2
 8007508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	0151      	lsls	r1, r2, #5
 8007512:	69fa      	ldr	r2, [r7, #28]
 8007514:	440a      	add	r2, r1
 8007516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800751a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800751e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	015a      	lsls	r2, r3, #5
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	4413      	add	r3, r2
 8007528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69ba      	ldr	r2, [r7, #24]
 8007530:	0151      	lsls	r1, r2, #5
 8007532:	69fa      	ldr	r2, [r7, #28]
 8007534:	440a      	add	r2, r1
 8007536:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800753a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800753e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3301      	adds	r3, #1
 8007544:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800754c:	d81d      	bhi.n	800758a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	4413      	add	r3, r2
 8007556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007564:	d0ec      	beq.n	8007540 <USB_HC_Halt+0x19e>
 8007566:	e011      	b.n	800758c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	4413      	add	r3, r2
 8007570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	0151      	lsls	r1, r2, #5
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	440a      	add	r2, r1
 800757e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007582:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	e000      	b.n	800758c <USB_HC_Halt+0x1ea>
          break;
 800758a:	bf00      	nop
    }
  }

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3724      	adds	r7, #36	; 0x24
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
	...

0800759c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80075ac:	78fb      	ldrb	r3, [r7, #3]
 80075ae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80075b0:	2301      	movs	r3, #1
 80075b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	04da      	lsls	r2, r3, #19
 80075b8:	4b15      	ldr	r3, [pc, #84]	; (8007610 <USB_DoPing+0x74>)
 80075ba:	4013      	ands	r3, r2
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	0151      	lsls	r1, r2, #5
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	440a      	add	r2, r1
 80075c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075cc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075e4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075ec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075fa:	461a      	mov	r2, r3
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	371c      	adds	r7, #28
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	1ff80000 	.word	0x1ff80000

08007614 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007624:	2300      	movs	r3, #0
 8007626:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7ff f911 	bl	8006850 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800762e:	2110      	movs	r1, #16
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7ff f96b 	bl	800690c <USB_FlushTxFifo>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7ff f997 	bl	8006974 <USB_FlushRxFifo>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007650:	2300      	movs	r3, #0
 8007652:	61bb      	str	r3, [r7, #24]
 8007654:	e01f      	b.n	8007696 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	4413      	add	r3, r2
 800765e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800766c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007674:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800767c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	4413      	add	r3, r2
 8007686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800768a:	461a      	mov	r2, r3
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	3301      	adds	r3, #1
 8007694:	61bb      	str	r3, [r7, #24]
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	2b0f      	cmp	r3, #15
 800769a:	d9dc      	bls.n	8007656 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800769c:	2300      	movs	r3, #0
 800769e:	61bb      	str	r3, [r7, #24]
 80076a0:	e034      	b.n	800770c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076b8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d6:	461a      	mov	r2, r3
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3301      	adds	r3, #1
 80076e0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076e8:	d80c      	bhi.n	8007704 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007700:	d0ec      	beq.n	80076dc <USB_StopHost+0xc8>
 8007702:	e000      	b.n	8007706 <USB_StopHost+0xf2>
        break;
 8007704:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	3301      	adds	r3, #1
 800770a:	61bb      	str	r3, [r7, #24]
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	2b0f      	cmp	r3, #15
 8007710:	d9c7      	bls.n	80076a2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007718:	461a      	mov	r2, r3
 800771a:	f04f 33ff 	mov.w	r3, #4294967295
 800771e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f04f 32ff 	mov.w	r2, #4294967295
 8007726:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7ff f880 	bl	800682e <USB_EnableGlobalInt>

  return ret;
 800772e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3720      	adds	r7, #32
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007738:	b590      	push	{r4, r7, lr}
 800773a:	b089      	sub	sp, #36	; 0x24
 800773c:	af04      	add	r7, sp, #16
 800773e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007740:	2301      	movs	r3, #1
 8007742:	2202      	movs	r2, #2
 8007744:	2102      	movs	r1, #2
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fc66 	bl	8008018 <USBH_FindInterface>
 800774c:	4603      	mov	r3, r0
 800774e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	2bff      	cmp	r3, #255	; 0xff
 8007754:	d002      	beq.n	800775c <USBH_CDC_InterfaceInit+0x24>
 8007756:	7bfb      	ldrb	r3, [r7, #15]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d901      	bls.n	8007760 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800775c:	2302      	movs	r3, #2
 800775e:	e13d      	b.n	80079dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007760:	7bfb      	ldrb	r3, [r7, #15]
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fc3b 	bl	8007fe0 <USBH_SelectInterface>
 800776a:	4603      	mov	r3, r0
 800776c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800776e:	7bbb      	ldrb	r3, [r7, #14]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007774:	2302      	movs	r3, #2
 8007776:	e131      	b.n	80079dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800777e:	2050      	movs	r0, #80	; 0x50
 8007780:	f003 fea4 	bl	800b4cc <malloc>
 8007784:	4603      	mov	r3, r0
 8007786:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007798:	2302      	movs	r3, #2
 800779a:	e11f      	b.n	80079dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800779c:	2250      	movs	r2, #80	; 0x50
 800779e:	2100      	movs	r1, #0
 80077a0:	68b8      	ldr	r0, [r7, #8]
 80077a2:	f004 f945 	bl	800ba30 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	211a      	movs	r1, #26
 80077ac:	fb01 f303 	mul.w	r3, r1, r3
 80077b0:	4413      	add	r3, r2
 80077b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	b25b      	sxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	da15      	bge.n	80077ea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80077be:	7bfb      	ldrb	r3, [r7, #15]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	211a      	movs	r1, #26
 80077c4:	fb01 f303 	mul.w	r3, r1, r3
 80077c8:	4413      	add	r3, r2
 80077ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80077ce:	781a      	ldrb	r2, [r3, #0]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	211a      	movs	r1, #26
 80077da:	fb01 f303 	mul.w	r3, r1, r3
 80077de:	4413      	add	r3, r2
 80077e0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80077e4:	881a      	ldrh	r2, [r3, #0]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	785b      	ldrb	r3, [r3, #1]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 ff2e 	bl	8009652 <USBH_AllocPipe>
 80077f6:	4603      	mov	r3, r0
 80077f8:	461a      	mov	r2, r3
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	7819      	ldrb	r1, [r3, #0]
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	7858      	ldrb	r0, [r3, #1]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	8952      	ldrh	r2, [r2, #10]
 8007816:	9202      	str	r2, [sp, #8]
 8007818:	2203      	movs	r2, #3
 800781a:	9201      	str	r2, [sp, #4]
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	4623      	mov	r3, r4
 8007820:	4602      	mov	r2, r0
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f001 fee6 	bl	80095f4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2200      	movs	r2, #0
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f002 f9f5 	bl	8009c20 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007836:	2300      	movs	r3, #0
 8007838:	2200      	movs	r2, #0
 800783a:	210a      	movs	r1, #10
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fbeb 	bl	8008018 <USBH_FindInterface>
 8007842:	4603      	mov	r3, r0
 8007844:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	2bff      	cmp	r3, #255	; 0xff
 800784a:	d002      	beq.n	8007852 <USBH_CDC_InterfaceInit+0x11a>
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d901      	bls.n	8007856 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007852:	2302      	movs	r3, #2
 8007854:	e0c2      	b.n	80079dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	211a      	movs	r1, #26
 800785c:	fb01 f303 	mul.w	r3, r1, r3
 8007860:	4413      	add	r3, r2
 8007862:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	b25b      	sxtb	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	da16      	bge.n	800789c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800786e:	7bfb      	ldrb	r3, [r7, #15]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	211a      	movs	r1, #26
 8007874:	fb01 f303 	mul.w	r3, r1, r3
 8007878:	4413      	add	r3, r2
 800787a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800787e:	781a      	ldrb	r2, [r3, #0]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	211a      	movs	r1, #26
 800788a:	fb01 f303 	mul.w	r3, r1, r3
 800788e:	4413      	add	r3, r2
 8007890:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007894:	881a      	ldrh	r2, [r3, #0]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	835a      	strh	r2, [r3, #26]
 800789a:	e015      	b.n	80078c8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	211a      	movs	r1, #26
 80078a2:	fb01 f303 	mul.w	r3, r1, r3
 80078a6:	4413      	add	r3, r2
 80078a8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80078ac:	781a      	ldrb	r2, [r3, #0]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	211a      	movs	r1, #26
 80078b8:	fb01 f303 	mul.w	r3, r1, r3
 80078bc:	4413      	add	r3, r2
 80078be:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80078c2:	881a      	ldrh	r2, [r3, #0]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	211a      	movs	r1, #26
 80078ce:	fb01 f303 	mul.w	r3, r1, r3
 80078d2:	4413      	add	r3, r2
 80078d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	b25b      	sxtb	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	da16      	bge.n	800790e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	211a      	movs	r1, #26
 80078e6:	fb01 f303 	mul.w	r3, r1, r3
 80078ea:	4413      	add	r3, r2
 80078ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 80078f0:	781a      	ldrb	r2, [r3, #0]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	211a      	movs	r1, #26
 80078fc:	fb01 f303 	mul.w	r3, r1, r3
 8007900:	4413      	add	r3, r2
 8007902:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007906:	881a      	ldrh	r2, [r3, #0]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	835a      	strh	r2, [r3, #26]
 800790c:	e015      	b.n	800793a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800790e:	7bfb      	ldrb	r3, [r7, #15]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	211a      	movs	r1, #26
 8007914:	fb01 f303 	mul.w	r3, r1, r3
 8007918:	4413      	add	r3, r2
 800791a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	211a      	movs	r1, #26
 800792a:	fb01 f303 	mul.w	r3, r1, r3
 800792e:	4413      	add	r3, r2
 8007930:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007934:	881a      	ldrh	r2, [r3, #0]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	7b9b      	ldrb	r3, [r3, #14]
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f001 fe86 	bl	8009652 <USBH_AllocPipe>
 8007946:	4603      	mov	r3, r0
 8007948:	461a      	mov	r2, r3
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	7bdb      	ldrb	r3, [r3, #15]
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 fe7c 	bl	8009652 <USBH_AllocPipe>
 800795a:	4603      	mov	r3, r0
 800795c:	461a      	mov	r2, r3
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	7b59      	ldrb	r1, [r3, #13]
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	7b98      	ldrb	r0, [r3, #14]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	8b12      	ldrh	r2, [r2, #24]
 800797a:	9202      	str	r2, [sp, #8]
 800797c:	2202      	movs	r2, #2
 800797e:	9201      	str	r2, [sp, #4]
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	4623      	mov	r3, r4
 8007984:	4602      	mov	r2, r0
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f001 fe34 	bl	80095f4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	7b19      	ldrb	r1, [r3, #12]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	7bd8      	ldrb	r0, [r3, #15]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	8b52      	ldrh	r2, [r2, #26]
 80079a4:	9202      	str	r2, [sp, #8]
 80079a6:	2202      	movs	r2, #2
 80079a8:	9201      	str	r2, [sp, #4]
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	4623      	mov	r3, r4
 80079ae:	4602      	mov	r2, r0
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 fe1f 	bl	80095f4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	7b5b      	ldrb	r3, [r3, #13]
 80079c2:	2200      	movs	r2, #0
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f002 f92a 	bl	8009c20 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	7b1b      	ldrb	r3, [r3, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f002 f923 	bl	8009c20 <USBH_LL_SetToggle>

  return USBH_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd90      	pop	{r4, r7, pc}

080079e4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079f2:	69db      	ldr	r3, [r3, #28]
 80079f4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00e      	beq.n	8007a1c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 fe14 	bl	8009632 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f001 fe3f 	bl	8009694 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	7b1b      	ldrb	r3, [r3, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00e      	beq.n	8007a42 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	7b1b      	ldrb	r3, [r3, #12]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 fe01 	bl	8009632 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	7b1b      	ldrb	r3, [r3, #12]
 8007a34:	4619      	mov	r1, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f001 fe2c 	bl	8009694 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	7b5b      	ldrb	r3, [r3, #13]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00e      	beq.n	8007a68 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	7b5b      	ldrb	r3, [r3, #13]
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f001 fdee 	bl	8009632 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	7b5b      	ldrb	r3, [r3, #13]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 fe19 	bl	8009694 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a6e:	69db      	ldr	r3, [r3, #28]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00b      	beq.n	8007a8c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f003 fd2d 	bl	800b4dc <free>
    phost->pActiveClass->pData = 0U;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a88:	2200      	movs	r2, #0
 8007a8a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b084      	sub	sp, #16
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3340      	adds	r3, #64	; 0x40
 8007aac:	4619      	mov	r1, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f8b1 	bl	8007c16 <GetLineCoding>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007ab8:	7afb      	ldrb	r3, [r7, #11]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d105      	bne.n	8007aca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ac4:	2102      	movs	r1, #2
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007aca:	7afb      	ldrb	r3, [r7, #11]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007adc:	2301      	movs	r3, #1
 8007ade:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	d877      	bhi.n	8007be8 <USBH_CDC_Process+0x114>
 8007af8:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <USBH_CDC_Process+0x2c>)
 8007afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afe:	bf00      	nop
 8007b00:	08007b15 	.word	0x08007b15
 8007b04:	08007b1b 	.word	0x08007b1b
 8007b08:	08007b4b 	.word	0x08007b4b
 8007b0c:	08007bbf 	.word	0x08007bbf
 8007b10:	08007bcd 	.word	0x08007bcd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007b14:	2300      	movs	r3, #0
 8007b16:	73fb      	strb	r3, [r7, #15]
      break;
 8007b18:	e06d      	b.n	8007bf6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f897 	bl	8007c54 <SetLineCoding>
 8007b26:	4603      	mov	r3, r0
 8007b28:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d104      	bne.n	8007b3a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007b38:	e058      	b.n	8007bec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d055      	beq.n	8007bec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2204      	movs	r2, #4
 8007b44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007b48:	e050      	b.n	8007bec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	3340      	adds	r3, #64	; 0x40
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f860 	bl	8007c16 <GetLineCoding>
 8007b56:	4603      	mov	r3, r0
 8007b58:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d126      	bne.n	8007bae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b72:	791b      	ldrb	r3, [r3, #4]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d13b      	bne.n	8007bf0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b82:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d133      	bne.n	8007bf0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b92:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d12b      	bne.n	8007bf0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ba0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d124      	bne.n	8007bf0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f958 	bl	8007e5c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007bac:	e020      	b.n	8007bf0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d01d      	beq.n	8007bf0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2204      	movs	r2, #4
 8007bb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007bbc:	e018      	b.n	8007bf0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f867 	bl	8007c92 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f8da 	bl	8007d7e <CDC_ProcessReception>
      break;
 8007bca:	e014      	b.n	8007bf6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007bcc:	2100      	movs	r1, #0
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 ffef 	bl	8008bb2 <USBH_ClrFeature>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10a      	bne.n	8007bf4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007be6:	e005      	b.n	8007bf4 <USBH_CDC_Process+0x120>

    default:
      break;
 8007be8:	bf00      	nop
 8007bea:	e004      	b.n	8007bf6 <USBH_CDC_Process+0x122>
      break;
 8007bec:	bf00      	nop
 8007bee:	e002      	b.n	8007bf6 <USBH_CDC_Process+0x122>
      break;
 8007bf0:	bf00      	nop
 8007bf2:	e000      	b.n	8007bf6 <USBH_CDC_Process+0x122>
      break;
 8007bf4:	bf00      	nop

  }

  return status;
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b082      	sub	sp, #8
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	22a1      	movs	r2, #161	; 0xa1
 8007c24:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2221      	movs	r2, #33	; 0x21
 8007c2a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2207      	movs	r2, #7
 8007c3c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2207      	movs	r2, #7
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f001 fa83 	bl	8009150 <USBH_CtlReq>
 8007c4a:	4603      	mov	r3, r0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2221      	movs	r2, #33	; 0x21
 8007c62:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2220      	movs	r2, #32
 8007c68:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2207      	movs	r2, #7
 8007c7a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2207      	movs	r2, #7
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 fa64 	bl	8009150 <USBH_CtlReq>
 8007c88:	4603      	mov	r3, r0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b086      	sub	sp, #24
 8007c96:	af02      	add	r7, sp, #8
 8007c98:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d002      	beq.n	8007cb8 <CDC_ProcessTransmission+0x26>
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d023      	beq.n	8007cfe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007cb6:	e05e      	b.n	8007d76 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	8b12      	ldrh	r2, [r2, #24]
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d90b      	bls.n	8007cdc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	69d9      	ldr	r1, [r3, #28]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	8b1a      	ldrh	r2, [r3, #24]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	7b5b      	ldrb	r3, [r3, #13]
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	9000      	str	r0, [sp, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 fc4a 	bl	800956e <USBH_BulkSendData>
 8007cda:	e00b      	b.n	8007cf4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	7b5b      	ldrb	r3, [r3, #13]
 8007cea:	2001      	movs	r0, #1
 8007cec:	9000      	str	r0, [sp, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f001 fc3d 	bl	800956e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007cfc:	e03b      	b.n	8007d76 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	7b5b      	ldrb	r3, [r3, #13]
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f001 ff61 	bl	8009bcc <USBH_LL_GetURBState>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007d0e:	7afb      	ldrb	r3, [r7, #11]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d128      	bne.n	8007d66 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	8b12      	ldrh	r2, [r2, #24]
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d90e      	bls.n	8007d3e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	8b12      	ldrh	r2, [r2, #24]
 8007d28:	1a9a      	subs	r2, r3, r2
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	8b12      	ldrh	r2, [r2, #24]
 8007d36:	441a      	add	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	61da      	str	r2, [r3, #28]
 8007d3c:	e002      	b.n	8007d44 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d004      	beq.n	8007d56 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007d54:	e00e      	b.n	8007d74 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f868 	bl	8007e34 <USBH_CDC_TransmitCallback>
      break;
 8007d64:	e006      	b.n	8007d74 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007d66:	7afb      	ldrb	r3, [r7, #11]
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d103      	bne.n	8007d74 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007d74:	bf00      	nop
  }
}
 8007d76:	bf00      	nop
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b086      	sub	sp, #24
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d90:	2300      	movs	r3, #0
 8007d92:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007d9a:	2b03      	cmp	r3, #3
 8007d9c:	d002      	beq.n	8007da4 <CDC_ProcessReception+0x26>
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	d00e      	beq.n	8007dc0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007da2:	e043      	b.n	8007e2c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	6a19      	ldr	r1, [r3, #32]
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	8b5a      	ldrh	r2, [r3, #26]
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	7b1b      	ldrb	r3, [r3, #12]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f001 fc01 	bl	80095b8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2204      	movs	r2, #4
 8007dba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007dbe:	e035      	b.n	8007e2c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	7b1b      	ldrb	r3, [r3, #12]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f001 ff00 	bl	8009bcc <USBH_LL_GetURBState>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007dd0:	7cfb      	ldrb	r3, [r7, #19]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d129      	bne.n	8007e2a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	7b1b      	ldrb	r3, [r3, #12]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f001 fe63 	bl	8009aa8 <USBH_LL_GetLastXferSize>
 8007de2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d016      	beq.n	8007e1c <CDC_ProcessReception+0x9e>
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	8b5b      	ldrh	r3, [r3, #26]
 8007df2:	461a      	mov	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d910      	bls.n	8007e1c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	1ad2      	subs	r2, r2, r3
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	6a1a      	ldr	r2, [r3, #32]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	441a      	add	r2, r3
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	2203      	movs	r2, #3
 8007e16:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007e1a:	e006      	b.n	8007e2a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f80f 	bl	8007e48 <USBH_CDC_ReceiveCallback>
      break;
 8007e2a:	bf00      	nop
  }
}
 8007e2c:	bf00      	nop
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d101      	bne.n	8007e88 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007e84:	2302      	movs	r3, #2
 8007e86:	e029      	b.n	8007edc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	79fa      	ldrb	r2, [r7, #7]
 8007e8c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 f81f 	bl	8007ee4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f001 fd33 	bl	8009940 <USBH_LL_Init>

  return USBH_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	e009      	b.n	8007f0a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	33e0      	adds	r3, #224	; 0xe0
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	2200      	movs	r2, #0
 8007f02:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3301      	adds	r3, #1
 8007f08:	60fb      	str	r3, [r7, #12]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2b0f      	cmp	r3, #15
 8007f0e:	d9f2      	bls.n	8007ef6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007f10:	2300      	movs	r3, #0
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	e009      	b.n	8007f2a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f20:	2200      	movs	r2, #0
 8007f22:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	3301      	adds	r3, #1
 8007f28:	60fb      	str	r3, [r7, #12]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f30:	d3f1      	bcc.n	8007f16 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2240      	movs	r2, #64	; 0x40
 8007f56:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d016      	beq.n	8007fce <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10e      	bne.n	8007fc8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007fb0:	1c59      	adds	r1, r3, #1
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	33de      	adds	r3, #222	; 0xde
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	73fb      	strb	r3, [r7, #15]
 8007fc6:	e004      	b.n	8007fd2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007fc8:	2302      	movs	r3, #2
 8007fca:	73fb      	strb	r3, [r7, #15]
 8007fcc:	e001      	b.n	8007fd2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007fce:	2302      	movs	r3, #2
 8007fd0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007ff6:	78fa      	ldrb	r2, [r7, #3]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d204      	bcs.n	8008006 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	78fa      	ldrb	r2, [r7, #3]
 8008000:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008004:	e001      	b.n	800800a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008006:	2302      	movs	r3, #2
 8008008:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800800a:	7bfb      	ldrb	r3, [r7, #15]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	4608      	mov	r0, r1
 8008022:	4611      	mov	r1, r2
 8008024:	461a      	mov	r2, r3
 8008026:	4603      	mov	r3, r0
 8008028:	70fb      	strb	r3, [r7, #3]
 800802a:	460b      	mov	r3, r1
 800802c:	70bb      	strb	r3, [r7, #2]
 800802e:	4613      	mov	r3, r2
 8008030:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008036:	2300      	movs	r3, #0
 8008038:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008040:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008042:	e025      	b.n	8008090 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008044:	7dfb      	ldrb	r3, [r7, #23]
 8008046:	221a      	movs	r2, #26
 8008048:	fb02 f303 	mul.w	r3, r2, r3
 800804c:	3308      	adds	r3, #8
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	4413      	add	r3, r2
 8008052:	3302      	adds	r3, #2
 8008054:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	795b      	ldrb	r3, [r3, #5]
 800805a:	78fa      	ldrb	r2, [r7, #3]
 800805c:	429a      	cmp	r2, r3
 800805e:	d002      	beq.n	8008066 <USBH_FindInterface+0x4e>
 8008060:	78fb      	ldrb	r3, [r7, #3]
 8008062:	2bff      	cmp	r3, #255	; 0xff
 8008064:	d111      	bne.n	800808a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800806a:	78ba      	ldrb	r2, [r7, #2]
 800806c:	429a      	cmp	r2, r3
 800806e:	d002      	beq.n	8008076 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008070:	78bb      	ldrb	r3, [r7, #2]
 8008072:	2bff      	cmp	r3, #255	; 0xff
 8008074:	d109      	bne.n	800808a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800807a:	787a      	ldrb	r2, [r7, #1]
 800807c:	429a      	cmp	r2, r3
 800807e:	d002      	beq.n	8008086 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008080:	787b      	ldrb	r3, [r7, #1]
 8008082:	2bff      	cmp	r3, #255	; 0xff
 8008084:	d101      	bne.n	800808a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	e006      	b.n	8008098 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800808a:	7dfb      	ldrb	r3, [r7, #23]
 800808c:	3301      	adds	r3, #1
 800808e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d9d6      	bls.n	8008044 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008096:	23ff      	movs	r3, #255	; 0xff
}
 8008098:	4618      	mov	r0, r3
 800809a:	371c      	adds	r7, #28
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f001 fc83 	bl	80099b8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80080b2:	2101      	movs	r1, #1
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f001 fd9c 	bl	8009bf2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af04      	add	r7, sp, #16
 80080ca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80080cc:	2302      	movs	r3, #2
 80080ce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80080d0:	2300      	movs	r3, #0
 80080d2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d102      	bne.n	80080e6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2203      	movs	r2, #3
 80080e4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b0b      	cmp	r3, #11
 80080ee:	f200 81be 	bhi.w	800846e <USBH_Process+0x3aa>
 80080f2:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <USBH_Process+0x34>)
 80080f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f8:	08008129 	.word	0x08008129
 80080fc:	0800815b 	.word	0x0800815b
 8008100:	080081c3 	.word	0x080081c3
 8008104:	08008409 	.word	0x08008409
 8008108:	0800846f 	.word	0x0800846f
 800810c:	08008267 	.word	0x08008267
 8008110:	080083af 	.word	0x080083af
 8008114:	0800829d 	.word	0x0800829d
 8008118:	080082bd 	.word	0x080082bd
 800811c:	080082dd 	.word	0x080082dd
 8008120:	08008321 	.word	0x08008321
 8008124:	080083f1 	.word	0x080083f1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 819e 	beq.w	8008472 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800813c:	20c8      	movs	r0, #200	; 0xc8
 800813e:	f001 fd9f 	bl	8009c80 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f001 fc95 	bl	8009a72 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008158:	e18b      	b.n	8008472 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008160:	2b01      	cmp	r3, #1
 8008162:	d107      	bne.n	8008174 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2202      	movs	r2, #2
 8008170:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008172:	e18d      	b.n	8008490 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800817a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800817e:	d914      	bls.n	80081aa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008186:	3301      	adds	r3, #1
 8008188:	b2da      	uxtb	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008196:	2b03      	cmp	r3, #3
 8008198:	d903      	bls.n	80081a2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	220d      	movs	r2, #13
 800819e:	701a      	strb	r2, [r3, #0]
      break;
 80081a0:	e176      	b.n	8008490 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	701a      	strb	r2, [r3, #0]
      break;
 80081a8:	e172      	b.n	8008490 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80081b0:	f103 020a 	add.w	r2, r3, #10
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80081ba:	200a      	movs	r0, #10
 80081bc:	f001 fd60 	bl	8009c80 <USBH_Delay>
      break;
 80081c0:	e166      	b.n	8008490 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d005      	beq.n	80081d8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081d2:	2104      	movs	r1, #4
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80081d8:	2064      	movs	r0, #100	; 0x64
 80081da:	f001 fd51 	bl	8009c80 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f001 fc20 	bl	8009a24 <USBH_LL_GetSpeed>
 80081e4:	4603      	mov	r3, r0
 80081e6:	461a      	mov	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2205      	movs	r2, #5
 80081f2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80081f4:	2100      	movs	r1, #0
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f001 fa2b 	bl	8009652 <USBH_AllocPipe>
 80081fc:	4603      	mov	r3, r0
 80081fe:	461a      	mov	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008204:	2180      	movs	r1, #128	; 0x80
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f001 fa23 	bl	8009652 <USBH_AllocPipe>
 800820c:	4603      	mov	r3, r0
 800820e:	461a      	mov	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	7919      	ldrb	r1, [r3, #4]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008228:	b292      	uxth	r2, r2
 800822a:	9202      	str	r2, [sp, #8]
 800822c:	2200      	movs	r2, #0
 800822e:	9201      	str	r2, [sp, #4]
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	4603      	mov	r3, r0
 8008234:	2280      	movs	r2, #128	; 0x80
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f001 f9dc 	bl	80095f4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	7959      	ldrb	r1, [r3, #5]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008250:	b292      	uxth	r2, r2
 8008252:	9202      	str	r2, [sp, #8]
 8008254:	2200      	movs	r2, #0
 8008256:	9201      	str	r2, [sp, #4]
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	4603      	mov	r3, r0
 800825c:	2200      	movs	r2, #0
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f001 f9c8 	bl	80095f4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008264:	e114      	b.n	8008490 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f918 	bl	800849c <USBH_HandleEnum>
 800826c:	4603      	mov	r3, r0
 800826e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b00      	cmp	r3, #0
 8008276:	f040 80fe 	bne.w	8008476 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008288:	2b01      	cmp	r3, #1
 800828a:	d103      	bne.n	8008294 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2208      	movs	r2, #8
 8008290:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008292:	e0f0      	b.n	8008476 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2207      	movs	r2, #7
 8008298:	701a      	strb	r2, [r3, #0]
      break;
 800829a:	e0ec      	b.n	8008476 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 80e9 	beq.w	800847a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082ae:	2101      	movs	r1, #1
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2208      	movs	r2, #8
 80082b8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80082ba:	e0de      	b.n	800847a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	4619      	mov	r1, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fc2c 	bl	8008b24 <USBH_SetCfg>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f040 80d5 	bne.w	800847e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2209      	movs	r2, #9
 80082d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082da:	e0d0      	b.n	800847e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80082e2:	f003 0320 	and.w	r3, r3, #32
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d016      	beq.n	8008318 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80082ea:	2101      	movs	r1, #1
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fc3c 	bl	8008b6a <USBH_SetFeature>
 80082f2:	4603      	mov	r3, r0
 80082f4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80082f6:	7bbb      	ldrb	r3, [r7, #14]
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d103      	bne.n	8008306 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	220a      	movs	r2, #10
 8008302:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008304:	e0bd      	b.n	8008482 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8008306:	7bbb      	ldrb	r3, [r7, #14]
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b03      	cmp	r3, #3
 800830c:	f040 80b9 	bne.w	8008482 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	220a      	movs	r2, #10
 8008314:	701a      	strb	r2, [r3, #0]
      break;
 8008316:	e0b4      	b.n	8008482 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	220a      	movs	r2, #10
 800831c:	701a      	strb	r2, [r3, #0]
      break;
 800831e:	e0b0      	b.n	8008482 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008326:	2b00      	cmp	r3, #0
 8008328:	f000 80ad 	beq.w	8008486 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008334:	2300      	movs	r3, #0
 8008336:	73fb      	strb	r3, [r7, #15]
 8008338:	e016      	b.n	8008368 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800833a:	7bfa      	ldrb	r2, [r7, #15]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	32de      	adds	r2, #222	; 0xde
 8008340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008344:	791a      	ldrb	r2, [r3, #4]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800834c:	429a      	cmp	r2, r3
 800834e:	d108      	bne.n	8008362 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008350:	7bfa      	ldrb	r2, [r7, #15]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	32de      	adds	r2, #222	; 0xde
 8008356:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008360:	e005      	b.n	800836e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	3301      	adds	r3, #1
 8008366:	73fb      	strb	r3, [r7, #15]
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0e5      	beq.n	800833a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008374:	2b00      	cmp	r3, #0
 8008376:	d016      	beq.n	80083a6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	4798      	blx	r3
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d109      	bne.n	800839e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2206      	movs	r2, #6
 800838e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008396:	2103      	movs	r1, #3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800839c:	e073      	b.n	8008486 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	220d      	movs	r2, #13
 80083a2:	701a      	strb	r2, [r3, #0]
      break;
 80083a4:	e06f      	b.n	8008486 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	220d      	movs	r2, #13
 80083aa:	701a      	strb	r2, [r3, #0]
      break;
 80083ac:	e06b      	b.n	8008486 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d017      	beq.n	80083e8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	4798      	blx	r3
 80083c4:	4603      	mov	r3, r0
 80083c6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d103      	bne.n	80083d8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	220b      	movs	r2, #11
 80083d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80083d6:	e058      	b.n	800848a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d154      	bne.n	800848a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	220d      	movs	r2, #13
 80083e4:	701a      	strb	r2, [r3, #0]
      break;
 80083e6:	e050      	b.n	800848a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	220d      	movs	r2, #13
 80083ec:	701a      	strb	r2, [r3, #0]
      break;
 80083ee:	e04c      	b.n	800848a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d049      	beq.n	800848e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	4798      	blx	r3
      }
      break;
 8008406:	e042      	b.n	800848e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f7ff fd67 	bl	8007ee4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800841c:	2b00      	cmp	r3, #0
 800841e:	d009      	beq.n	8008434 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800843a:	2b00      	cmp	r3, #0
 800843c:	d005      	beq.n	800844a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008444:	2105      	movs	r1, #5
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b01      	cmp	r3, #1
 8008454:	d107      	bne.n	8008466 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7ff fe20 	bl	80080a4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008464:	e014      	b.n	8008490 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 faa6 	bl	80099b8 <USBH_LL_Start>
      break;
 800846c:	e010      	b.n	8008490 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800846e:	bf00      	nop
 8008470:	e00e      	b.n	8008490 <USBH_Process+0x3cc>
      break;
 8008472:	bf00      	nop
 8008474:	e00c      	b.n	8008490 <USBH_Process+0x3cc>
      break;
 8008476:	bf00      	nop
 8008478:	e00a      	b.n	8008490 <USBH_Process+0x3cc>
    break;
 800847a:	bf00      	nop
 800847c:	e008      	b.n	8008490 <USBH_Process+0x3cc>
      break;
 800847e:	bf00      	nop
 8008480:	e006      	b.n	8008490 <USBH_Process+0x3cc>
      break;
 8008482:	bf00      	nop
 8008484:	e004      	b.n	8008490 <USBH_Process+0x3cc>
      break;
 8008486:	bf00      	nop
 8008488:	e002      	b.n	8008490 <USBH_Process+0x3cc>
      break;
 800848a:	bf00      	nop
 800848c:	e000      	b.n	8008490 <USBH_Process+0x3cc>
      break;
 800848e:	bf00      	nop
  }
  return USBH_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop

0800849c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b088      	sub	sp, #32
 80084a0:	af04      	add	r7, sp, #16
 80084a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80084a4:	2301      	movs	r3, #1
 80084a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80084a8:	2301      	movs	r3, #1
 80084aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	785b      	ldrb	r3, [r3, #1]
 80084b0:	2b07      	cmp	r3, #7
 80084b2:	f200 81c1 	bhi.w	8008838 <USBH_HandleEnum+0x39c>
 80084b6:	a201      	add	r2, pc, #4	; (adr r2, 80084bc <USBH_HandleEnum+0x20>)
 80084b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084bc:	080084dd 	.word	0x080084dd
 80084c0:	0800859b 	.word	0x0800859b
 80084c4:	08008605 	.word	0x08008605
 80084c8:	08008693 	.word	0x08008693
 80084cc:	080086fd 	.word	0x080086fd
 80084d0:	0800876d 	.word	0x0800876d
 80084d4:	080087b3 	.word	0x080087b3
 80084d8:	080087f9 	.word	0x080087f9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80084dc:	2108      	movs	r1, #8
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fa50 	bl	8008984 <USBH_Get_DevDesc>
 80084e4:	4603      	mov	r3, r0
 80084e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d130      	bne.n	8008550 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	7919      	ldrb	r1, [r3, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008512:	b292      	uxth	r2, r2
 8008514:	9202      	str	r2, [sp, #8]
 8008516:	2200      	movs	r2, #0
 8008518:	9201      	str	r2, [sp, #4]
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	4603      	mov	r3, r0
 800851e:	2280      	movs	r2, #128	; 0x80
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f001 f867 	bl	80095f4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	7959      	ldrb	r1, [r3, #5]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800853a:	b292      	uxth	r2, r2
 800853c:	9202      	str	r2, [sp, #8]
 800853e:	2200      	movs	r2, #0
 8008540:	9201      	str	r2, [sp, #4]
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	4603      	mov	r3, r0
 8008546:	2200      	movs	r2, #0
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 f853 	bl	80095f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800854e:	e175      	b.n	800883c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008550:	7bbb      	ldrb	r3, [r7, #14]
 8008552:	2b03      	cmp	r3, #3
 8008554:	f040 8172 	bne.w	800883c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800855e:	3301      	adds	r3, #1
 8008560:	b2da      	uxtb	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800856e:	2b03      	cmp	r3, #3
 8008570:	d903      	bls.n	800857a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	220d      	movs	r2, #13
 8008576:	701a      	strb	r2, [r3, #0]
      break;
 8008578:	e160      	b.n	800883c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	795b      	ldrb	r3, [r3, #5]
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f001 f887 	bl	8009694 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	791b      	ldrb	r3, [r3, #4]
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f001 f881 	bl	8009694 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	701a      	strb	r2, [r3, #0]
      break;
 8008598:	e150      	b.n	800883c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800859a:	2112      	movs	r1, #18
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f9f1 	bl	8008984 <USBH_Get_DevDesc>
 80085a2:	4603      	mov	r3, r0
 80085a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d103      	bne.n	80085b4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80085b2:	e145      	b.n	8008840 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	f040 8142 	bne.w	8008840 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085c2:	3301      	adds	r3, #1
 80085c4:	b2da      	uxtb	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	d903      	bls.n	80085de <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	220d      	movs	r2, #13
 80085da:	701a      	strb	r2, [r3, #0]
      break;
 80085dc:	e130      	b.n	8008840 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	795b      	ldrb	r3, [r3, #5]
 80085e2:	4619      	mov	r1, r3
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 f855 	bl	8009694 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	791b      	ldrb	r3, [r3, #4]
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 f84f 	bl	8009694 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	701a      	strb	r2, [r3, #0]
      break;
 8008602:	e11d      	b.n	8008840 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008604:	2101      	movs	r1, #1
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fa68 	bl	8008adc <USBH_SetAddress>
 800860c:	4603      	mov	r3, r0
 800860e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008610:	7bbb      	ldrb	r3, [r7, #14]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d132      	bne.n	800867c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008616:	2002      	movs	r0, #2
 8008618:	f001 fb32 	bl	8009c80 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2203      	movs	r2, #3
 8008628:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	7919      	ldrb	r1, [r3, #4]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800863e:	b292      	uxth	r2, r2
 8008640:	9202      	str	r2, [sp, #8]
 8008642:	2200      	movs	r2, #0
 8008644:	9201      	str	r2, [sp, #4]
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	4603      	mov	r3, r0
 800864a:	2280      	movs	r2, #128	; 0x80
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 ffd1 	bl	80095f4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	7959      	ldrb	r1, [r3, #5]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008666:	b292      	uxth	r2, r2
 8008668:	9202      	str	r2, [sp, #8]
 800866a:	2200      	movs	r2, #0
 800866c:	9201      	str	r2, [sp, #4]
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	4603      	mov	r3, r0
 8008672:	2200      	movs	r2, #0
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 ffbd 	bl	80095f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800867a:	e0e3      	b.n	8008844 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800867c:	7bbb      	ldrb	r3, [r7, #14]
 800867e:	2b03      	cmp	r3, #3
 8008680:	f040 80e0 	bne.w	8008844 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	220d      	movs	r2, #13
 8008688:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	705a      	strb	r2, [r3, #1]
      break;
 8008690:	e0d8      	b.n	8008844 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008692:	2109      	movs	r1, #9
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f99d 	bl	80089d4 <USBH_Get_CfgDesc>
 800869a:	4603      	mov	r3, r0
 800869c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d103      	bne.n	80086ac <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2204      	movs	r2, #4
 80086a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80086aa:	e0cd      	b.n	8008848 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086ac:	7bbb      	ldrb	r3, [r7, #14]
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	f040 80ca 	bne.w	8008848 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086ba:	3301      	adds	r3, #1
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086ca:	2b03      	cmp	r3, #3
 80086cc:	d903      	bls.n	80086d6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	220d      	movs	r2, #13
 80086d2:	701a      	strb	r2, [r3, #0]
      break;
 80086d4:	e0b8      	b.n	8008848 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	795b      	ldrb	r3, [r3, #5]
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 ffd9 	bl	8009694 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	791b      	ldrb	r3, [r3, #4]
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 ffd3 	bl	8009694 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	701a      	strb	r2, [r3, #0]
      break;
 80086fa:	e0a5      	b.n	8008848 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f965 	bl	80089d4 <USBH_Get_CfgDesc>
 800870a:	4603      	mov	r3, r0
 800870c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d103      	bne.n	800871c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2205      	movs	r2, #5
 8008718:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800871a:	e097      	b.n	800884c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	2b03      	cmp	r3, #3
 8008720:	f040 8094 	bne.w	800884c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800872a:	3301      	adds	r3, #1
 800872c:	b2da      	uxtb	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800873a:	2b03      	cmp	r3, #3
 800873c:	d903      	bls.n	8008746 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	220d      	movs	r2, #13
 8008742:	701a      	strb	r2, [r3, #0]
      break;
 8008744:	e082      	b.n	800884c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	795b      	ldrb	r3, [r3, #5]
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 ffa1 	bl	8009694 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	791b      	ldrb	r3, [r3, #4]
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 ff9b 	bl	8009694 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	701a      	strb	r2, [r3, #0]
      break;
 800876a:	e06f      	b.n	800884c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008772:	2b00      	cmp	r3, #0
 8008774:	d019      	beq.n	80087aa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008782:	23ff      	movs	r3, #255	; 0xff
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f949 	bl	8008a1c <USBH_Get_StringDesc>
 800878a:	4603      	mov	r3, r0
 800878c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800878e:	7bbb      	ldrb	r3, [r7, #14]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d103      	bne.n	800879c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2206      	movs	r2, #6
 8008798:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800879a:	e059      	b.n	8008850 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d156      	bne.n	8008850 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2206      	movs	r2, #6
 80087a6:	705a      	strb	r2, [r3, #1]
      break;
 80087a8:	e052      	b.n	8008850 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2206      	movs	r2, #6
 80087ae:	705a      	strb	r2, [r3, #1]
      break;
 80087b0:	e04e      	b.n	8008850 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d019      	beq.n	80087f0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80087c8:	23ff      	movs	r3, #255	; 0xff
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f926 	bl	8008a1c <USBH_Get_StringDesc>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d103      	bne.n	80087e2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2207      	movs	r2, #7
 80087de:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80087e0:	e038      	b.n	8008854 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d135      	bne.n	8008854 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2207      	movs	r2, #7
 80087ec:	705a      	strb	r2, [r3, #1]
      break;
 80087ee:	e031      	b.n	8008854 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2207      	movs	r2, #7
 80087f4:	705a      	strb	r2, [r3, #1]
      break;
 80087f6:	e02d      	b.n	8008854 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d017      	beq.n	8008832 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800880e:	23ff      	movs	r3, #255	; 0xff
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f903 	bl	8008a1c <USBH_Get_StringDesc>
 8008816:	4603      	mov	r3, r0
 8008818:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800881a:	7bbb      	ldrb	r3, [r7, #14]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d102      	bne.n	8008826 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008824:	e018      	b.n	8008858 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	2b03      	cmp	r3, #3
 800882a:	d115      	bne.n	8008858 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800882c:	2300      	movs	r3, #0
 800882e:	73fb      	strb	r3, [r7, #15]
      break;
 8008830:	e012      	b.n	8008858 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	73fb      	strb	r3, [r7, #15]
      break;
 8008836:	e00f      	b.n	8008858 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008838:	bf00      	nop
 800883a:	e00e      	b.n	800885a <USBH_HandleEnum+0x3be>
      break;
 800883c:	bf00      	nop
 800883e:	e00c      	b.n	800885a <USBH_HandleEnum+0x3be>
      break;
 8008840:	bf00      	nop
 8008842:	e00a      	b.n	800885a <USBH_HandleEnum+0x3be>
      break;
 8008844:	bf00      	nop
 8008846:	e008      	b.n	800885a <USBH_HandleEnum+0x3be>
      break;
 8008848:	bf00      	nop
 800884a:	e006      	b.n	800885a <USBH_HandleEnum+0x3be>
      break;
 800884c:	bf00      	nop
 800884e:	e004      	b.n	800885a <USBH_HandleEnum+0x3be>
      break;
 8008850:	bf00      	nop
 8008852:	e002      	b.n	800885a <USBH_HandleEnum+0x3be>
      break;
 8008854:	bf00      	nop
 8008856:	e000      	b.n	800885a <USBH_HandleEnum+0x3be>
      break;
 8008858:	bf00      	nop
  }
  return Status;
 800885a:	7bfb      	ldrb	r3, [r7, #15]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008876:	bf00      	nop
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008890:	1c5a      	adds	r2, r3, #1
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f804 	bl	80088a6 <USBH_HandleSof>
}
 800889e:	bf00      	nop
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b0b      	cmp	r3, #11
 80088b6:	d10a      	bne.n	80088ce <USBH_HandleSof+0x28>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d005      	beq.n	80088ce <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	4798      	blx	r3
  }
}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80088e6:	bf00      	nop
}
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008902:	bf00      	nop
}
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 f846 	bl	80099ee <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	791b      	ldrb	r3, [r3, #4]
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fe93 	bl	8009694 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	795b      	ldrb	r3, [r3, #5]
 8008972:	4619      	mov	r1, r3
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fe8d 	bl	8009694 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af02      	add	r7, sp, #8
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008996:	78fb      	ldrb	r3, [r7, #3]
 8008998:	b29b      	uxth	r3, r3
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	4613      	mov	r3, r2
 800899e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089a2:	2100      	movs	r1, #0
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f864 	bl	8008a72 <USBH_GetDescriptor>
 80089aa:	4603      	mov	r3, r0
 80089ac:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10a      	bne.n	80089ca <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80089c0:	78fa      	ldrb	r2, [r7, #3]
 80089c2:	b292      	uxth	r2, r2
 80089c4:	4619      	mov	r1, r3
 80089c6:	f000 f919 	bl	8008bfc <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af02      	add	r7, sp, #8
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	460b      	mov	r3, r1
 80089de:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	331c      	adds	r3, #28
 80089e4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80089e6:	887b      	ldrh	r3, [r7, #2]
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089f0:	2100      	movs	r1, #0
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f83d 	bl	8008a72 <USBH_GetDescriptor>
 80089f8:	4603      	mov	r3, r0
 80089fa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d107      	bne.n	8008a12 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008a02:	887b      	ldrh	r3, [r7, #2]
 8008a04:	461a      	mov	r2, r3
 8008a06:	68b9      	ldr	r1, [r7, #8]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f989 	bl	8008d20 <USBH_ParseCfgDesc>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b088      	sub	sp, #32
 8008a20:	af02      	add	r7, sp, #8
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	607a      	str	r2, [r7, #4]
 8008a26:	461a      	mov	r2, r3
 8008a28:	460b      	mov	r3, r1
 8008a2a:	72fb      	strb	r3, [r7, #11]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008a38:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008a40:	893b      	ldrh	r3, [r7, #8]
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	460b      	mov	r3, r1
 8008a46:	2100      	movs	r1, #0
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f000 f812 	bl	8008a72 <USBH_GetDescriptor>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d107      	bne.n	8008a68 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008a5e:	893a      	ldrh	r2, [r7, #8]
 8008a60:	6879      	ldr	r1, [r7, #4]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 fb26 	bl	80090b4 <USBH_ParseStringDesc>
  }

  return status;
 8008a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	60f8      	str	r0, [r7, #12]
 8008a7a:	607b      	str	r3, [r7, #4]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	72fb      	strb	r3, [r7, #11]
 8008a80:	4613      	mov	r3, r2
 8008a82:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	789b      	ldrb	r3, [r3, #2]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d11c      	bne.n	8008ac6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008a8c:	7afb      	ldrb	r3, [r7, #11]
 8008a8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2206      	movs	r2, #6
 8008a9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	893a      	ldrh	r2, [r7, #8]
 8008aa2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008aa4:	893b      	ldrh	r3, [r7, #8]
 8008aa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008aaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008aae:	d104      	bne.n	8008aba <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f240 4209 	movw	r2, #1033	; 0x409
 8008ab6:	829a      	strh	r2, [r3, #20]
 8008ab8:	e002      	b.n	8008ac0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	8b3a      	ldrh	r2, [r7, #24]
 8008ac4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008ac6:	8b3b      	ldrh	r3, [r7, #24]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	6879      	ldr	r1, [r7, #4]
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 fb3f 	bl	8009150 <USBH_CtlReq>
 8008ad2:	4603      	mov	r3, r0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	789b      	ldrb	r3, [r3, #2]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d10f      	bne.n	8008b10 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2205      	movs	r2, #5
 8008afa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008afc:	78fb      	ldrb	r3, [r7, #3]
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b10:	2200      	movs	r2, #0
 8008b12:	2100      	movs	r1, #0
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fb1b 	bl	8009150 <USBH_CtlReq>
 8008b1a:	4603      	mov	r3, r0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	789b      	ldrb	r3, [r3, #2]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d10e      	bne.n	8008b56 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2209      	movs	r2, #9
 8008b42:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	887a      	ldrh	r2, [r7, #2]
 8008b48:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b56:	2200      	movs	r2, #0
 8008b58:	2100      	movs	r1, #0
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 faf8 	bl	8009150 <USBH_CtlReq>
 8008b60:	4603      	mov	r3, r0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b082      	sub	sp, #8
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	460b      	mov	r3, r1
 8008b74:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	789b      	ldrb	r3, [r3, #2]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d10f      	bne.n	8008b9e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2203      	movs	r2, #3
 8008b88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008b8a:	78fb      	ldrb	r3, [r7, #3]
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fad4 	bl	8009150 <USBH_CtlReq>
 8008ba8:	4603      	mov	r3, r0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b082      	sub	sp, #8
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	460b      	mov	r3, r1
 8008bbc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	789b      	ldrb	r3, [r3, #2]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d10f      	bne.n	8008be6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2202      	movs	r2, #2
 8008bca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008bd8:	78fb      	ldrb	r3, [r7, #3]
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008be6:	2200      	movs	r2, #0
 8008be8:	2100      	movs	r1, #0
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fab0 	bl	8009150 <USBH_CtlReq>
 8008bf0:	4603      	mov	r3, r0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
	...

08008bfc <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	4613      	mov	r3, r2
 8008c08:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	781a      	ldrb	r2, [r3, #0]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	785a      	ldrb	r2, [r3, #1]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	3302      	adds	r3, #2
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	3303      	adds	r3, #3
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	021b      	lsls	r3, r3, #8
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	791a      	ldrb	r2, [r3, #4]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	795a      	ldrb	r2, [r3, #5]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	799a      	ldrb	r2, [r3, #6]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	79da      	ldrb	r2, [r3, #7]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	79db      	ldrb	r3, [r3, #7]
 8008c5a:	2b20      	cmp	r3, #32
 8008c5c:	dc0f      	bgt.n	8008c7e <USBH_ParseDevDesc+0x82>
 8008c5e:	2b08      	cmp	r3, #8
 8008c60:	db14      	blt.n	8008c8c <USBH_ParseDevDesc+0x90>
 8008c62:	3b08      	subs	r3, #8
 8008c64:	4a2d      	ldr	r2, [pc, #180]	; (8008d1c <USBH_ParseDevDesc+0x120>)
 8008c66:	fa22 f303 	lsr.w	r3, r2, r3
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	bf14      	ite	ne
 8008c72:	2301      	movne	r3, #1
 8008c74:	2300      	moveq	r3, #0
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d102      	bne.n	8008c82 <USBH_ParseDevDesc+0x86>
 8008c7c:	e006      	b.n	8008c8c <USBH_ParseDevDesc+0x90>
 8008c7e:	2b40      	cmp	r3, #64	; 0x40
 8008c80:	d104      	bne.n	8008c8c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	79da      	ldrb	r2, [r3, #7]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	71da      	strb	r2, [r3, #7]
      break;
 8008c8a:	e003      	b.n	8008c94 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2240      	movs	r2, #64	; 0x40
 8008c90:	71da      	strb	r2, [r3, #7]
      break;
 8008c92:	bf00      	nop
  }

  if (length > 8U)
 8008c94:	88fb      	ldrh	r3, [r7, #6]
 8008c96:	2b08      	cmp	r3, #8
 8008c98:	d939      	bls.n	8008d0e <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	3309      	adds	r3, #9
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	021b      	lsls	r3, r3, #8
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	330a      	adds	r3, #10
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	330b      	adds	r3, #11
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	021b      	lsls	r3, r3, #8
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	330c      	adds	r3, #12
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	330d      	adds	r3, #13
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	021b      	lsls	r3, r3, #8
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	7b9a      	ldrb	r2, [r3, #14]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	7bda      	ldrb	r2, [r3, #15]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	7c1a      	ldrb	r2, [r3, #16]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	7c5a      	ldrb	r2, [r3, #17]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	745a      	strb	r2, [r3, #17]
  }
}
 8008d0e:	bf00      	nop
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	01000101 	.word	0x01000101

08008d20 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b08c      	sub	sp, #48	; 0x30
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008d34:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008d40:	2300      	movs	r3, #0
 8008d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	781a      	ldrb	r2, [r3, #0]
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	785a      	ldrb	r2, [r3, #1]
 8008d5c:	6a3b      	ldr	r3, [r7, #32]
 8008d5e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	3302      	adds	r3, #2
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	3303      	adds	r3, #3
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	021b      	lsls	r3, r3, #8
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	4313      	orrs	r3, r2
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d7c:	bf28      	it	cs
 8008d7e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	6a3b      	ldr	r3, [r7, #32]
 8008d86:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	791a      	ldrb	r2, [r3, #4]
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	795a      	ldrb	r2, [r3, #5]
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	799a      	ldrb	r2, [r3, #6]
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	79da      	ldrb	r2, [r3, #7]
 8008da4:	6a3b      	ldr	r3, [r7, #32]
 8008da6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	7a1a      	ldrb	r2, [r3, #8]
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008db0:	6a3b      	ldr	r3, [r7, #32]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	2b09      	cmp	r3, #9
 8008db6:	d002      	beq.n	8008dbe <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008db8:	6a3b      	ldr	r3, [r7, #32]
 8008dba:	2209      	movs	r2, #9
 8008dbc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008dbe:	88fb      	ldrh	r3, [r7, #6]
 8008dc0:	2b09      	cmp	r3, #9
 8008dc2:	f240 809d 	bls.w	8008f00 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008dc6:	2309      	movs	r3, #9
 8008dc8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008dce:	e081      	b.n	8008ed4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008dd0:	f107 0316 	add.w	r3, r7, #22
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dd8:	f000 f99f 	bl	800911a <USBH_GetNextDesc>
 8008ddc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de0:	785b      	ldrb	r3, [r3, #1]
 8008de2:	2b04      	cmp	r3, #4
 8008de4:	d176      	bne.n	8008ed4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	2b09      	cmp	r3, #9
 8008dec:	d002      	beq.n	8008df4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	2209      	movs	r2, #9
 8008df2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008df8:	221a      	movs	r2, #26
 8008dfa:	fb02 f303 	mul.w	r3, r2, r3
 8008dfe:	3308      	adds	r3, #8
 8008e00:	6a3a      	ldr	r2, [r7, #32]
 8008e02:	4413      	add	r3, r2
 8008e04:	3302      	adds	r3, #2
 8008e06:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e0a:	69f8      	ldr	r0, [r7, #28]
 8008e0c:	f000 f87e 	bl	8008f0c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008e16:	2300      	movs	r3, #0
 8008e18:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008e1a:	e043      	b.n	8008ea4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008e1c:	f107 0316 	add.w	r3, r7, #22
 8008e20:	4619      	mov	r1, r3
 8008e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e24:	f000 f979 	bl	800911a <USBH_GetNextDesc>
 8008e28:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2c:	785b      	ldrb	r3, [r3, #1]
 8008e2e:	2b05      	cmp	r3, #5
 8008e30:	d138      	bne.n	8008ea4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	795b      	ldrb	r3, [r3, #5]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d10f      	bne.n	8008e5a <USBH_ParseCfgDesc+0x13a>
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	799b      	ldrb	r3, [r3, #6]
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d10b      	bne.n	8008e5a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	79db      	ldrb	r3, [r3, #7]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10f      	bne.n	8008e6a <USBH_ParseCfgDesc+0x14a>
 8008e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	2b09      	cmp	r3, #9
 8008e50:	d00b      	beq.n	8008e6a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e54:	2209      	movs	r2, #9
 8008e56:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e58:	e007      	b.n	8008e6a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	2b07      	cmp	r3, #7
 8008e60:	d004      	beq.n	8008e6c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e64:	2207      	movs	r2, #7
 8008e66:	701a      	strb	r2, [r3, #0]
 8008e68:	e000      	b.n	8008e6c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e6a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e70:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008e74:	3201      	adds	r2, #1
 8008e76:	00d2      	lsls	r2, r2, #3
 8008e78:	211a      	movs	r1, #26
 8008e7a:	fb01 f303 	mul.w	r3, r1, r3
 8008e7e:	4413      	add	r3, r2
 8008e80:	3308      	adds	r3, #8
 8008e82:	6a3a      	ldr	r2, [r7, #32]
 8008e84:	4413      	add	r3, r2
 8008e86:	3304      	adds	r3, #4
 8008e88:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e8c:	69b9      	ldr	r1, [r7, #24]
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f000 f86b 	bl	8008f6a <USBH_ParseEPDesc>
 8008e94:	4603      	mov	r3, r0
 8008e96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008e9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	791b      	ldrb	r3, [r3, #4]
 8008ea8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d204      	bcs.n	8008eba <USBH_ParseCfgDesc+0x19a>
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	885a      	ldrh	r2, [r3, #2]
 8008eb4:	8afb      	ldrh	r3, [r7, #22]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d8b0      	bhi.n	8008e1c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	791b      	ldrb	r3, [r3, #4]
 8008ebe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d201      	bcs.n	8008eca <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e01c      	b.n	8008f04 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ece:	3301      	adds	r3, #1
 8008ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d805      	bhi.n	8008ee8 <USBH_ParseCfgDesc+0x1c8>
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	885a      	ldrh	r2, [r3, #2]
 8008ee0:	8afb      	ldrh	r3, [r7, #22]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	f63f af74 	bhi.w	8008dd0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	791b      	ldrb	r3, [r3, #4]
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	bf28      	it	cs
 8008ef0:	2302      	movcs	r3, #2
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d201      	bcs.n	8008f00 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008efc:	2303      	movs	r3, #3
 8008efe:	e001      	b.n	8008f04 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008f00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3730      	adds	r7, #48	; 0x30
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	781a      	ldrb	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	785a      	ldrb	r2, [r3, #1]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	789a      	ldrb	r2, [r3, #2]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	78da      	ldrb	r2, [r3, #3]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	791a      	ldrb	r2, [r3, #4]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	795a      	ldrb	r2, [r3, #5]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	799a      	ldrb	r2, [r3, #6]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	79da      	ldrb	r2, [r3, #7]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	7a1a      	ldrb	r2, [r3, #8]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	721a      	strb	r2, [r3, #8]
}
 8008f5e:	bf00      	nop
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b087      	sub	sp, #28
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	60f8      	str	r0, [r7, #12]
 8008f72:	60b9      	str	r1, [r7, #8]
 8008f74:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	781a      	ldrb	r2, [r3, #0]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	785a      	ldrb	r2, [r3, #1]
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	789a      	ldrb	r2, [r3, #2]
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	78da      	ldrb	r2, [r3, #3]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	3304      	adds	r3, #4
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	3305      	adds	r3, #5
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	021b      	lsls	r3, r3, #8
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	799a      	ldrb	r2, [r3, #6]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	889b      	ldrh	r3, [r3, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d102      	bne.n	8008fcc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	75fb      	strb	r3, [r7, #23]
 8008fca:	e033      	b.n	8009034 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	889b      	ldrh	r3, [r3, #4]
 8008fd0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008fd4:	f023 0307 	bic.w	r3, r3, #7
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	889b      	ldrh	r3, [r3, #4]
 8008fe2:	b21a      	sxth	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	3304      	adds	r3, #4
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	b299      	uxth	r1, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	3305      	adds	r3, #5
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	021b      	lsls	r3, r3, #8
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	430b      	orrs	r3, r1
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009000:	2b00      	cmp	r3, #0
 8009002:	d110      	bne.n	8009026 <USBH_ParseEPDesc+0xbc>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3304      	adds	r3, #4
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	b299      	uxth	r1, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	3305      	adds	r3, #5
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	b29b      	uxth	r3, r3
 8009014:	021b      	lsls	r3, r3, #8
 8009016:	b29b      	uxth	r3, r3
 8009018:	430b      	orrs	r3, r1
 800901a:	b29b      	uxth	r3, r3
 800901c:	b21b      	sxth	r3, r3
 800901e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009022:	b21b      	sxth	r3, r3
 8009024:	e001      	b.n	800902a <USBH_ParseEPDesc+0xc0>
 8009026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800902a:	4313      	orrs	r3, r2
 800902c:	b21b      	sxth	r3, r3
 800902e:	b29a      	uxth	r2, r3
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800903a:	2b00      	cmp	r3, #0
 800903c:	d116      	bne.n	800906c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	78db      	ldrb	r3, [r3, #3]
 8009042:	f003 0303 	and.w	r3, r3, #3
 8009046:	2b01      	cmp	r3, #1
 8009048:	d005      	beq.n	8009056 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	78db      	ldrb	r3, [r3, #3]
 800904e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009052:	2b03      	cmp	r3, #3
 8009054:	d127      	bne.n	80090a6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	799b      	ldrb	r3, [r3, #6]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <USBH_ParseEPDesc+0xfc>
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	799b      	ldrb	r3, [r3, #6]
 8009062:	2b10      	cmp	r3, #16
 8009064:	d91f      	bls.n	80090a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009066:	2303      	movs	r3, #3
 8009068:	75fb      	strb	r3, [r7, #23]
 800906a:	e01c      	b.n	80090a6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	78db      	ldrb	r3, [r3, #3]
 8009070:	f003 0303 	and.w	r3, r3, #3
 8009074:	2b01      	cmp	r3, #1
 8009076:	d10a      	bne.n	800908e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	799b      	ldrb	r3, [r3, #6]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d003      	beq.n	8009088 <USBH_ParseEPDesc+0x11e>
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	799b      	ldrb	r3, [r3, #6]
 8009084:	2b10      	cmp	r3, #16
 8009086:	d90e      	bls.n	80090a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009088:	2303      	movs	r3, #3
 800908a:	75fb      	strb	r3, [r7, #23]
 800908c:	e00b      	b.n	80090a6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	78db      	ldrb	r3, [r3, #3]
 8009092:	f003 0303 	and.w	r3, r3, #3
 8009096:	2b03      	cmp	r3, #3
 8009098:	d105      	bne.n	80090a6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	799b      	ldrb	r3, [r3, #6]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80090a2:	2303      	movs	r3, #3
 80090a4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80090a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	371c      	adds	r7, #28
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	4613      	mov	r3, r2
 80090c0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	3301      	adds	r3, #1
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d120      	bne.n	800910e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	1e9a      	subs	r2, r3, #2
 80090d2:	88fb      	ldrh	r3, [r7, #6]
 80090d4:	4293      	cmp	r3, r2
 80090d6:	bf28      	it	cs
 80090d8:	4613      	movcs	r3, r2
 80090da:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	3302      	adds	r3, #2
 80090e0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80090e2:	2300      	movs	r3, #0
 80090e4:	82fb      	strh	r3, [r7, #22]
 80090e6:	e00b      	b.n	8009100 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80090e8:	8afb      	ldrh	r3, [r7, #22]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	4413      	add	r3, r2
 80090ee:	781a      	ldrb	r2, [r3, #0]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	3301      	adds	r3, #1
 80090f8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80090fa:	8afb      	ldrh	r3, [r7, #22]
 80090fc:	3302      	adds	r3, #2
 80090fe:	82fb      	strh	r3, [r7, #22]
 8009100:	8afa      	ldrh	r2, [r7, #22]
 8009102:	8abb      	ldrh	r3, [r7, #20]
 8009104:	429a      	cmp	r2, r3
 8009106:	d3ef      	bcc.n	80090e8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	2200      	movs	r2, #0
 800910c:	701a      	strb	r2, [r3, #0]
  }
}
 800910e:	bf00      	nop
 8009110:	371c      	adds	r7, #28
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800911a:	b480      	push	{r7}
 800911c:	b085      	sub	sp, #20
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	881a      	ldrh	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	b29b      	uxth	r3, r3
 800912e:	4413      	add	r3, r2
 8009130:	b29a      	uxth	r2, r3
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4413      	add	r3, r2
 8009140:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009142:	68fb      	ldr	r3, [r7, #12]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	4613      	mov	r3, r2
 800915c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800915e:	2301      	movs	r3, #1
 8009160:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	789b      	ldrb	r3, [r3, #2]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d002      	beq.n	8009170 <USBH_CtlReq+0x20>
 800916a:	2b02      	cmp	r3, #2
 800916c:	d00f      	beq.n	800918e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800916e:	e027      	b.n	80091c0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	88fa      	ldrh	r2, [r7, #6]
 800917a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2201      	movs	r2, #1
 8009180:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2202      	movs	r2, #2
 8009186:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009188:	2301      	movs	r3, #1
 800918a:	75fb      	strb	r3, [r7, #23]
      break;
 800918c:	e018      	b.n	80091c0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f000 f81c 	bl	80091cc <USBH_HandleControl>
 8009194:	4603      	mov	r3, r0
 8009196:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009198:	7dfb      	ldrb	r3, [r7, #23]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d002      	beq.n	80091a4 <USBH_CtlReq+0x54>
 800919e:	7dfb      	ldrb	r3, [r7, #23]
 80091a0:	2b03      	cmp	r3, #3
 80091a2:	d106      	bne.n	80091b2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2201      	movs	r2, #1
 80091a8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	761a      	strb	r2, [r3, #24]
      break;
 80091b0:	e005      	b.n	80091be <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80091b2:	7dfb      	ldrb	r3, [r7, #23]
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d102      	bne.n	80091be <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2201      	movs	r2, #1
 80091bc:	709a      	strb	r2, [r3, #2]
      break;
 80091be:	bf00      	nop
  }
  return status;
 80091c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3718      	adds	r7, #24
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
	...

080091cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b086      	sub	sp, #24
 80091d0:	af02      	add	r7, sp, #8
 80091d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80091d4:	2301      	movs	r3, #1
 80091d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80091d8:	2300      	movs	r3, #0
 80091da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	7e1b      	ldrb	r3, [r3, #24]
 80091e0:	3b01      	subs	r3, #1
 80091e2:	2b0a      	cmp	r3, #10
 80091e4:	f200 8156 	bhi.w	8009494 <USBH_HandleControl+0x2c8>
 80091e8:	a201      	add	r2, pc, #4	; (adr r2, 80091f0 <USBH_HandleControl+0x24>)
 80091ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ee:	bf00      	nop
 80091f0:	0800921d 	.word	0x0800921d
 80091f4:	08009237 	.word	0x08009237
 80091f8:	080092a1 	.word	0x080092a1
 80091fc:	080092c7 	.word	0x080092c7
 8009200:	080092ff 	.word	0x080092ff
 8009204:	08009329 	.word	0x08009329
 8009208:	0800937b 	.word	0x0800937b
 800920c:	0800939d 	.word	0x0800939d
 8009210:	080093d9 	.word	0x080093d9
 8009214:	080093ff 	.word	0x080093ff
 8009218:	0800943d 	.word	0x0800943d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f103 0110 	add.w	r1, r3, #16
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	795b      	ldrb	r3, [r3, #5]
 8009226:	461a      	mov	r2, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f943 	bl	80094b4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2202      	movs	r2, #2
 8009232:	761a      	strb	r2, [r3, #24]
      break;
 8009234:	e139      	b.n	80094aa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	795b      	ldrb	r3, [r3, #5]
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fcc5 	bl	8009bcc <USBH_LL_GetURBState>
 8009242:	4603      	mov	r3, r0
 8009244:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009246:	7bbb      	ldrb	r3, [r7, #14]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d11e      	bne.n	800928a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	7c1b      	ldrb	r3, [r3, #16]
 8009250:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009254:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	8adb      	ldrh	r3, [r3, #22]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00a      	beq.n	8009274 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800925e:	7b7b      	ldrb	r3, [r7, #13]
 8009260:	2b80      	cmp	r3, #128	; 0x80
 8009262:	d103      	bne.n	800926c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2203      	movs	r2, #3
 8009268:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800926a:	e115      	b.n	8009498 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2205      	movs	r2, #5
 8009270:	761a      	strb	r2, [r3, #24]
      break;
 8009272:	e111      	b.n	8009498 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009274:	7b7b      	ldrb	r3, [r7, #13]
 8009276:	2b80      	cmp	r3, #128	; 0x80
 8009278:	d103      	bne.n	8009282 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2209      	movs	r2, #9
 800927e:	761a      	strb	r2, [r3, #24]
      break;
 8009280:	e10a      	b.n	8009498 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2207      	movs	r2, #7
 8009286:	761a      	strb	r2, [r3, #24]
      break;
 8009288:	e106      	b.n	8009498 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800928a:	7bbb      	ldrb	r3, [r7, #14]
 800928c:	2b04      	cmp	r3, #4
 800928e:	d003      	beq.n	8009298 <USBH_HandleControl+0xcc>
 8009290:	7bbb      	ldrb	r3, [r7, #14]
 8009292:	2b02      	cmp	r3, #2
 8009294:	f040 8100 	bne.w	8009498 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	220b      	movs	r2, #11
 800929c:	761a      	strb	r2, [r3, #24]
      break;
 800929e:	e0fb      	b.n	8009498 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6899      	ldr	r1, [r3, #8]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	899a      	ldrh	r2, [r3, #12]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	791b      	ldrb	r3, [r3, #4]
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f93a 	bl	8009532 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2204      	movs	r2, #4
 80092c2:	761a      	strb	r2, [r3, #24]
      break;
 80092c4:	e0f1      	b.n	80094aa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	791b      	ldrb	r3, [r3, #4]
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fc7d 	bl	8009bcc <USBH_LL_GetURBState>
 80092d2:	4603      	mov	r3, r0
 80092d4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80092d6:	7bbb      	ldrb	r3, [r7, #14]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d102      	bne.n	80092e2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2209      	movs	r2, #9
 80092e0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80092e2:	7bbb      	ldrb	r3, [r7, #14]
 80092e4:	2b05      	cmp	r3, #5
 80092e6:	d102      	bne.n	80092ee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80092e8:	2303      	movs	r3, #3
 80092ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092ec:	e0d6      	b.n	800949c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80092ee:	7bbb      	ldrb	r3, [r7, #14]
 80092f0:	2b04      	cmp	r3, #4
 80092f2:	f040 80d3 	bne.w	800949c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	220b      	movs	r2, #11
 80092fa:	761a      	strb	r2, [r3, #24]
      break;
 80092fc:	e0ce      	b.n	800949c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6899      	ldr	r1, [r3, #8]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	899a      	ldrh	r2, [r3, #12]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	795b      	ldrb	r3, [r3, #5]
 800930a:	2001      	movs	r0, #1
 800930c:	9000      	str	r0, [sp, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f8ea 	bl	80094e8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800931a:	b29a      	uxth	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2206      	movs	r2, #6
 8009324:	761a      	strb	r2, [r3, #24]
      break;
 8009326:	e0c0      	b.n	80094aa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	795b      	ldrb	r3, [r3, #5]
 800932c:	4619      	mov	r1, r3
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fc4c 	bl	8009bcc <USBH_LL_GetURBState>
 8009334:	4603      	mov	r3, r0
 8009336:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009338:	7bbb      	ldrb	r3, [r7, #14]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d103      	bne.n	8009346 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2207      	movs	r2, #7
 8009342:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009344:	e0ac      	b.n	80094a0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009346:	7bbb      	ldrb	r3, [r7, #14]
 8009348:	2b05      	cmp	r3, #5
 800934a:	d105      	bne.n	8009358 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	220c      	movs	r2, #12
 8009350:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009352:	2303      	movs	r3, #3
 8009354:	73fb      	strb	r3, [r7, #15]
      break;
 8009356:	e0a3      	b.n	80094a0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009358:	7bbb      	ldrb	r3, [r7, #14]
 800935a:	2b02      	cmp	r3, #2
 800935c:	d103      	bne.n	8009366 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2205      	movs	r2, #5
 8009362:	761a      	strb	r2, [r3, #24]
      break;
 8009364:	e09c      	b.n	80094a0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009366:	7bbb      	ldrb	r3, [r7, #14]
 8009368:	2b04      	cmp	r3, #4
 800936a:	f040 8099 	bne.w	80094a0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	220b      	movs	r2, #11
 8009372:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009374:	2302      	movs	r3, #2
 8009376:	73fb      	strb	r3, [r7, #15]
      break;
 8009378:	e092      	b.n	80094a0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	791b      	ldrb	r3, [r3, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	2100      	movs	r1, #0
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f8d5 	bl	8009532 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800938e:	b29a      	uxth	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2208      	movs	r2, #8
 8009398:	761a      	strb	r2, [r3, #24]

      break;
 800939a:	e086      	b.n	80094aa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	791b      	ldrb	r3, [r3, #4]
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fc12 	bl	8009bcc <USBH_LL_GetURBState>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d105      	bne.n	80093be <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	220d      	movs	r2, #13
 80093b6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80093b8:	2300      	movs	r3, #0
 80093ba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80093bc:	e072      	b.n	80094a4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80093be:	7bbb      	ldrb	r3, [r7, #14]
 80093c0:	2b04      	cmp	r3, #4
 80093c2:	d103      	bne.n	80093cc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	220b      	movs	r2, #11
 80093c8:	761a      	strb	r2, [r3, #24]
      break;
 80093ca:	e06b      	b.n	80094a4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
 80093ce:	2b05      	cmp	r3, #5
 80093d0:	d168      	bne.n	80094a4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80093d2:	2303      	movs	r3, #3
 80093d4:	73fb      	strb	r3, [r7, #15]
      break;
 80093d6:	e065      	b.n	80094a4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	795b      	ldrb	r3, [r3, #5]
 80093dc:	2201      	movs	r2, #1
 80093de:	9200      	str	r2, [sp, #0]
 80093e0:	2200      	movs	r2, #0
 80093e2:	2100      	movs	r1, #0
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f87f 	bl	80094e8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	220a      	movs	r2, #10
 80093fa:	761a      	strb	r2, [r3, #24]
      break;
 80093fc:	e055      	b.n	80094aa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	795b      	ldrb	r3, [r3, #5]
 8009402:	4619      	mov	r1, r3
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fbe1 	bl	8009bcc <USBH_LL_GetURBState>
 800940a:	4603      	mov	r3, r0
 800940c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800940e:	7bbb      	ldrb	r3, [r7, #14]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d105      	bne.n	8009420 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	220d      	movs	r2, #13
 800941c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800941e:	e043      	b.n	80094a8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009420:	7bbb      	ldrb	r3, [r7, #14]
 8009422:	2b02      	cmp	r3, #2
 8009424:	d103      	bne.n	800942e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2209      	movs	r2, #9
 800942a:	761a      	strb	r2, [r3, #24]
      break;
 800942c:	e03c      	b.n	80094a8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800942e:	7bbb      	ldrb	r3, [r7, #14]
 8009430:	2b04      	cmp	r3, #4
 8009432:	d139      	bne.n	80094a8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	220b      	movs	r2, #11
 8009438:	761a      	strb	r2, [r3, #24]
      break;
 800943a:	e035      	b.n	80094a8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	7e5b      	ldrb	r3, [r3, #25]
 8009440:	3301      	adds	r3, #1
 8009442:	b2da      	uxtb	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	765a      	strb	r2, [r3, #25]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	7e5b      	ldrb	r3, [r3, #25]
 800944c:	2b02      	cmp	r3, #2
 800944e:	d806      	bhi.n	800945e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2201      	movs	r2, #1
 800945a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800945c:	e025      	b.n	80094aa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009464:	2106      	movs	r1, #6
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	795b      	ldrb	r3, [r3, #5]
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f90c 	bl	8009694 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	791b      	ldrb	r3, [r3, #4]
 8009480:	4619      	mov	r1, r3
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f906 	bl	8009694 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800948e:	2302      	movs	r3, #2
 8009490:	73fb      	strb	r3, [r7, #15]
      break;
 8009492:	e00a      	b.n	80094aa <USBH_HandleControl+0x2de>

    default:
      break;
 8009494:	bf00      	nop
 8009496:	e008      	b.n	80094aa <USBH_HandleControl+0x2de>
      break;
 8009498:	bf00      	nop
 800949a:	e006      	b.n	80094aa <USBH_HandleControl+0x2de>
      break;
 800949c:	bf00      	nop
 800949e:	e004      	b.n	80094aa <USBH_HandleControl+0x2de>
      break;
 80094a0:	bf00      	nop
 80094a2:	e002      	b.n	80094aa <USBH_HandleControl+0x2de>
      break;
 80094a4:	bf00      	nop
 80094a6:	e000      	b.n	80094aa <USBH_HandleControl+0x2de>
      break;
 80094a8:	bf00      	nop
  }

  return status;
 80094aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b088      	sub	sp, #32
 80094b8:	af04      	add	r7, sp, #16
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	4613      	mov	r3, r2
 80094c0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80094c2:	79f9      	ldrb	r1, [r7, #7]
 80094c4:	2300      	movs	r3, #0
 80094c6:	9303      	str	r3, [sp, #12]
 80094c8:	2308      	movs	r3, #8
 80094ca:	9302      	str	r3, [sp, #8]
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	9301      	str	r3, [sp, #4]
 80094d0:	2300      	movs	r3, #0
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	2300      	movs	r3, #0
 80094d6:	2200      	movs	r2, #0
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f000 fb46 	bl	8009b6a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b088      	sub	sp, #32
 80094ec:	af04      	add	r7, sp, #16
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	4611      	mov	r1, r2
 80094f4:	461a      	mov	r2, r3
 80094f6:	460b      	mov	r3, r1
 80094f8:	80fb      	strh	r3, [r7, #6]
 80094fa:	4613      	mov	r3, r2
 80094fc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009508:	2300      	movs	r3, #0
 800950a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800950c:	7979      	ldrb	r1, [r7, #5]
 800950e:	7e3b      	ldrb	r3, [r7, #24]
 8009510:	9303      	str	r3, [sp, #12]
 8009512:	88fb      	ldrh	r3, [r7, #6]
 8009514:	9302      	str	r3, [sp, #8]
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	9301      	str	r3, [sp, #4]
 800951a:	2301      	movs	r3, #1
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	2300      	movs	r3, #0
 8009520:	2200      	movs	r2, #0
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 fb21 	bl	8009b6a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b088      	sub	sp, #32
 8009536:	af04      	add	r7, sp, #16
 8009538:	60f8      	str	r0, [r7, #12]
 800953a:	60b9      	str	r1, [r7, #8]
 800953c:	4611      	mov	r1, r2
 800953e:	461a      	mov	r2, r3
 8009540:	460b      	mov	r3, r1
 8009542:	80fb      	strh	r3, [r7, #6]
 8009544:	4613      	mov	r3, r2
 8009546:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009548:	7979      	ldrb	r1, [r7, #5]
 800954a:	2300      	movs	r3, #0
 800954c:	9303      	str	r3, [sp, #12]
 800954e:	88fb      	ldrh	r3, [r7, #6]
 8009550:	9302      	str	r3, [sp, #8]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	9301      	str	r3, [sp, #4]
 8009556:	2301      	movs	r3, #1
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	2300      	movs	r3, #0
 800955c:	2201      	movs	r2, #1
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f000 fb03 	bl	8009b6a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009564:	2300      	movs	r3, #0

}
 8009566:	4618      	mov	r0, r3
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b088      	sub	sp, #32
 8009572:	af04      	add	r7, sp, #16
 8009574:	60f8      	str	r0, [r7, #12]
 8009576:	60b9      	str	r1, [r7, #8]
 8009578:	4611      	mov	r1, r2
 800957a:	461a      	mov	r2, r3
 800957c:	460b      	mov	r3, r1
 800957e:	80fb      	strh	r3, [r7, #6]
 8009580:	4613      	mov	r3, r2
 8009582:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800958e:	2300      	movs	r3, #0
 8009590:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009592:	7979      	ldrb	r1, [r7, #5]
 8009594:	7e3b      	ldrb	r3, [r7, #24]
 8009596:	9303      	str	r3, [sp, #12]
 8009598:	88fb      	ldrh	r3, [r7, #6]
 800959a:	9302      	str	r3, [sp, #8]
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	9301      	str	r3, [sp, #4]
 80095a0:	2301      	movs	r3, #1
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	2302      	movs	r3, #2
 80095a6:	2200      	movs	r2, #0
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 fade 	bl	8009b6a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b088      	sub	sp, #32
 80095bc:	af04      	add	r7, sp, #16
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	4611      	mov	r1, r2
 80095c4:	461a      	mov	r2, r3
 80095c6:	460b      	mov	r3, r1
 80095c8:	80fb      	strh	r3, [r7, #6]
 80095ca:	4613      	mov	r3, r2
 80095cc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095ce:	7979      	ldrb	r1, [r7, #5]
 80095d0:	2300      	movs	r3, #0
 80095d2:	9303      	str	r3, [sp, #12]
 80095d4:	88fb      	ldrh	r3, [r7, #6]
 80095d6:	9302      	str	r3, [sp, #8]
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	9301      	str	r3, [sp, #4]
 80095dc:	2301      	movs	r3, #1
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	2302      	movs	r3, #2
 80095e2:	2201      	movs	r2, #1
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 fac0 	bl	8009b6a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af04      	add	r7, sp, #16
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	4608      	mov	r0, r1
 80095fe:	4611      	mov	r1, r2
 8009600:	461a      	mov	r2, r3
 8009602:	4603      	mov	r3, r0
 8009604:	70fb      	strb	r3, [r7, #3]
 8009606:	460b      	mov	r3, r1
 8009608:	70bb      	strb	r3, [r7, #2]
 800960a:	4613      	mov	r3, r2
 800960c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800960e:	7878      	ldrb	r0, [r7, #1]
 8009610:	78ba      	ldrb	r2, [r7, #2]
 8009612:	78f9      	ldrb	r1, [r7, #3]
 8009614:	8b3b      	ldrh	r3, [r7, #24]
 8009616:	9302      	str	r3, [sp, #8]
 8009618:	7d3b      	ldrb	r3, [r7, #20]
 800961a:	9301      	str	r3, [sp, #4]
 800961c:	7c3b      	ldrb	r3, [r7, #16]
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	4603      	mov	r3, r0
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fa53 	bl	8009ace <USBH_LL_OpenPipe>

  return USBH_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b082      	sub	sp, #8
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	460b      	mov	r3, r1
 800963c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800963e:	78fb      	ldrb	r3, [r7, #3]
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fa72 	bl	8009b2c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b084      	sub	sp, #16
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	460b      	mov	r3, r1
 800965c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f836 	bl	80096d0 <USBH_GetFreePipe>
 8009664:	4603      	mov	r3, r0
 8009666:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009668:	89fb      	ldrh	r3, [r7, #14]
 800966a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800966e:	4293      	cmp	r3, r2
 8009670:	d00a      	beq.n	8009688 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009672:	78fa      	ldrb	r2, [r7, #3]
 8009674:	89fb      	ldrh	r3, [r7, #14]
 8009676:	f003 030f 	and.w	r3, r3, #15
 800967a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	33e0      	adds	r3, #224	; 0xe0
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	440b      	add	r3, r1
 8009686:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009688:	89fb      	ldrh	r3, [r7, #14]
 800968a:	b2db      	uxtb	r3, r3
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80096a0:	78fb      	ldrb	r3, [r7, #3]
 80096a2:	2b0f      	cmp	r3, #15
 80096a4:	d80d      	bhi.n	80096c2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80096a6:	78fb      	ldrb	r3, [r7, #3]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	33e0      	adds	r3, #224	; 0xe0
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	685a      	ldr	r2, [r3, #4]
 80096b2:	78fb      	ldrb	r3, [r7, #3]
 80096b4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80096b8:	6879      	ldr	r1, [r7, #4]
 80096ba:	33e0      	adds	r3, #224	; 0xe0
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	440b      	add	r3, r1
 80096c0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80096d8:	2300      	movs	r3, #0
 80096da:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80096dc:	2300      	movs	r3, #0
 80096de:	73fb      	strb	r3, [r7, #15]
 80096e0:	e00f      	b.n	8009702 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	33e0      	adds	r3, #224	; 0xe0
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d102      	bne.n	80096fc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	e007      	b.n	800970c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	3301      	adds	r3, #1
 8009700:	73fb      	strb	r3, [r7, #15]
 8009702:	7bfb      	ldrb	r3, [r7, #15]
 8009704:	2b0f      	cmp	r3, #15
 8009706:	d9ec      	bls.n	80096e2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009708:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800970c:	4618      	mov	r0, r3
 800970e:	3714      	adds	r7, #20
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800971c:	2201      	movs	r2, #1
 800971e:	490e      	ldr	r1, [pc, #56]	; (8009758 <MX_USB_HOST_Init+0x40>)
 8009720:	480e      	ldr	r0, [pc, #56]	; (800975c <MX_USB_HOST_Init+0x44>)
 8009722:	f7fe fba5 	bl	8007e70 <USBH_Init>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800972c:	f7f7 ff20 	bl	8001570 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009730:	490b      	ldr	r1, [pc, #44]	; (8009760 <MX_USB_HOST_Init+0x48>)
 8009732:	480a      	ldr	r0, [pc, #40]	; (800975c <MX_USB_HOST_Init+0x44>)
 8009734:	f7fe fc2a 	bl	8007f8c <USBH_RegisterClass>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d001      	beq.n	8009742 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800973e:	f7f7 ff17 	bl	8001570 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009742:	4806      	ldr	r0, [pc, #24]	; (800975c <MX_USB_HOST_Init+0x44>)
 8009744:	f7fe fcae 	bl	80080a4 <USBH_Start>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800974e:	f7f7 ff0f 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009752:	bf00      	nop
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	08009779 	.word	0x08009779
 800975c:	200009c0 	.word	0x200009c0
 8009760:	2000000c 	.word	0x2000000c

08009764 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009768:	4802      	ldr	r0, [pc, #8]	; (8009774 <MX_USB_HOST_Process+0x10>)
 800976a:	f7fe fcab 	bl	80080c4 <USBH_Process>
}
 800976e:	bf00      	nop
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	200009c0 	.word	0x200009c0

08009778 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009784:	78fb      	ldrb	r3, [r7, #3]
 8009786:	3b01      	subs	r3, #1
 8009788:	2b04      	cmp	r3, #4
 800978a:	d819      	bhi.n	80097c0 <USBH_UserProcess+0x48>
 800978c:	a201      	add	r2, pc, #4	; (adr r2, 8009794 <USBH_UserProcess+0x1c>)
 800978e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009792:	bf00      	nop
 8009794:	080097c1 	.word	0x080097c1
 8009798:	080097b1 	.word	0x080097b1
 800979c:	080097c1 	.word	0x080097c1
 80097a0:	080097b9 	.word	0x080097b9
 80097a4:	080097a9 	.word	0x080097a9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80097a8:	4b09      	ldr	r3, [pc, #36]	; (80097d0 <USBH_UserProcess+0x58>)
 80097aa:	2203      	movs	r2, #3
 80097ac:	701a      	strb	r2, [r3, #0]
  break;
 80097ae:	e008      	b.n	80097c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80097b0:	4b07      	ldr	r3, [pc, #28]	; (80097d0 <USBH_UserProcess+0x58>)
 80097b2:	2202      	movs	r2, #2
 80097b4:	701a      	strb	r2, [r3, #0]
  break;
 80097b6:	e004      	b.n	80097c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80097b8:	4b05      	ldr	r3, [pc, #20]	; (80097d0 <USBH_UserProcess+0x58>)
 80097ba:	2201      	movs	r2, #1
 80097bc:	701a      	strb	r2, [r3, #0]
  break;
 80097be:	e000      	b.n	80097c2 <USBH_UserProcess+0x4a>

  default:
  break;
 80097c0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80097c2:	bf00      	nop
 80097c4:	370c      	adds	r7, #12
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	20000d98 	.word	0x20000d98

080097d4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b08a      	sub	sp, #40	; 0x28
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097dc:	f107 0314 	add.w	r3, r7, #20
 80097e0:	2200      	movs	r2, #0
 80097e2:	601a      	str	r2, [r3, #0]
 80097e4:	605a      	str	r2, [r3, #4]
 80097e6:	609a      	str	r2, [r3, #8]
 80097e8:	60da      	str	r2, [r3, #12]
 80097ea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097f4:	d147      	bne.n	8009886 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097f6:	2300      	movs	r3, #0
 80097f8:	613b      	str	r3, [r7, #16]
 80097fa:	4b25      	ldr	r3, [pc, #148]	; (8009890 <HAL_HCD_MspInit+0xbc>)
 80097fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fe:	4a24      	ldr	r2, [pc, #144]	; (8009890 <HAL_HCD_MspInit+0xbc>)
 8009800:	f043 0301 	orr.w	r3, r3, #1
 8009804:	6313      	str	r3, [r2, #48]	; 0x30
 8009806:	4b22      	ldr	r3, [pc, #136]	; (8009890 <HAL_HCD_MspInit+0xbc>)
 8009808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	613b      	str	r3, [r7, #16]
 8009810:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009818:	2300      	movs	r3, #0
 800981a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800981c:	2300      	movs	r3, #0
 800981e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009820:	f107 0314 	add.w	r3, r7, #20
 8009824:	4619      	mov	r1, r3
 8009826:	481b      	ldr	r0, [pc, #108]	; (8009894 <HAL_HCD_MspInit+0xc0>)
 8009828:	f7f8 fb5e 	bl	8001ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800982c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009832:	2302      	movs	r3, #2
 8009834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009836:	2300      	movs	r3, #0
 8009838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800983a:	2300      	movs	r3, #0
 800983c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800983e:	230a      	movs	r3, #10
 8009840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009842:	f107 0314 	add.w	r3, r7, #20
 8009846:	4619      	mov	r1, r3
 8009848:	4812      	ldr	r0, [pc, #72]	; (8009894 <HAL_HCD_MspInit+0xc0>)
 800984a:	f7f8 fb4d 	bl	8001ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800984e:	4b10      	ldr	r3, [pc, #64]	; (8009890 <HAL_HCD_MspInit+0xbc>)
 8009850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009852:	4a0f      	ldr	r2, [pc, #60]	; (8009890 <HAL_HCD_MspInit+0xbc>)
 8009854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009858:	6353      	str	r3, [r2, #52]	; 0x34
 800985a:	2300      	movs	r3, #0
 800985c:	60fb      	str	r3, [r7, #12]
 800985e:	4b0c      	ldr	r3, [pc, #48]	; (8009890 <HAL_HCD_MspInit+0xbc>)
 8009860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009862:	4a0b      	ldr	r2, [pc, #44]	; (8009890 <HAL_HCD_MspInit+0xbc>)
 8009864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009868:	6453      	str	r3, [r2, #68]	; 0x44
 800986a:	4b09      	ldr	r3, [pc, #36]	; (8009890 <HAL_HCD_MspInit+0xbc>)
 800986c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800986e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009876:	2200      	movs	r2, #0
 8009878:	2100      	movs	r1, #0
 800987a:	2043      	movs	r0, #67	; 0x43
 800987c:	f7f8 fafd 	bl	8001e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009880:	2043      	movs	r0, #67	; 0x43
 8009882:	f7f8 fb16 	bl	8001eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009886:	bf00      	nop
 8009888:	3728      	adds	r7, #40	; 0x28
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	40023800 	.word	0x40023800
 8009894:	40020000 	.word	0x40020000

08009898 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fe ffeb 	bl	8008882 <USBH_LL_IncTimer>
}
 80098ac:	bf00      	nop
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7ff f823 	bl	800890e <USBH_LL_Connect>
}
 80098c8:	bf00      	nop
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff f82c 	bl	800893c <USBH_LL_Disconnect>
}
 80098e4:	bf00      	nop
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	70fb      	strb	r3, [r7, #3]
 80098f8:	4613      	mov	r3, r2
 80098fa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009916:	4618      	mov	r0, r3
 8009918:	f7fe ffdd 	bl	80088d6 <USBH_LL_PortEnabled>
}
 800991c:	bf00      	nop
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009932:	4618      	mov	r0, r3
 8009934:	f7fe ffdd 	bl	80088f2 <USBH_LL_PortDisabled>
}
 8009938:	bf00      	nop
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800994e:	2b01      	cmp	r3, #1
 8009950:	d12a      	bne.n	80099a8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009952:	4a18      	ldr	r2, [pc, #96]	; (80099b4 <USBH_LL_Init+0x74>)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a15      	ldr	r2, [pc, #84]	; (80099b4 <USBH_LL_Init+0x74>)
 800995e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009962:	4b14      	ldr	r3, [pc, #80]	; (80099b4 <USBH_LL_Init+0x74>)
 8009964:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009968:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800996a:	4b12      	ldr	r3, [pc, #72]	; (80099b4 <USBH_LL_Init+0x74>)
 800996c:	2208      	movs	r2, #8
 800996e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009970:	4b10      	ldr	r3, [pc, #64]	; (80099b4 <USBH_LL_Init+0x74>)
 8009972:	2201      	movs	r2, #1
 8009974:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009976:	4b0f      	ldr	r3, [pc, #60]	; (80099b4 <USBH_LL_Init+0x74>)
 8009978:	2200      	movs	r2, #0
 800997a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800997c:	4b0d      	ldr	r3, [pc, #52]	; (80099b4 <USBH_LL_Init+0x74>)
 800997e:	2202      	movs	r2, #2
 8009980:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009982:	4b0c      	ldr	r3, [pc, #48]	; (80099b4 <USBH_LL_Init+0x74>)
 8009984:	2200      	movs	r2, #0
 8009986:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009988:	480a      	ldr	r0, [pc, #40]	; (80099b4 <USBH_LL_Init+0x74>)
 800998a:	f7f8 fc62 	bl	8002252 <HAL_HCD_Init>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009994:	f7f7 fdec 	bl	8001570 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009998:	4806      	ldr	r0, [pc, #24]	; (80099b4 <USBH_LL_Init+0x74>)
 800999a:	f7f9 f846 	bl	8002a2a <HAL_HCD_GetCurrentFrame>
 800999e:	4603      	mov	r3, r0
 80099a0:	4619      	mov	r1, r3
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f7fe ff5e 	bl	8008864 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	20000d9c 	.word	0x20000d9c

080099b8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7f8 ffb5 	bl	800293e <HAL_HCD_Start>
 80099d4:	4603      	mov	r3, r0
 80099d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80099d8:	7bfb      	ldrb	r3, [r7, #15]
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 f95c 	bl	8009c98 <USBH_Get_USB_Status>
 80099e0:	4603      	mov	r3, r0
 80099e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b084      	sub	sp, #16
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7f8 ffbd 	bl	8002984 <HAL_HCD_Stop>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a0e:	7bfb      	ldrb	r3, [r7, #15]
 8009a10:	4618      	mov	r0, r3
 8009a12:	f000 f941 	bl	8009c98 <USBH_Get_USB_Status>
 8009a16:	4603      	mov	r3, r0
 8009a18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7f9 f805 	bl	8002a46 <HAL_HCD_GetCurrentSpeed>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d00c      	beq.n	8009a5c <USBH_LL_GetSpeed+0x38>
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d80d      	bhi.n	8009a62 <USBH_LL_GetSpeed+0x3e>
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d002      	beq.n	8009a50 <USBH_LL_GetSpeed+0x2c>
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d003      	beq.n	8009a56 <USBH_LL_GetSpeed+0x32>
 8009a4e:	e008      	b.n	8009a62 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009a50:	2300      	movs	r3, #0
 8009a52:	73fb      	strb	r3, [r7, #15]
    break;
 8009a54:	e008      	b.n	8009a68 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009a56:	2301      	movs	r3, #1
 8009a58:	73fb      	strb	r3, [r7, #15]
    break;
 8009a5a:	e005      	b.n	8009a68 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a60:	e002      	b.n	8009a68 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009a62:	2301      	movs	r3, #1
 8009a64:	73fb      	strb	r3, [r7, #15]
    break;
 8009a66:	bf00      	nop
  }
  return  speed;
 8009a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b084      	sub	sp, #16
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7f8 ff98 	bl	80029be <HAL_HCD_ResetPort>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f000 f8ff 	bl	8009c98 <USBH_Get_USB_Status>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009aba:	78fa      	ldrb	r2, [r7, #3]
 8009abc:	4611      	mov	r1, r2
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7f8 ff9f 	bl	8002a02 <HAL_HCD_HC_GetXferCount>
 8009ac4:	4603      	mov	r3, r0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009ace:	b590      	push	{r4, r7, lr}
 8009ad0:	b089      	sub	sp, #36	; 0x24
 8009ad2:	af04      	add	r7, sp, #16
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	4608      	mov	r0, r1
 8009ad8:	4611      	mov	r1, r2
 8009ada:	461a      	mov	r2, r3
 8009adc:	4603      	mov	r3, r0
 8009ade:	70fb      	strb	r3, [r7, #3]
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	70bb      	strb	r3, [r7, #2]
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009aec:	2300      	movs	r3, #0
 8009aee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009af6:	787c      	ldrb	r4, [r7, #1]
 8009af8:	78ba      	ldrb	r2, [r7, #2]
 8009afa:	78f9      	ldrb	r1, [r7, #3]
 8009afc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009afe:	9302      	str	r3, [sp, #8]
 8009b00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009b04:	9301      	str	r3, [sp, #4]
 8009b06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	4623      	mov	r3, r4
 8009b0e:	f7f8 fc02 	bl	8002316 <HAL_HCD_HC_Init>
 8009b12:	4603      	mov	r3, r0
 8009b14:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b16:	7bfb      	ldrb	r3, [r7, #15]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f000 f8bd 	bl	8009c98 <USBH_Get_USB_Status>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b22:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd90      	pop	{r4, r7, pc}

08009b2c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	460b      	mov	r3, r1
 8009b36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b46:	78fa      	ldrb	r2, [r7, #3]
 8009b48:	4611      	mov	r1, r2
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7f8 fc72 	bl	8002434 <HAL_HCD_HC_Halt>
 8009b50:	4603      	mov	r3, r0
 8009b52:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f000 f89e 	bl	8009c98 <USBH_Get_USB_Status>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009b6a:	b590      	push	{r4, r7, lr}
 8009b6c:	b089      	sub	sp, #36	; 0x24
 8009b6e:	af04      	add	r7, sp, #16
 8009b70:	6078      	str	r0, [r7, #4]
 8009b72:	4608      	mov	r0, r1
 8009b74:	4611      	mov	r1, r2
 8009b76:	461a      	mov	r2, r3
 8009b78:	4603      	mov	r3, r0
 8009b7a:	70fb      	strb	r3, [r7, #3]
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	70bb      	strb	r3, [r7, #2]
 8009b80:	4613      	mov	r3, r2
 8009b82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b84:	2300      	movs	r3, #0
 8009b86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009b92:	787c      	ldrb	r4, [r7, #1]
 8009b94:	78ba      	ldrb	r2, [r7, #2]
 8009b96:	78f9      	ldrb	r1, [r7, #3]
 8009b98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009b9c:	9303      	str	r3, [sp, #12]
 8009b9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ba0:	9302      	str	r3, [sp, #8]
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	9301      	str	r3, [sp, #4]
 8009ba6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	4623      	mov	r3, r4
 8009bae:	f7f8 fc65 	bl	800247c <HAL_HCD_HC_SubmitRequest>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 f86d 	bl	8009c98 <USBH_Get_USB_Status>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3714      	adds	r7, #20
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd90      	pop	{r4, r7, pc}

08009bcc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009bde:	78fa      	ldrb	r2, [r7, #3]
 8009be0:	4611      	mov	r1, r2
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7f8 fef9 	bl	80029da <HAL_HCD_HC_GetURBState>
 8009be8:	4603      	mov	r3, r0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b082      	sub	sp, #8
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d103      	bne.n	8009c10 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009c08:	78fb      	ldrb	r3, [r7, #3]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 f870 	bl	8009cf0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009c10:	20c8      	movs	r0, #200	; 0xc8
 8009c12:	f7f8 f833 	bl	8001c7c <HAL_Delay>
  return USBH_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	70fb      	strb	r3, [r7, #3]
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c36:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	212c      	movs	r1, #44	; 0x2c
 8009c3e:	fb01 f303 	mul.w	r3, r1, r3
 8009c42:	4413      	add	r3, r2
 8009c44:	333b      	adds	r3, #59	; 0x3b
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d009      	beq.n	8009c60 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009c4c:	78fb      	ldrb	r3, [r7, #3]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	212c      	movs	r1, #44	; 0x2c
 8009c52:	fb01 f303 	mul.w	r3, r1, r3
 8009c56:	4413      	add	r3, r2
 8009c58:	3354      	adds	r3, #84	; 0x54
 8009c5a:	78ba      	ldrb	r2, [r7, #2]
 8009c5c:	701a      	strb	r2, [r3, #0]
 8009c5e:	e008      	b.n	8009c72 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009c60:	78fb      	ldrb	r3, [r7, #3]
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	212c      	movs	r1, #44	; 0x2c
 8009c66:	fb01 f303 	mul.w	r3, r1, r3
 8009c6a:	4413      	add	r3, r2
 8009c6c:	3355      	adds	r3, #85	; 0x55
 8009c6e:	78ba      	ldrb	r2, [r7, #2]
 8009c70:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f7f7 fff7 	bl	8001c7c <HAL_Delay>
}
 8009c8e:	bf00      	nop
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
	...

08009c98 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ca6:	79fb      	ldrb	r3, [r7, #7]
 8009ca8:	2b03      	cmp	r3, #3
 8009caa:	d817      	bhi.n	8009cdc <USBH_Get_USB_Status+0x44>
 8009cac:	a201      	add	r2, pc, #4	; (adr r2, 8009cb4 <USBH_Get_USB_Status+0x1c>)
 8009cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb2:	bf00      	nop
 8009cb4:	08009cc5 	.word	0x08009cc5
 8009cb8:	08009ccb 	.word	0x08009ccb
 8009cbc:	08009cd1 	.word	0x08009cd1
 8009cc0:	08009cd7 	.word	0x08009cd7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8009cc8:	e00b      	b.n	8009ce2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009cca:	2302      	movs	r3, #2
 8009ccc:	73fb      	strb	r3, [r7, #15]
    break;
 8009cce:	e008      	b.n	8009ce2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8009cd4:	e005      	b.n	8009ce2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009cd6:	2302      	movs	r3, #2
 8009cd8:	73fb      	strb	r3, [r7, #15]
    break;
 8009cda:	e002      	b.n	8009ce2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009cdc:	2302      	movs	r3, #2
 8009cde:	73fb      	strb	r3, [r7, #15]
    break;
 8009ce0:	bf00      	nop
  }
  return usb_status;
 8009ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3714      	adds	r7, #20
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009cfa:	79fb      	ldrb	r3, [r7, #7]
 8009cfc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009cfe:	79fb      	ldrb	r3, [r7, #7]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d102      	bne.n	8009d0a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009d04:	2300      	movs	r3, #0
 8009d06:	73fb      	strb	r3, [r7, #15]
 8009d08:	e001      	b.n	8009d0e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009d0e:	7bfb      	ldrb	r3, [r7, #15]
 8009d10:	461a      	mov	r2, r3
 8009d12:	2101      	movs	r1, #1
 8009d14:	4803      	ldr	r0, [pc, #12]	; (8009d24 <MX_DriverVbusFS+0x34>)
 8009d16:	f7f8 fa83 	bl	8002220 <HAL_GPIO_WritePin>
}
 8009d1a:	bf00      	nop
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	40020800 	.word	0x40020800

08009d28 <funchad110.constprop.0>:
 8009d28:	4288      	cmp	r0, r1
 8009d2a:	d300      	bcc.n	8009d2e <funchad110.constprop.0+0x6>
 8009d2c:	4770      	bx	lr
 8009d2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d32:	1843      	adds	r3, r0, r1
 8009d34:	085f      	lsrs	r7, r3, #1
 8009d36:	1c7c      	adds	r4, r7, #1
 8009d38:	460e      	mov	r6, r1
 8009d3a:	b2a4      	uxth	r4, r4
 8009d3c:	4639      	mov	r1, r7
 8009d3e:	ea4f 0863 	mov.w	r8, r3, asr #1
 8009d42:	4605      	mov	r5, r0
 8009d44:	f7ff fff0 	bl	8009d28 <funchad110.constprop.0>
 8009d48:	4631      	mov	r1, r6
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f7ff ffec 	bl	8009d28 <funchad110.constprop.0>
 8009d50:	493e      	ldr	r1, [pc, #248]	; (8009e4c <funchad110.constprop.0+0x124>)
 8009d52:	eb01 0388 	add.w	r3, r1, r8, lsl #2
 8009d56:	ed93 7a00 	vldr	s14, [r3]
 8009d5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8009d5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d66:	dc01      	bgt.n	8009d6c <funchad110.constprop.0+0x44>
 8009d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d6c:	42bd      	cmp	r5, r7
 8009d6e:	d864      	bhi.n	8009e3a <funchad110.constprop.0+0x112>
 8009d70:	42a6      	cmp	r6, r4
 8009d72:	d366      	bcc.n	8009e42 <funchad110.constprop.0+0x11a>
 8009d74:	4836      	ldr	r0, [pc, #216]	; (8009e50 <funchad110.constprop.0+0x128>)
 8009d76:	46ac      	mov	ip, r5
 8009d78:	f04f 0e00 	mov.w	lr, #0
 8009d7c:	e00b      	b.n	8009d96 <funchad110.constprop.0+0x6e>
 8009d7e:	fa1f fc89 	uxth.w	ip, r9
 8009d82:	fa1f f388 	uxth.w	r3, r8
 8009d86:	ed82 7a00 	vstr	s14, [r2]
 8009d8a:	4567      	cmp	r7, ip
 8009d8c:	f10e 0e01 	add.w	lr, lr, #1
 8009d90:	d32d      	bcc.n	8009dee <funchad110.constprop.0+0xc6>
 8009d92:	42a6      	cmp	r6, r4
 8009d94:	d32f      	bcc.n	8009df6 <funchad110.constprop.0+0xce>
 8009d96:	eb01 028c 	add.w	r2, r1, ip, lsl #2
 8009d9a:	eb01 0384 	add.w	r3, r1, r4, lsl #2
 8009d9e:	ed92 7a00 	vldr	s14, [r2]
 8009da2:	edd3 7a00 	vldr	s15, [r3]
 8009da6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009daa:	fa1f f38e 	uxth.w	r3, lr
 8009dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db2:	f10c 0901 	add.w	r9, ip, #1
 8009db6:	f103 0801 	add.w	r8, r3, #1
 8009dba:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8009dbe:	d4de      	bmi.n	8009d7e <funchad110.constprop.0+0x56>
 8009dc0:	fa1f f28e 	uxth.w	r2, lr
 8009dc4:	3401      	adds	r4, #1
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009dcc:	b2a4      	uxth	r4, r4
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	edc2 7a00 	vstr	s15, [r2]
 8009dd4:	e7d9      	b.n	8009d8a <funchad110.constprop.0+0x62>
 8009dd6:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 8009dda:	3401      	adds	r4, #1
 8009ddc:	f8d2 e000 	ldr.w	lr, [r2]
 8009de0:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8009de4:	3301      	adds	r3, #1
 8009de6:	b2a4      	uxth	r4, r4
 8009de8:	f8c2 e000 	str.w	lr, [r2]
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	42a6      	cmp	r6, r4
 8009df0:	d2f1      	bcs.n	8009dd6 <funchad110.constprop.0+0xae>
 8009df2:	4567      	cmp	r7, ip
 8009df4:	d311      	bcc.n	8009e1a <funchad110.constprop.0+0xf2>
 8009df6:	eba3 030c 	sub.w	r3, r3, ip
 8009dfa:	4664      	mov	r4, ip
 8009dfc:	18e2      	adds	r2, r4, r3
 8009dfe:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8009e02:	b292      	uxth	r2, r2
 8009e04:	3401      	adds	r4, #1
 8009e06:	f8dc e000 	ldr.w	lr, [ip]
 8009e0a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009e0e:	fa1f fc84 	uxth.w	ip, r4
 8009e12:	4567      	cmp	r7, ip
 8009e14:	f8c2 e000 	str.w	lr, [r2]
 8009e18:	d2ef      	bcs.n	8009dfa <funchad110.constprop.0+0xd2>
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	b293      	uxth	r3, r2
 8009e1e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009e22:	1c6f      	adds	r7, r5, #1
 8009e24:	681c      	ldr	r4, [r3, #0]
 8009e26:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8009e2a:	b2bd      	uxth	r5, r7
 8009e2c:	42ae      	cmp	r6, r5
 8009e2e:	f102 0201 	add.w	r2, r2, #1
 8009e32:	601c      	str	r4, [r3, #0]
 8009e34:	d2f2      	bcs.n	8009e1c <funchad110.constprop.0+0xf4>
 8009e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e3a:	4805      	ldr	r0, [pc, #20]	; (8009e50 <funchad110.constprop.0+0x128>)
 8009e3c:	46ac      	mov	ip, r5
 8009e3e:	2300      	movs	r3, #0
 8009e40:	e7d5      	b.n	8009dee <funchad110.constprop.0+0xc6>
 8009e42:	4803      	ldr	r0, [pc, #12]	; (8009e50 <funchad110.constprop.0+0x128>)
 8009e44:	46ac      	mov	ip, r5
 8009e46:	2300      	movs	r3, #0
 8009e48:	e7d5      	b.n	8009df6 <funchad110.constprop.0+0xce>
 8009e4a:	bf00      	nop
 8009e4c:	20001328 	.word	0x20001328
 8009e50:	20001428 	.word	0x20001428

08009e54 <funchad14.constprop.0>:
 8009e54:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8009f5c <funchad14.constprop.0+0x108>
 8009e58:	b4f0      	push	{r4, r5, r6, r7}
 8009e5a:	ed80 6a00 	vstr	s12, [r0]
 8009e5e:	4d40      	ldr	r5, [pc, #256]	; (8009f60 <funchad14.constprop.0+0x10c>)
 8009e60:	ed81 6a00 	vstr	s12, [r1]
 8009e64:	462a      	mov	r2, r5
 8009e66:	f04f 0300 	mov.w	r3, #0
 8009e6a:	2a00      	cmp	r2, #0
 8009e6c:	d007      	beq.n	8009e7e <funchad14.constprop.0+0x2a>
 8009e6e:	f1a2 0401 	sub.w	r4, r2, #1
 8009e72:	ea02 0204 	and.w	r2, r2, r4
 8009e76:	f103 0301 	add.w	r3, r3, #1
 8009e7a:	2a00      	cmp	r2, #0
 8009e7c:	d1f7      	bne.n	8009e6e <funchad14.constprop.0+0x1a>
 8009e7e:	2b20      	cmp	r3, #32
 8009e80:	bfcc      	ite	gt
 8009e82:	2300      	movgt	r3, #0
 8009e84:	2301      	movle	r3, #1
 8009e86:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 8009e8a:	eba2 0203 	sub.w	r2, r2, r3
 8009e8e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8009e92:	eba2 0203 	sub.w	r2, r2, r3
 8009e96:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8009e9a:	441a      	add	r2, r3
 8009e9c:	ea4f 22c2 	mov.w	r2, r2, lsl #11
 8009ea0:	441a      	add	r2, r3
 8009ea2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8009ea6:	eba2 0203 	sub.w	r2, r2, r3
 8009eaa:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8009eae:	ea6f 0202 	mvn.w	r2, r2
 8009eb2:	ba12      	rev	r2, r2
 8009eb4:	8996      	ldrh	r6, [r2, #12]
 8009eb6:	4c2b      	ldr	r4, [pc, #172]	; (8009f64 <funchad14.constprop.0+0x110>)
 8009eb8:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8009f68 <funchad14.constprop.0+0x114>
 8009ebc:	1133      	asrs	r3, r6, #4
 8009ebe:	f006 060f 	and.w	r6, r6, #15
 8009ec2:	ebc3 7783 	rsb	r7, r3, r3, lsl #30
 8009ec6:	ebc6 7286 	rsb	r2, r6, r6, lsl #30
 8009eca:	ebc3 0787 	rsb	r7, r3, r7, lsl #2
 8009ece:	ebc6 0282 	rsb	r2, r6, r2, lsl #2
 8009ed2:	fb03 7303 	mla	r3, r3, r3, r7
 8009ed6:	fb06 2606 	mla	r6, r6, r6, r2
 8009eda:	441e      	add	r6, r3
 8009edc:	3e32      	subs	r6, #50	; 0x32
 8009ede:	f06f 0703 	mvn.w	r7, #3
 8009ee2:	442e      	add	r6, r5
 8009ee4:	1b3f      	subs	r7, r7, r4
 8009ee6:	3590      	adds	r5, #144	; 0x90
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e024      	b.n	8009f36 <funchad14.constprop.0+0xe2>
 8009eec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009ef0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef8:	bf48      	it	mi
 8009efa:	eeb1 7a47 	vnegmi.f32	s14, s14
 8009efe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009f02:	eef4 7ac6 	vcmpe.f32	s15, s12
 8009f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f0a:	bfc8      	it	gt
 8009f0c:	edc1 7a00 	vstrgt	s15, [r1]
 8009f10:	edd0 6a00 	vldr	s13, [r0]
 8009f14:	ee07 3a10 	vmov	s14, r3
 8009f18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009f1c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8009f20:	3301      	adds	r3, #1
 8009f22:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8009f26:	2b25      	cmp	r3, #37	; 0x25
 8009f28:	ee77 7a26 	vadd.f32	s15, s14, s13
 8009f2c:	edc0 7a00 	vstr	s15, [r0]
 8009f30:	d011      	beq.n	8009f56 <funchad14.constprop.0+0x102>
 8009f32:	ed91 6a00 	vldr	s12, [r1]
 8009f36:	ecb4 7a01 	vldmia	r4!, {s14}
 8009f3a:	ecf5 7a01 	vldmia	r5!, {s15}
 8009f3e:	1932      	adds	r2, r6, r4
 8009f40:	443a      	add	r2, r7
 8009f42:	edd2 6a00 	vldr	s13, [r2]
 8009f46:	eef5 6a40 	vcmp.f32	s13, #0.0
 8009f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f4e:	d1cd      	bne.n	8009eec <funchad14.constprop.0+0x98>
 8009f50:	eef0 7a65 	vmov.f32	s15, s11
 8009f54:	e7d5      	b.n	8009f02 <funchad14.constprop.0+0xae>
 8009f56:	bcf0      	pop	{r4, r5, r6, r7}
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	00000000 	.word	0x00000000
 8009f60:	200000ac 	.word	0x200000ac
 8009f64:	20001528 	.word	0x20001528
 8009f68:	42c80000 	.word	0x42c80000

08009f6c <funchad35.constprop.0>:
 8009f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f70:	ed2d 8b0a 	vpush	{d8-d12}
 8009f74:	b085      	sub	sp, #20
 8009f76:	2300      	movs	r3, #0
 8009f78:	f8df b380 	ldr.w	fp, [pc, #896]	; 800a2fc <funchad35.constprop.0+0x390>
 8009f7c:	4cd8      	ldr	r4, [pc, #864]	; (800a2e0 <funchad35.constprop.0+0x374>)
 8009f7e:	eddf 9ad9 	vldr	s19, [pc, #868]	; 800a2e4 <funchad35.constprop.0+0x378>
 8009f82:	ed9f 8ad9 	vldr	s16, [pc, #868]	; 800a2e8 <funchad35.constprop.0+0x37c>
 8009f86:	9002      	str	r0, [sp, #8]
 8009f88:	9301      	str	r3, [sp, #4]
 8009f8a:	4fd8      	ldr	r7, [pc, #864]	; (800a2ec <funchad35.constprop.0+0x380>)
 8009f8c:	9a02      	ldr	r2, [sp, #8]
 8009f8e:	463b      	mov	r3, r7
 8009f90:	f852 1b18 	ldr.w	r1, [r2], #24
 8009f94:	f843 1b04 	str.w	r1, [r3], #4
 8009f98:	429c      	cmp	r4, r3
 8009f9a:	d1f9      	bne.n	8009f90 <funchad35.constprop.0+0x24>
 8009f9c:	f89b 3006 	ldrb.w	r3, [fp, #6]
 8009fa0:	2b05      	cmp	r3, #5
 8009fa2:	d817      	bhi.n	8009fd4 <funchad35.constprop.0+0x68>
 8009fa4:	9901      	ldr	r1, [sp, #4]
 8009fa6:	4fd1      	ldr	r7, [pc, #836]	; (800a2ec <funchad35.constprop.0+0x380>)
 8009fa8:	2206      	movs	r2, #6
 8009faa:	fb12 1203 	smlabb	r2, r2, r3, r1
 8009fae:	4bd0      	ldr	r3, [pc, #832]	; (800a2f0 <funchad35.constprop.0+0x384>)
 8009fb0:	edd7 7a00 	vldr	s15, [r7]
 8009fb4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009fb8:	463b      	mov	r3, r7
 8009fba:	ecb3 7a01 	vldmia	r3!, {s14}
 8009fbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fc6:	bfd8      	it	le
 8009fc8:	eef0 7a47 	vmovle.f32	s15, s14
 8009fcc:	429c      	cmp	r4, r3
 8009fce:	d1f4      	bne.n	8009fba <funchad35.constprop.0+0x4e>
 8009fd0:	edc2 7a00 	vstr	s15, [r2]
 8009fd4:	f89b 3007 	ldrb.w	r3, [fp, #7]
 8009fd8:	2b05      	cmp	r3, #5
 8009fda:	d817      	bhi.n	800a00c <funchad35.constprop.0+0xa0>
 8009fdc:	9901      	ldr	r1, [sp, #4]
 8009fde:	edd7 7a00 	vldr	s15, [r7]
 8009fe2:	4fc2      	ldr	r7, [pc, #776]	; (800a2ec <funchad35.constprop.0+0x380>)
 8009fe4:	2206      	movs	r2, #6
 8009fe6:	fb12 1203 	smlabb	r2, r2, r3, r1
 8009fea:	4bc1      	ldr	r3, [pc, #772]	; (800a2f0 <funchad35.constprop.0+0x384>)
 8009fec:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009ff0:	463b      	mov	r3, r7
 8009ff2:	ecb3 7a01 	vldmia	r3!, {s14}
 8009ff6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ffe:	bf58      	it	pl
 800a000:	eef0 7a47 	vmovpl.f32	s15, s14
 800a004:	429c      	cmp	r4, r3
 800a006:	d1f4      	bne.n	8009ff2 <funchad35.constprop.0+0x86>
 800a008:	edc2 7a00 	vstr	s15, [r2]
 800a00c:	f89b 3009 	ldrb.w	r3, [fp, #9]
 800a010:	2b05      	cmp	r3, #5
 800a012:	d827      	bhi.n	800a064 <funchad35.constprop.0+0xf8>
 800a014:	9901      	ldr	r1, [sp, #4]
 800a016:	ed97 7a00 	vldr	s14, [r7]
 800a01a:	4fb4      	ldr	r7, [pc, #720]	; (800a2ec <funchad35.constprop.0+0x380>)
 800a01c:	2206      	movs	r2, #6
 800a01e:	fb12 1203 	smlabb	r2, r2, r3, r1
 800a022:	4bb3      	ldr	r3, [pc, #716]	; (800a2f0 <funchad35.constprop.0+0x384>)
 800a024:	eef0 7a47 	vmov.f32	s15, s14
 800a028:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a02c:	463b      	mov	r3, r7
 800a02e:	ecf3 6a01 	vldmia	r3!, {s13}
 800a032:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a03a:	bf58      	it	pl
 800a03c:	eef0 7a66 	vmovpl.f32	s15, s13
 800a040:	429c      	cmp	r4, r3
 800a042:	d1f4      	bne.n	800a02e <funchad35.constprop.0+0xc2>
 800a044:	4ba9      	ldr	r3, [pc, #676]	; (800a2ec <funchad35.constprop.0+0x380>)
 800a046:	ecf3 6a01 	vldmia	r3!, {s13}
 800a04a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a052:	bfd8      	it	le
 800a054:	eeb0 7a66 	vmovle.f32	s14, s13
 800a058:	429c      	cmp	r4, r3
 800a05a:	d1f4      	bne.n	800a046 <funchad35.constprop.0+0xda>
 800a05c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a060:	edc2 7a00 	vstr	s15, [r2]
 800a064:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800a068:	2b05      	cmp	r3, #5
 800a06a:	d830      	bhi.n	800a0ce <funchad35.constprop.0+0x162>
 800a06c:	9901      	ldr	r1, [sp, #4]
 800a06e:	edd7 7a00 	vldr	s15, [r7]
 800a072:	4f9e      	ldr	r7, [pc, #632]	; (800a2ec <funchad35.constprop.0+0x380>)
 800a074:	2206      	movs	r2, #6
 800a076:	fb12 1203 	smlabb	r2, r2, r3, r1
 800a07a:	4b9d      	ldr	r3, [pc, #628]	; (800a2f0 <funchad35.constprop.0+0x384>)
 800a07c:	eeb0 7a67 	vmov.f32	s14, s15
 800a080:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a084:	463b      	mov	r3, r7
 800a086:	ecf3 6a01 	vldmia	r3!, {s13}
 800a08a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a092:	bfd8      	it	le
 800a094:	eeb0 7a66 	vmovle.f32	s14, s13
 800a098:	429c      	cmp	r4, r3
 800a09a:	d1f4      	bne.n	800a086 <funchad35.constprop.0+0x11a>
 800a09c:	4b93      	ldr	r3, [pc, #588]	; (800a2ec <funchad35.constprop.0+0x380>)
 800a09e:	eeb0 7ac7 	vabs.f32	s14, s14
 800a0a2:	ecf3 6a01 	vldmia	r3!, {s13}
 800a0a6:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ae:	bf58      	it	pl
 800a0b0:	eef0 7a66 	vmovpl.f32	s15, s13
 800a0b4:	429c      	cmp	r4, r3
 800a0b6:	d1f4      	bne.n	800a0a2 <funchad35.constprop.0+0x136>
 800a0b8:	eef0 7ae7 	vabs.f32	s15, s15
 800a0bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c4:	bf58      	it	pl
 800a0c6:	eef0 7a47 	vmovpl.f32	s15, s14
 800a0ca:	edc2 7a00 	vstr	s15, [r2]
 800a0ce:	f89b 3005 	ldrb.w	r3, [fp, #5]
 800a0d2:	2b05      	cmp	r3, #5
 800a0d4:	d813      	bhi.n	800a0fe <funchad35.constprop.0+0x192>
 800a0d6:	9901      	ldr	r1, [sp, #4]
 800a0d8:	edd7 7a00 	vldr	s15, [r7]
 800a0dc:	2206      	movs	r2, #6
 800a0de:	fb12 1203 	smlabb	r2, r2, r3, r1
 800a0e2:	4983      	ldr	r1, [pc, #524]	; (800a2f0 <funchad35.constprop.0+0x384>)
 800a0e4:	4b83      	ldr	r3, [pc, #524]	; (800a2f4 <funchad35.constprop.0+0x388>)
 800a0e6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800a0ea:	ecb3 7a01 	vldmia	r3!, {s14}
 800a0ee:	429c      	cmp	r4, r3
 800a0f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a0f4:	d1f9      	bne.n	800a0ea <funchad35.constprop.0+0x17e>
 800a0f6:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800a0fa:	edc2 7a00 	vstr	s15, [r2]
 800a0fe:	f89b 200b 	ldrb.w	r2, [fp, #11]
 800a102:	2a05      	cmp	r2, #5
 800a104:	d824      	bhi.n	800a150 <funchad35.constprop.0+0x1e4>
 800a106:	9801      	ldr	r0, [sp, #4]
 800a108:	edd7 6a00 	vldr	s13, [r7]
 800a10c:	4b79      	ldr	r3, [pc, #484]	; (800a2f4 <funchad35.constprop.0+0x388>)
 800a10e:	2106      	movs	r1, #6
 800a110:	fb11 0102 	smlabb	r1, r1, r2, r0
 800a114:	4a76      	ldr	r2, [pc, #472]	; (800a2f0 <funchad35.constprop.0+0x384>)
 800a116:	eef0 7a66 	vmov.f32	s15, s13
 800a11a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a11e:	461a      	mov	r2, r3
 800a120:	ecb2 7a01 	vldmia	r2!, {s14}
 800a124:	4294      	cmp	r4, r2
 800a126:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a12a:	d1f9      	bne.n	800a120 <funchad35.constprop.0+0x1b4>
 800a12c:	ee27 7aa9 	vmul.f32	s14, s15, s19
 800a130:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800a134:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800a138:	ecf3 7a01 	vldmia	r3!, {s15}
 800a13c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a140:	429c      	cmp	r4, r3
 800a142:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800a146:	d1f7      	bne.n	800a138 <funchad35.constprop.0+0x1cc>
 800a148:	ee66 6aa9 	vmul.f32	s13, s13, s19
 800a14c:	edc1 6a00 	vstr	s13, [r1]
 800a150:	f89b 200a 	ldrb.w	r2, [fp, #10]
 800a154:	2a05      	cmp	r2, #5
 800a156:	f240 8685 	bls.w	800ae64 <funchad35.constprop.0+0xef8>
 800a15a:	f89b 300f 	ldrb.w	r3, [fp, #15]
 800a15e:	2b05      	cmp	r3, #5
 800a160:	f240 862d 	bls.w	800adbe <funchad35.constprop.0+0xe52>
 800a164:	f89b 300e 	ldrb.w	r3, [fp, #14]
 800a168:	2b05      	cmp	r3, #5
 800a16a:	f240 85cb 	bls.w	800ad04 <funchad35.constprop.0+0xd98>
 800a16e:	f89b 0014 	ldrb.w	r0, [fp, #20]
 800a172:	2805      	cmp	r0, #5
 800a174:	d840      	bhi.n	800a1f8 <funchad35.constprop.0+0x28c>
 800a176:	edd7 7a00 	vldr	s15, [r7]
 800a17a:	4f5c      	ldr	r7, [pc, #368]	; (800a2ec <funchad35.constprop.0+0x380>)
 800a17c:	2200      	movs	r2, #0
 800a17e:	4639      	mov	r1, r7
 800a180:	2301      	movs	r3, #1
 800a182:	ed91 7a01 	vldr	s14, [r1, #4]
 800a186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a18a:	3302      	adds	r3, #2
 800a18c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a190:	edd1 7a02 	vldr	s15, [r1, #8]
 800a194:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a19c:	bf48      	it	mi
 800a19e:	3201      	addmi	r2, #1
 800a1a0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a1a4:	bf48      	it	mi
 800a1a6:	b292      	uxthmi	r2, r2
 800a1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ac:	bf48      	it	mi
 800a1ae:	3201      	addmi	r2, #1
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	bf48      	it	mi
 800a1b4:	b292      	uxthmi	r2, r2
 800a1b6:	2b3f      	cmp	r3, #63	; 0x3f
 800a1b8:	f101 0108 	add.w	r1, r1, #8
 800a1bc:	d1e1      	bne.n	800a182 <funchad35.constprop.0+0x216>
 800a1be:	4b4e      	ldr	r3, [pc, #312]	; (800a2f8 <funchad35.constprop.0+0x38c>)
 800a1c0:	ecf3 7a01 	vldmia	r3!, {s15}
 800a1c4:	ed13 7a02 	vldr	s14, [r3, #-8]
 800a1c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1cc:	1c51      	adds	r1, r2, #1
 800a1ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1d6:	bf48      	it	mi
 800a1d8:	b28a      	uxthmi	r2, r1
 800a1da:	429c      	cmp	r4, r3
 800a1dc:	d1f0      	bne.n	800a1c0 <funchad35.constprop.0+0x254>
 800a1de:	ee07 2a90 	vmov	s15, r2
 800a1e2:	9901      	ldr	r1, [sp, #4]
 800a1e4:	4a42      	ldr	r2, [pc, #264]	; (800a2f0 <funchad35.constprop.0+0x384>)
 800a1e6:	2306      	movs	r3, #6
 800a1e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ec:	fb13 1300 	smlabb	r3, r3, r0, r1
 800a1f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a1f4:	edc3 7a00 	vstr	s15, [r3]
 800a1f8:	f89b 0015 	ldrb.w	r0, [fp, #21]
 800a1fc:	2805      	cmp	r0, #5
 800a1fe:	d853      	bhi.n	800a2a8 <funchad35.constprop.0+0x33c>
 800a200:	edd7 6a00 	vldr	s13, [r7]
 800a204:	4b3b      	ldr	r3, [pc, #236]	; (800a2f4 <funchad35.constprop.0+0x388>)
 800a206:	eeb0 7a66 	vmov.f32	s14, s13
 800a20a:	ecf3 7a01 	vldmia	r3!, {s15}
 800a20e:	429c      	cmp	r4, r3
 800a210:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a214:	d1f9      	bne.n	800a20a <funchad35.constprop.0+0x29e>
 800a216:	ee27 7a29 	vmul.f32	s14, s14, s19
 800a21a:	4934      	ldr	r1, [pc, #208]	; (800a2ec <funchad35.constprop.0+0x380>)
 800a21c:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800a220:	2200      	movs	r2, #0
 800a222:	2301      	movs	r3, #1
 800a224:	edd1 6a01 	vldr	s13, [r1, #4]
 800a228:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800a22c:	3302      	adds	r3, #2
 800a22e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a232:	b29b      	uxth	r3, r3
 800a234:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a238:	edd1 7a02 	vldr	s15, [r1, #8]
 800a23c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a244:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a248:	bf44      	itt	mi
 800a24a:	3201      	addmi	r2, #1
 800a24c:	b292      	uxthmi	r2, r2
 800a24e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a256:	f102 0501 	add.w	r5, r2, #1
 800a25a:	bf48      	it	mi
 800a25c:	b2aa      	uxthmi	r2, r5
 800a25e:	2b3f      	cmp	r3, #63	; 0x3f
 800a260:	f101 0108 	add.w	r1, r1, #8
 800a264:	d1de      	bne.n	800a224 <funchad35.constprop.0+0x2b8>
 800a266:	4b24      	ldr	r3, [pc, #144]	; (800a2f8 <funchad35.constprop.0+0x38c>)
 800a268:	ecf3 6a01 	vldmia	r3!, {s13}
 800a26c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a270:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800a274:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a278:	1c51      	adds	r1, r2, #1
 800a27a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a27e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a286:	bf48      	it	mi
 800a288:	b28a      	uxthmi	r2, r1
 800a28a:	429c      	cmp	r4, r3
 800a28c:	d1ec      	bne.n	800a268 <funchad35.constprop.0+0x2fc>
 800a28e:	ee07 2a90 	vmov	s15, r2
 800a292:	9901      	ldr	r1, [sp, #4]
 800a294:	4a16      	ldr	r2, [pc, #88]	; (800a2f0 <funchad35.constprop.0+0x384>)
 800a296:	2306      	movs	r3, #6
 800a298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a29c:	fb13 1300 	smlabb	r3, r3, r0, r1
 800a2a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a2a4:	edc3 7a00 	vstr	s15, [r3]
 800a2a8:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800a2ac:	2a05      	cmp	r2, #5
 800a2ae:	f240 8509 	bls.w	800acc4 <funchad35.constprop.0+0xd58>
 800a2b2:	f89b 2012 	ldrb.w	r2, [fp, #18]
 800a2b6:	2a05      	cmp	r2, #5
 800a2b8:	f240 84d5 	bls.w	800ac66 <funchad35.constprop.0+0xcfa>
 800a2bc:	f89b 1011 	ldrb.w	r1, [fp, #17]
 800a2c0:	2905      	cmp	r1, #5
 800a2c2:	d850      	bhi.n	800a366 <funchad35.constprop.0+0x3fa>
 800a2c4:	9801      	ldr	r0, [sp, #4]
 800a2c6:	edd7 7a00 	vldr	s15, [r7]
 800a2ca:	4b0a      	ldr	r3, [pc, #40]	; (800a2f4 <funchad35.constprop.0+0x388>)
 800a2cc:	2206      	movs	r2, #6
 800a2ce:	fb12 0201 	smlabb	r2, r2, r1, r0
 800a2d2:	4907      	ldr	r1, [pc, #28]	; (800a2f0 <funchad35.constprop.0+0x384>)
 800a2d4:	eef0 6ae7 	vabs.f32	s13, s15
 800a2d8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800a2dc:	e010      	b.n	800a300 <funchad35.constprop.0+0x394>
 800a2de:	bf00      	nop
 800a2e0:	20001428 	.word	0x20001428
 800a2e4:	3c800000 	.word	0x3c800000
 800a2e8:	3f599980 	.word	0x3f599980
 800a2ec:	20001328 	.word	0x20001328
 800a2f0:	200010a0 	.word	0x200010a0
 800a2f4:	2000132c 	.word	0x2000132c
 800a2f8:	20001424 	.word	0x20001424
 800a2fc:	2000002c 	.word	0x2000002c
 800a300:	ecb3 7a01 	vldmia	r3!, {s14}
 800a304:	eeb0 7ac7 	vabs.f32	s14, s14
 800a308:	429c      	cmp	r4, r3
 800a30a:	ee76 6a87 	vadd.f32	s13, s13, s14
 800a30e:	d1f7      	bne.n	800a300 <funchad35.constprop.0+0x394>
 800a310:	ee26 6aa9 	vmul.f32	s12, s13, s19
 800a314:	4bd7      	ldr	r3, [pc, #860]	; (800a674 <funchad35.constprop.0+0x708>)
 800a316:	eeb0 7a67 	vmov.f32	s14, s15
 800a31a:	ecf3 6a01 	vldmia	r3!, {s13}
 800a31e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a326:	bfd8      	it	le
 800a328:	eeb0 7a66 	vmovle.f32	s14, s13
 800a32c:	429c      	cmp	r4, r3
 800a32e:	d1f4      	bne.n	800a31a <funchad35.constprop.0+0x3ae>
 800a330:	4bd0      	ldr	r3, [pc, #832]	; (800a674 <funchad35.constprop.0+0x708>)
 800a332:	eeb0 7ac7 	vabs.f32	s14, s14
 800a336:	ecf3 6a01 	vldmia	r3!, {s13}
 800a33a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a342:	bf58      	it	pl
 800a344:	eef0 7a66 	vmovpl.f32	s15, s13
 800a348:	429c      	cmp	r4, r3
 800a34a:	d1f4      	bne.n	800a336 <funchad35.constprop.0+0x3ca>
 800a34c:	eef0 7ae7 	vabs.f32	s15, s15
 800a350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a358:	bf58      	it	pl
 800a35a:	eef0 7a47 	vmovpl.f32	s15, s14
 800a35e:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800a362:	ed82 7a00 	vstr	s14, [r2]
 800a366:	f89b 2010 	ldrb.w	r2, [fp, #16]
 800a36a:	2a05      	cmp	r2, #5
 800a36c:	f240 8431 	bls.w	800abd2 <funchad35.constprop.0+0xc66>
 800a370:	f89b 300d 	ldrb.w	r3, [fp, #13]
 800a374:	2b05      	cmp	r3, #5
 800a376:	f240 83e2 	bls.w	800ab3e <funchad35.constprop.0+0xbd2>
 800a37a:	f89b 3013 	ldrb.w	r3, [fp, #19]
 800a37e:	2b05      	cmp	r3, #5
 800a380:	d836      	bhi.n	800a3f0 <funchad35.constprop.0+0x484>
 800a382:	ed97 6a01 	vldr	s12, [r7, #4]
 800a386:	ed97 7a00 	vldr	s14, [r7]
 800a38a:	9901      	ldr	r1, [sp, #4]
 800a38c:	4fb9      	ldr	r7, [pc, #740]	; (800a674 <funchad35.constprop.0+0x708>)
 800a38e:	2206      	movs	r2, #6
 800a390:	fb12 1203 	smlabb	r2, r2, r3, r1
 800a394:	ee36 7a47 	vsub.f32	s14, s12, s14
 800a398:	4bb7      	ldr	r3, [pc, #732]	; (800a678 <funchad35.constprop.0+0x70c>)
 800a39a:	eeb0 7ac7 	vabs.f32	s14, s14
 800a39e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a3a2:	4639      	mov	r1, r7
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	edd1 6a02 	vldr	s13, [r1, #8]
 800a3aa:	ee76 7ac6 	vsub.f32	s15, s13, s12
 800a3ae:	ed91 6a03 	vldr	s12, [r1, #12]
 800a3b2:	eef0 7ae7 	vabs.f32	s15, s15
 800a3b6:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a3ba:	3302      	adds	r3, #2
 800a3bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	eef0 7ae6 	vabs.f32	s15, s13
 800a3c6:	2b3e      	cmp	r3, #62	; 0x3e
 800a3c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3cc:	f101 0108 	add.w	r1, r1, #8
 800a3d0:	d1e9      	bne.n	800a3a6 <funchad35.constprop.0+0x43a>
 800a3d2:	4baa      	ldr	r3, [pc, #680]	; (800a67c <funchad35.constprop.0+0x710>)
 800a3d4:	ecf3 7a01 	vldmia	r3!, {s15}
 800a3d8:	ed53 6a02 	vldr	s13, [r3, #-8]
 800a3dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a3e0:	429c      	cmp	r4, r3
 800a3e2:	eef0 7ae7 	vabs.f32	s15, s15
 800a3e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a3ea:	d1f3      	bne.n	800a3d4 <funchad35.constprop.0+0x468>
 800a3ec:	ed82 7a00 	vstr	s14, [r2]
 800a3f0:	f89b 3000 	ldrb.w	r3, [fp]
 800a3f4:	2b05      	cmp	r3, #5
 800a3f6:	d910      	bls.n	800a41a <funchad35.constprop.0+0x4ae>
 800a3f8:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800a3fc:	2b05      	cmp	r3, #5
 800a3fe:	d90c      	bls.n	800a41a <funchad35.constprop.0+0x4ae>
 800a400:	f89b 3002 	ldrb.w	r3, [fp, #2]
 800a404:	2b05      	cmp	r3, #5
 800a406:	d908      	bls.n	800a41a <funchad35.constprop.0+0x4ae>
 800a408:	f89b 3003 	ldrb.w	r3, [fp, #3]
 800a40c:	2b05      	cmp	r3, #5
 800a40e:	d904      	bls.n	800a41a <funchad35.constprop.0+0x4ae>
 800a410:	f89b 3004 	ldrb.w	r3, [fp, #4]
 800a414:	2b05      	cmp	r3, #5
 800a416:	f200 8598 	bhi.w	800af4a <funchad35.constprop.0+0xfde>
 800a41a:	213f      	movs	r1, #63	; 0x3f
 800a41c:	2000      	movs	r0, #0
 800a41e:	f7ff fc83 	bl	8009d28 <funchad110.constprop.0>
 800a422:	f89b 2000 	ldrb.w	r2, [fp]
 800a426:	2a05      	cmp	r2, #5
 800a428:	d812      	bhi.n	800a450 <funchad35.constprop.0+0x4e4>
 800a42a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a42e:	ed97 7a04 	vldr	s14, [r7, #16]
 800a432:	eddf 6a93 	vldr	s13, [pc, #588]	; 800a680 <funchad35.constprop.0+0x714>
 800a436:	9901      	ldr	r1, [sp, #4]
 800a438:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a43c:	2306      	movs	r3, #6
 800a43e:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a442:	fb13 1302 	smlabb	r3, r3, r2, r1
 800a446:	4a8c      	ldr	r2, [pc, #560]	; (800a678 <funchad35.constprop.0+0x70c>)
 800a448:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a44c:	edc3 7a00 	vstr	s15, [r3]
 800a450:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800a454:	2a05      	cmp	r2, #5
 800a456:	d812      	bhi.n	800a47e <funchad35.constprop.0+0x512>
 800a458:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a45c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a460:	9901      	ldr	r1, [sp, #4]
 800a462:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a466:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800a46a:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a46e:	2306      	movs	r3, #6
 800a470:	fb13 1302 	smlabb	r3, r3, r2, r1
 800a474:	4a80      	ldr	r2, [pc, #512]	; (800a678 <funchad35.constprop.0+0x70c>)
 800a476:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a47a:	edc3 7a00 	vstr	s15, [r3]
 800a47e:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800a482:	2a05      	cmp	r2, #5
 800a484:	d812      	bhi.n	800a4ac <funchad35.constprop.0+0x540>
 800a486:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a48a:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 800a48e:	9901      	ldr	r1, [sp, #4]
 800a490:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a494:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800a498:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a49c:	2306      	movs	r3, #6
 800a49e:	fb13 1302 	smlabb	r3, r3, r2, r1
 800a4a2:	4a75      	ldr	r2, [pc, #468]	; (800a678 <funchad35.constprop.0+0x70c>)
 800a4a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4a8:	edc3 7a00 	vstr	s15, [r3]
 800a4ac:	f89b 2003 	ldrb.w	r2, [fp, #3]
 800a4b0:	2a05      	cmp	r2, #5
 800a4b2:	d810      	bhi.n	800a4d6 <funchad35.constprop.0+0x56a>
 800a4b4:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 800a4b8:	ed97 7a3c 	vldr	s14, [r7, #240]	; 0xf0
 800a4bc:	9901      	ldr	r1, [sp, #4]
 800a4be:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a4c2:	2306      	movs	r3, #6
 800a4c4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a4c8:	fb13 1302 	smlabb	r3, r3, r2, r1
 800a4cc:	4a6a      	ldr	r2, [pc, #424]	; (800a678 <funchad35.constprop.0+0x70c>)
 800a4ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4d2:	edc3 7a00 	vstr	s15, [r3]
 800a4d6:	f89b 2004 	ldrb.w	r2, [fp, #4]
 800a4da:	2a05      	cmp	r2, #5
 800a4dc:	d812      	bhi.n	800a504 <funchad35.constprop.0+0x598>
 800a4de:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800a4e2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a4e6:	9901      	ldr	r1, [sp, #4]
 800a4e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a4ec:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a4f0:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a4f4:	2306      	movs	r3, #6
 800a4f6:	fb13 1302 	smlabb	r3, r3, r2, r1
 800a4fa:	4a5f      	ldr	r2, [pc, #380]	; (800a678 <funchad35.constprop.0+0x70c>)
 800a4fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a500:	edc3 7a00 	vstr	s15, [r3]
 800a504:	f89b 3016 	ldrb.w	r3, [fp, #22]
 800a508:	2b05      	cmp	r3, #5
 800a50a:	f240 84df 	bls.w	800aecc <funchad35.constprop.0+0xf60>
 800a50e:	4b59      	ldr	r3, [pc, #356]	; (800a674 <funchad35.constprop.0+0x708>)
 800a510:	9a02      	ldr	r2, [sp, #8]
 800a512:	f852 1b18 	ldr.w	r1, [r2], #24
 800a516:	f843 1b04 	str.w	r1, [r3], #4
 800a51a:	429c      	cmp	r4, r3
 800a51c:	d1f9      	bne.n	800a512 <funchad35.constprop.0+0x5a6>
 800a51e:	f89b 3017 	ldrb.w	r3, [fp, #23]
 800a522:	2b05      	cmp	r3, #5
 800a524:	d90c      	bls.n	800a540 <funchad35.constprop.0+0x5d4>
 800a526:	f89b 3018 	ldrb.w	r3, [fp, #24]
 800a52a:	2b05      	cmp	r3, #5
 800a52c:	d908      	bls.n	800a540 <funchad35.constprop.0+0x5d4>
 800a52e:	f89b 3019 	ldrb.w	r3, [fp, #25]
 800a532:	2b05      	cmp	r3, #5
 800a534:	d904      	bls.n	800a540 <funchad35.constprop.0+0x5d4>
 800a536:	f89b 301a 	ldrb.w	r3, [fp, #26]
 800a53a:	2b05      	cmp	r3, #5
 800a53c:	f200 8184 	bhi.w	800a848 <funchad35.constprop.0+0x8dc>
 800a540:	4e50      	ldr	r6, [pc, #320]	; (800a684 <funchad35.constprop.0+0x718>)
 800a542:	4851      	ldr	r0, [pc, #324]	; (800a688 <funchad35.constprop.0+0x71c>)
 800a544:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a548:	2100      	movs	r1, #0
 800a54a:	f001 fa71 	bl	800ba30 <memset>
 800a54e:	f106 05f8 	add.w	r5, r6, #248	; 0xf8
 800a552:	4631      	mov	r1, r6
 800a554:	2001      	movs	r0, #1
 800a556:	2220      	movs	r2, #32
 800a558:	2300      	movs	r3, #0
 800a55a:	4413      	add	r3, r2
 800a55c:	428d      	cmp	r5, r1
 800a55e:	b29b      	uxth	r3, r3
 800a560:	d01d      	beq.n	800a59e <funchad35.constprop.0+0x632>
 800a562:	b282      	uxth	r2, r0
 800a564:	429a      	cmp	r2, r3
 800a566:	d209      	bcs.n	800a57c <funchad35.constprop.0+0x610>
 800a568:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 800a56c:	f8d1 c000 	ldr.w	ip, [r1]
 800a570:	f8d2 e000 	ldr.w	lr, [r2]
 800a574:	f8c1 e000 	str.w	lr, [r1]
 800a578:	f8c2 c000 	str.w	ip, [r2]
 800a57c:	2b1f      	cmp	r3, #31
 800a57e:	f100 0001 	add.w	r0, r0, #1
 800a582:	f101 0104 	add.w	r1, r1, #4
 800a586:	f04f 0220 	mov.w	r2, #32
 800a58a:	d9e6      	bls.n	800a55a <funchad35.constprop.0+0x5ee>
 800a58c:	1a9b      	subs	r3, r3, r2
 800a58e:	b29b      	uxth	r3, r3
 800a590:	0852      	lsrs	r2, r2, #1
 800a592:	4293      	cmp	r3, r2
 800a594:	d2fa      	bcs.n	800a58c <funchad35.constprop.0+0x620>
 800a596:	4413      	add	r3, r2
 800a598:	428d      	cmp	r5, r1
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	d1e1      	bne.n	800a562 <funchad35.constprop.0+0x5f6>
 800a59e:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 800a68c <funchad35.constprop.0+0x720>
 800a5a2:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 800a688 <funchad35.constprop.0+0x71c>
 800a5a6:	9603      	str	r6, [sp, #12]
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	eeb0 ba49 	vmov.f32	s22, s18
 800a5ae:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 800a5b2:	f04f 0901 	mov.w	r9, #1
 800a5b6:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 800a5ba:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 800a5be:	469a      	mov	sl, r3
 800a5c0:	46ce      	mov	lr, r9
 800a5c2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800a5c6:	fa1f f989 	uxth.w	r9, r9
 800a5ca:	f1be 0f00 	cmp.w	lr, #0
 800a5ce:	d05f      	beq.n	800a690 <funchad35.constprop.0+0x724>
 800a5d0:	f10e 3cff 	add.w	ip, lr, #4294967295
 800a5d4:	fa1f fc8c 	uxth.w	ip, ip
 800a5d8:	2500      	movs	r5, #0
 800a5da:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800a5de:	bf28      	it	cs
 800a5e0:	f04f 0c3f 	movcs.w	ip, #63	; 0x3f
 800a5e4:	462b      	mov	r3, r5
 800a5e6:	eef0 7a4b 	vmov.f32	s15, s22
 800a5ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a5ee:	eb0e 0203 	add.w	r2, lr, r3
 800a5f2:	b292      	uxth	r2, r2
 800a5f4:	eb07 0082 	add.w	r0, r7, r2, lsl #2
 800a5f8:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 800a5fc:	edd0 5a00 	vldr	s11, [r0]
 800a600:	ed92 5a00 	vldr	s10, [r2]
 800a604:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800a608:	ee65 6a67 	vnmul.f32	s13, s10, s15
 800a60c:	eea5 7a06 	vfma.f32	s14, s10, s12
 800a610:	eb07 0683 	add.w	r6, r7, r3, lsl #2
 800a614:	eb08 0183 	add.w	r1, r8, r3, lsl #2
 800a618:	eee5 6a86 	vfma.f32	s13, s11, s12
 800a61c:	444b      	add	r3, r9
 800a61e:	b29b      	uxth	r3, r3
 800a620:	ed96 5a00 	vldr	s10, [r6]
 800a624:	edd1 5a00 	vldr	s11, [r1]
 800a628:	ee35 5a66 	vsub.f32	s10, s10, s13
 800a62c:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800a630:	ed80 5a00 	vstr	s10, [r0]
 800a634:	edc2 5a00 	vstr	s11, [r2]
 800a638:	ed96 5a00 	vldr	s10, [r6]
 800a63c:	edd1 5a00 	vldr	s11, [r1]
 800a640:	ee75 6a26 	vadd.f32	s13, s10, s13
 800a644:	ee35 7a87 	vadd.f32	s14, s11, s14
 800a648:	2b3f      	cmp	r3, #63	; 0x3f
 800a64a:	edc6 6a00 	vstr	s13, [r6]
 800a64e:	ed81 7a00 	vstr	s14, [r1]
 800a652:	d9cc      	bls.n	800a5ee <funchad35.constprop.0+0x682>
 800a654:	3501      	adds	r5, #1
 800a656:	ee27 7ac9 	vnmul.f32	s14, s15, s18
 800a65a:	b2ab      	uxth	r3, r5
 800a65c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800a660:	4563      	cmp	r3, ip
 800a662:	eea8 7a86 	vfma.f32	s14, s17, s12
 800a666:	eee9 7a06 	vfma.f32	s15, s18, s12
 800a66a:	d811      	bhi.n	800a690 <funchad35.constprop.0+0x724>
 800a66c:	eeb0 6a47 	vmov.f32	s12, s14
 800a670:	e7bd      	b.n	800a5ee <funchad35.constprop.0+0x682>
 800a672:	bf00      	nop
 800a674:	20001328 	.word	0x20001328
 800a678:	200010a0 	.word	0x200010a0
 800a67c:	20001420 	.word	0x20001420
 800a680:	3e199990 	.word	0x3e199990
 800a684:	2000132c 	.word	0x2000132c
 800a688:	20001428 	.word	0x20001428
 800a68c:	00000000 	.word	0x00000000
 800a690:	ee3a 0ae8 	vsub.f32	s0, s21, s17
 800a694:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800a698:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6a0:	eeb1 9ac0 	vsqrt.f32	s18, s0
 800a6a4:	f100 8458 	bmi.w	800af58 <funchad35.constprop.0+0xfec>
 800a6a8:	ee38 0aaa 	vadd.f32	s0, s17, s21
 800a6ac:	eeb1 9a49 	vneg.f32	s18, s18
 800a6b0:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800a6b4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6bc:	eef1 8ac0 	vsqrt.f32	s17, s0
 800a6c0:	f100 8457 	bmi.w	800af72 <funchad35.constprop.0+0x1006>
 800a6c4:	f10a 0a01 	add.w	sl, sl, #1
 800a6c8:	f1ba 0f06 	cmp.w	sl, #6
 800a6cc:	f47f af78 	bne.w	800a5c0 <funchad35.constprop.0+0x654>
 800a6d0:	f8df 83b0 	ldr.w	r8, [pc, #944]	; 800aa84 <funchad35.constprop.0+0xb18>
 800a6d4:	9e03      	ldr	r6, [sp, #12]
 800a6d6:	4be8      	ldr	r3, [pc, #928]	; (800aa78 <funchad35.constprop.0+0xb0c>)
 800a6d8:	46c1      	mov	r9, r8
 800a6da:	eddf 6ae8 	vldr	s13, [pc, #928]	; 800aa7c <funchad35.constprop.0+0xb10>
 800a6de:	4642      	mov	r2, r8
 800a6e0:	ed93 7a00 	vldr	s14, [r3]
 800a6e4:	edd2 7a00 	vldr	s15, [r2]
 800a6e8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a6ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a6f0:	eca3 7a01 	vstmia	r3!, {s14}
 800a6f4:	429c      	cmp	r4, r3
 800a6f6:	ece2 7a01 	vstmia	r2!, {s15}
 800a6fa:	d1f1      	bne.n	800a6e0 <funchad35.constprop.0+0x774>
 800a6fc:	4ae0      	ldr	r2, [pc, #896]	; (800aa80 <funchad35.constprop.0+0xb14>)
 800a6fe:	4be1      	ldr	r3, [pc, #900]	; (800aa84 <funchad35.constprop.0+0xb18>)
 800a700:	edd3 7a01 	vldr	s15, [r3, #4]
 800a704:	ecb6 7a01 	vldmia	r6!, {s14}
 800a708:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a70c:	42b2      	cmp	r2, r6
 800a70e:	eee7 7a07 	vfma.f32	s15, s14, s14
 800a712:	ece3 7a01 	vstmia	r3!, {s15}
 800a716:	d1f3      	bne.n	800a700 <funchad35.constprop.0+0x794>
 800a718:	4edb      	ldr	r6, [pc, #876]	; (800aa88 <funchad35.constprop.0+0xb1c>)
 800a71a:	f1a6 0580 	sub.w	r5, r6, #128	; 0x80
 800a71e:	ecb5 0a01 	vldmia	r5!, {s0}
 800a722:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a72a:	eef1 8ac0 	vsqrt.f32	s17, s0
 800a72e:	f100 8417 	bmi.w	800af60 <funchad35.constprop.0+0xff4>
 800a732:	42ae      	cmp	r6, r5
 800a734:	ed45 8a01 	vstr	s17, [r5, #-4]
 800a738:	d1f1      	bne.n	800a71e <funchad35.constprop.0+0x7b2>
 800a73a:	f89b 3017 	ldrb.w	r3, [fp, #23]
 800a73e:	2b05      	cmp	r3, #5
 800a740:	d830      	bhi.n	800a7a4 <funchad35.constprop.0+0x838>
 800a742:	9901      	ldr	r1, [sp, #4]
 800a744:	edd8 7a00 	vldr	s15, [r8]
 800a748:	f8df 8338 	ldr.w	r8, [pc, #824]	; 800aa84 <funchad35.constprop.0+0xb18>
 800a74c:	2206      	movs	r2, #6
 800a74e:	fb12 1203 	smlabb	r2, r2, r3, r1
 800a752:	4bce      	ldr	r3, [pc, #824]	; (800aa8c <funchad35.constprop.0+0xb20>)
 800a754:	eeb0 7a67 	vmov.f32	s14, s15
 800a758:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a75c:	4643      	mov	r3, r8
 800a75e:	ecf3 6a01 	vldmia	r3!, {s13}
 800a762:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a76a:	bfd8      	it	le
 800a76c:	eeb0 7a66 	vmovle.f32	s14, s13
 800a770:	429e      	cmp	r6, r3
 800a772:	d1f4      	bne.n	800a75e <funchad35.constprop.0+0x7f2>
 800a774:	eeb0 7ac7 	vabs.f32	s14, s14
 800a778:	ecf9 6a01 	vldmia	r9!, {s13}
 800a77c:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a784:	bf58      	it	pl
 800a786:	eef0 7a66 	vmovpl.f32	s15, s13
 800a78a:	45b1      	cmp	r9, r6
 800a78c:	d1f4      	bne.n	800a778 <funchad35.constprop.0+0x80c>
 800a78e:	eef0 7ae7 	vabs.f32	s15, s15
 800a792:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a79a:	bf58      	it	pl
 800a79c:	eef0 7a47 	vmovpl.f32	s15, s14
 800a7a0:	edc2 7a00 	vstr	s15, [r2]
 800a7a4:	f89b 0018 	ldrb.w	r0, [fp, #24]
 800a7a8:	2805      	cmp	r0, #5
 800a7aa:	d81f      	bhi.n	800a7ec <funchad35.constprop.0+0x880>
 800a7ac:	ed98 7a00 	vldr	s14, [r8]
 800a7b0:	4ab7      	ldr	r2, [pc, #732]	; (800aa90 <funchad35.constprop.0+0xb24>)
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	ecf2 7a01 	vldmia	r2!, {s15}
 800a7ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7c2:	d403      	bmi.n	800a7cc <funchad35.constprop.0+0x860>
 800a7c4:	bfc4      	itt	gt
 800a7c6:	eeb0 7a67 	vmovgt.f32	s14, s15
 800a7ca:	b2d9      	uxtbgt	r1, r3
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	2b20      	cmp	r3, #32
 800a7d0:	d1f1      	bne.n	800a7b6 <funchad35.constprop.0+0x84a>
 800a7d2:	9a01      	ldr	r2, [sp, #4]
 800a7d4:	ee07 1a90 	vmov	s15, r1
 800a7d8:	2306      	movs	r3, #6
 800a7da:	fb13 2300 	smlabb	r3, r3, r0, r2
 800a7de:	4aab      	ldr	r2, [pc, #684]	; (800aa8c <funchad35.constprop.0+0xb20>)
 800a7e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7e8:	edc3 7a00 	vstr	s15, [r3]
 800a7ec:	f89b 3019 	ldrb.w	r3, [fp, #25]
 800a7f0:	2b05      	cmp	r3, #5
 800a7f2:	d811      	bhi.n	800a818 <funchad35.constprop.0+0x8ac>
 800a7f4:	9901      	ldr	r1, [sp, #4]
 800a7f6:	edd8 7a00 	vldr	s15, [r8]
 800a7fa:	2206      	movs	r2, #6
 800a7fc:	fb12 1203 	smlabb	r2, r2, r3, r1
 800a800:	49a2      	ldr	r1, [pc, #648]	; (800aa8c <funchad35.constprop.0+0xb20>)
 800a802:	4ba3      	ldr	r3, [pc, #652]	; (800aa90 <funchad35.constprop.0+0xb24>)
 800a804:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800a808:	ecb3 7a01 	vldmia	r3!, {s14}
 800a80c:	429e      	cmp	r6, r3
 800a80e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a812:	d1f9      	bne.n	800a808 <funchad35.constprop.0+0x89c>
 800a814:	edc2 7a00 	vstr	s15, [r2]
 800a818:	f89b 101a 	ldrb.w	r1, [fp, #26]
 800a81c:	2905      	cmp	r1, #5
 800a81e:	d813      	bhi.n	800a848 <funchad35.constprop.0+0x8dc>
 800a820:	9801      	ldr	r0, [sp, #4]
 800a822:	ed98 7a00 	vldr	s14, [r8]
 800a826:	4b9a      	ldr	r3, [pc, #616]	; (800aa90 <funchad35.constprop.0+0xb24>)
 800a828:	2206      	movs	r2, #6
 800a82a:	fb12 0201 	smlabb	r2, r2, r1, r0
 800a82e:	4997      	ldr	r1, [pc, #604]	; (800aa8c <funchad35.constprop.0+0xb20>)
 800a830:	ee27 7a07 	vmul.f32	s14, s14, s14
 800a834:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800a838:	ecf3 7a01 	vldmia	r3!, {s15}
 800a83c:	42b3      	cmp	r3, r6
 800a83e:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800a842:	d1f9      	bne.n	800a838 <funchad35.constprop.0+0x8cc>
 800a844:	ed82 7a00 	vstr	s14, [r2]
 800a848:	9b01      	ldr	r3, [sp, #4]
 800a84a:	9a02      	ldr	r2, [sp, #8]
 800a84c:	3301      	adds	r3, #1
 800a84e:	3204      	adds	r2, #4
 800a850:	2b06      	cmp	r3, #6
 800a852:	9301      	str	r3, [sp, #4]
 800a854:	9202      	str	r2, [sp, #8]
 800a856:	f47f ab98 	bne.w	8009f8a <funchad35.constprop.0+0x1e>
 800a85a:	4c8e      	ldr	r4, [pc, #568]	; (800aa94 <funchad35.constprop.0+0xb28>)
 800a85c:	4b86      	ldr	r3, [pc, #536]	; (800aa78 <funchad35.constprop.0+0xb0c>)
 800a85e:	f8df c22c 	ldr.w	ip, [pc, #556]	; 800aa8c <funchad35.constprop.0+0xb20>
 800a862:	4625      	mov	r5, r4
 800a864:	2600      	movs	r6, #0
 800a866:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800a86a:	4b83      	ldr	r3, [pc, #524]	; (800aa78 <funchad35.constprop.0+0xb0c>)
 800a86c:	4662      	mov	r2, ip
 800a86e:	f852 1b18 	ldr.w	r1, [r2], #24
 800a872:	f843 1b04 	str.w	r1, [r3], #4
 800a876:	4298      	cmp	r0, r3
 800a878:	d1f9      	bne.n	800a86e <funchad35.constprop.0+0x902>
 800a87a:	3601      	adds	r6, #1
 800a87c:	f8d7 9000 	ldr.w	r9, [r7]
 800a880:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800a884:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800a888:	68f9      	ldr	r1, [r7, #12]
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	f8c5 9000 	str.w	r9, [r5]
 800a892:	2e06      	cmp	r6, #6
 800a894:	f8c5 8004 	str.w	r8, [r5, #4]
 800a898:	f8c5 e008 	str.w	lr, [r5, #8]
 800a89c:	60e9      	str	r1, [r5, #12]
 800a89e:	612a      	str	r2, [r5, #16]
 800a8a0:	616b      	str	r3, [r5, #20]
 800a8a2:	f10c 0c04 	add.w	ip, ip, #4
 800a8a6:	f105 0518 	add.w	r5, r5, #24
 800a8aa:	d1de      	bne.n	800a86a <funchad35.constprop.0+0x8fe>
 800a8ac:	eddf 7a7a 	vldr	s15, [pc, #488]	; 800aa98 <funchad35.constprop.0+0xb2c>
 800a8b0:	ed94 9a00 	vldr	s18, [r4]
 800a8b4:	ed94 2a06 	vldr	s4, [r4, #24]
 800a8b8:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 800a8bc:	ed94 8a01 	vldr	s16, [r4, #4]
 800a8c0:	edd4 2a07 	vldr	s5, [r4, #28]
 800a8c4:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 800a8c8:	ed94 0a02 	vldr	s0, [r4, #8]
 800a8cc:	ed94 3a08 	vldr	s6, [r4, #32]
 800a8d0:	ed94 5a0e 	vldr	s10, [r4, #56]	; 0x38
 800a8d4:	edd4 0a03 	vldr	s1, [r4, #12]
 800a8d8:	edd4 3a09 	vldr	s7, [r4, #36]	; 0x24
 800a8dc:	edd4 8a0f 	vldr	s17, [r4, #60]	; 0x3c
 800a8e0:	ed94 1a04 	vldr	s2, [r4, #16]
 800a8e4:	ed94 ca0a 	vldr	s24, [r4, #40]	; 0x28
 800a8e8:	ed94 ba10 	vldr	s22, [r4, #64]	; 0x40
 800a8ec:	edd4 ba0b 	vldr	s23, [r4, #44]	; 0x2c
 800a8f0:	edd4 1a05 	vldr	s3, [r4, #20]
 800a8f4:	edd4 9a11 	vldr	s19, [r4, #68]	; 0x44
 800a8f8:	ee39 6a27 	vadd.f32	s12, s18, s15
 800a8fc:	ee72 6a27 	vadd.f32	s13, s4, s15
 800a900:	ee34 7a27 	vadd.f32	s14, s8, s15
 800a904:	ee38 6a06 	vadd.f32	s12, s16, s12
 800a908:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800a90c:	ee34 7a87 	vadd.f32	s14, s9, s14
 800a910:	ee36 6a00 	vadd.f32	s12, s12, s0
 800a914:	ee73 6a26 	vadd.f32	s13, s6, s13
 800a918:	ee35 7a07 	vadd.f32	s14, s10, s14
 800a91c:	ee36 6a20 	vadd.f32	s12, s12, s1
 800a920:	ee73 6aa6 	vadd.f32	s13, s7, s13
 800a924:	ee38 7a87 	vadd.f32	s14, s17, s14
 800a928:	ee31 6a06 	vadd.f32	s12, s2, s12
 800a92c:	ee76 6a8c 	vadd.f32	s13, s13, s24
 800a930:	ee3b 7a07 	vadd.f32	s14, s22, s14
 800a934:	ee31 6a86 	vadd.f32	s12, s3, s12
 800a938:	ee7b 6aa6 	vadd.f32	s13, s23, s13
 800a93c:	ee39 7a87 	vadd.f32	s14, s19, s14
 800a940:	eef1 5a08 	vmov.f32	s11, #24	; 0x40c00000  6.0
 800a944:	eec6 aa25 	vdiv.f32	s21, s12, s11
 800a948:	ee86 aaa5 	vdiv.f32	s20, s13, s11
 800a94c:	ee87 6a25 	vdiv.f32	s12, s14, s11
 800a950:	ee39 9a6a 	vsub.f32	s18, s18, s21
 800a954:	ee38 8a6a 	vsub.f32	s16, s16, s21
 800a958:	ee30 0a6a 	vsub.f32	s0, s0, s21
 800a95c:	ee70 0aea 	vsub.f32	s1, s1, s21
 800a960:	ee31 1a6a 	vsub.f32	s2, s2, s21
 800a964:	ee71 1aea 	vsub.f32	s3, s3, s21
 800a968:	ee32 2a4a 	vsub.f32	s4, s4, s20
 800a96c:	ee72 2aca 	vsub.f32	s5, s5, s20
 800a970:	ee33 3a4a 	vsub.f32	s6, s6, s20
 800a974:	ee73 3aca 	vsub.f32	s7, s7, s20
 800a978:	ee3c ca4a 	vsub.f32	s24, s24, s20
 800a97c:	ee34 4a46 	vsub.f32	s8, s8, s12
 800a980:	ee3b aaca 	vsub.f32	s20, s23, s20
 800a984:	ee74 4ac6 	vsub.f32	s9, s9, s12
 800a988:	ee35 5a46 	vsub.f32	s10, s10, s12
 800a98c:	ed84 9a00 	vstr	s18, [r4]
 800a990:	ed84 8a01 	vstr	s16, [r4, #4]
 800a994:	ed84 0a02 	vstr	s0, [r4, #8]
 800a998:	edc4 0a03 	vstr	s1, [r4, #12]
 800a99c:	ed84 1a04 	vstr	s2, [r4, #16]
 800a9a0:	edc4 1a05 	vstr	s3, [r4, #20]
 800a9a4:	ed84 2a06 	vstr	s4, [r4, #24]
 800a9a8:	edc4 2a07 	vstr	s5, [r4, #28]
 800a9ac:	ed84 3a08 	vstr	s6, [r4, #32]
 800a9b0:	edc4 3a09 	vstr	s7, [r4, #36]	; 0x24
 800a9b4:	ed84 aa0b 	vstr	s20, [r4, #44]	; 0x2c
 800a9b8:	ed84 4a0c 	vstr	s8, [r4, #48]	; 0x30
 800a9bc:	edc4 4a0d 	vstr	s9, [r4, #52]	; 0x34
 800a9c0:	ed84 ca0a 	vstr	s24, [r4, #40]	; 0x28
 800a9c4:	ed84 5a0e 	vstr	s10, [r4, #56]	; 0x38
 800a9c8:	edd4 aa12 	vldr	s21, [r4, #72]	; 0x48
 800a9cc:	ed94 1a18 	vldr	s2, [r4, #96]	; 0x60
 800a9d0:	ed94 aa13 	vldr	s20, [r4, #76]	; 0x4c
 800a9d4:	edd4 1a19 	vldr	s3, [r4, #100]	; 0x64
 800a9d8:	ed94 9a14 	vldr	s18, [r4, #80]	; 0x50
 800a9dc:	ed94 2a1a 	vldr	s4, [r4, #104]	; 0x68
 800a9e0:	ed94 8a15 	vldr	s16, [r4, #84]	; 0x54
 800a9e4:	edd4 2a1b 	vldr	s5, [r4, #108]	; 0x6c
 800a9e8:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
 800a9ec:	ed94 3a1c 	vldr	s6, [r4, #112]	; 0x70
 800a9f0:	edd4 0a17 	vldr	s1, [r4, #92]	; 0x5c
 800a9f4:	edd4 3a1d 	vldr	s7, [r4, #116]	; 0x74
 800a9f8:	ed94 4a1e 	vldr	s8, [r4, #120]	; 0x78
 800a9fc:	edd4 4a1f 	vldr	s9, [r4, #124]	; 0x7c
 800aa00:	ed94 5a20 	vldr	s10, [r4, #128]	; 0x80
 800aa04:	ee7a 6aa7 	vadd.f32	s13, s21, s15
 800aa08:	ee31 7a27 	vadd.f32	s14, s2, s15
 800aa0c:	ee7a 6a26 	vadd.f32	s13, s20, s13
 800aa10:	ee31 7a87 	vadd.f32	s14, s3, s14
 800aa14:	ee79 6a26 	vadd.f32	s13, s18, s13
 800aa18:	ee32 7a07 	vadd.f32	s14, s4, s14
 800aa1c:	ee78 6a26 	vadd.f32	s13, s16, s13
 800aa20:	ee32 7a87 	vadd.f32	s14, s5, s14
 800aa24:	ee70 6a26 	vadd.f32	s13, s0, s13
 800aa28:	ee33 7a07 	vadd.f32	s14, s6, s14
 800aa2c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800aa30:	ee33 7a87 	vadd.f32	s14, s7, s14
 800aa34:	eec6 baa5 	vdiv.f32	s23, s13, s11
 800aa38:	eec7 6a25 	vdiv.f32	s13, s14, s11
 800aa3c:	ee74 7a27 	vadd.f32	s15, s8, s15
 800aa40:	ee78 8ac6 	vsub.f32	s17, s17, s12
 800aa44:	ee74 7aa7 	vadd.f32	s15, s9, s15
 800aa48:	ee3b ba46 	vsub.f32	s22, s22, s12
 800aa4c:	edc4 8a0f 	vstr	s17, [r4, #60]	; 0x3c
 800aa50:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800aa54:	edd4 8a21 	vldr	s17, [r4, #132]	; 0x84
 800aa58:	ed84 6a11 	vstr	s12, [r4, #68]	; 0x44
 800aa5c:	ee77 7a85 	vadd.f32	s15, s15, s10
 800aa60:	ed94 6a22 	vldr	s12, [r4, #136]	; 0x88
 800aa64:	ed84 ba10 	vstr	s22, [r4, #64]	; 0x40
 800aa68:	ee31 1a66 	vsub.f32	s2, s2, s13
 800aa6c:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800aa70:	ee32 2a66 	vsub.f32	s4, s4, s13
 800aa74:	e012      	b.n	800aa9c <funchad35.constprop.0+0xb30>
 800aa76:	bf00      	nop
 800aa78:	20001328 	.word	0x20001328
 800aa7c:	3d000000 	.word	0x3d000000
 800aa80:	200013ac 	.word	0x200013ac
 800aa84:	20001428 	.word	0x20001428
 800aa88:	200014a8 	.word	0x200014a8
 800aa8c:	200010a0 	.word	0x200010a0
 800aa90:	2000142c 	.word	0x2000142c
 800aa94:	20001528 	.word	0x20001528
 800aa98:	00000000 	.word	0x00000000
 800aa9c:	ee72 2ae6 	vsub.f32	s5, s5, s13
 800aaa0:	ee33 3a66 	vsub.f32	s6, s6, s13
 800aaa4:	ee7a aaeb 	vsub.f32	s21, s21, s23
 800aaa8:	ee73 6ae6 	vsub.f32	s13, s7, s13
 800aaac:	ee3a aa6b 	vsub.f32	s20, s20, s23
 800aab0:	ee39 9a6b 	vsub.f32	s18, s18, s23
 800aab4:	ee38 8a6b 	vsub.f32	s16, s16, s23
 800aab8:	ee30 0a6b 	vsub.f32	s0, s0, s23
 800aabc:	ee70 0aeb 	vsub.f32	s1, s1, s23
 800aac0:	ee77 7aa8 	vadd.f32	s15, s15, s17
 800aac4:	edc4 aa12 	vstr	s21, [r4, #72]	; 0x48
 800aac8:	ee77 7a86 	vadd.f32	s15, s15, s12
 800aacc:	ed84 aa13 	vstr	s20, [r4, #76]	; 0x4c
 800aad0:	ed84 9a14 	vstr	s18, [r4, #80]	; 0x50
 800aad4:	ed84 8a15 	vstr	s16, [r4, #84]	; 0x54
 800aad8:	ed84 0a16 	vstr	s0, [r4, #88]	; 0x58
 800aadc:	edc4 0a17 	vstr	s1, [r4, #92]	; 0x5c
 800aae0:	ed84 1a18 	vstr	s2, [r4, #96]	; 0x60
 800aae4:	edc4 1a19 	vstr	s3, [r4, #100]	; 0x64
 800aae8:	ed84 2a1a 	vstr	s4, [r4, #104]	; 0x68
 800aaec:	edc4 2a1b 	vstr	s5, [r4, #108]	; 0x6c
 800aaf0:	ed84 3a1c 	vstr	s6, [r4, #112]	; 0x70
 800aaf4:	edc4 6a1d 	vstr	s13, [r4, #116]	; 0x74
 800aaf8:	edd4 6a23 	vldr	s13, [r4, #140]	; 0x8c
 800aafc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab00:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ab04:	ee34 4a47 	vsub.f32	s8, s8, s14
 800ab08:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800ab0c:	ee35 5a47 	vsub.f32	s10, s10, s14
 800ab10:	ee78 8ac7 	vsub.f32	s17, s17, s14
 800ab14:	ee36 6a47 	vsub.f32	s12, s12, s14
 800ab18:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ab1c:	ed84 4a1e 	vstr	s8, [r4, #120]	; 0x78
 800ab20:	edc4 4a1f 	vstr	s9, [r4, #124]	; 0x7c
 800ab24:	ed84 5a20 	vstr	s10, [r4, #128]	; 0x80
 800ab28:	edc4 8a21 	vstr	s17, [r4, #132]	; 0x84
 800ab2c:	ed84 6a22 	vstr	s12, [r4, #136]	; 0x88
 800ab30:	ed84 7a23 	vstr	s14, [r4, #140]	; 0x8c
 800ab34:	b005      	add	sp, #20
 800ab36:	ecbd 8b0a 	vpop	{d8-d12}
 800ab3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3e:	9a01      	ldr	r2, [sp, #4]
 800ab40:	edd7 6a00 	vldr	s13, [r7]
 800ab44:	4fde      	ldr	r7, [pc, #888]	; (800aec0 <funchad35.constprop.0+0xf54>)
 800ab46:	2506      	movs	r5, #6
 800ab48:	fb15 2303 	smlabb	r3, r5, r3, r2
 800ab4c:	4add      	ldr	r2, [pc, #884]	; (800aec4 <funchad35.constprop.0+0xf58>)
 800ab4e:	eeb0 7a66 	vmov.f32	s14, s13
 800ab52:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800ab56:	463b      	mov	r3, r7
 800ab58:	ecf3 7a01 	vldmia	r3!, {s15}
 800ab5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab64:	bfd8      	it	le
 800ab66:	eeb0 7a67 	vmovle.f32	s14, s15
 800ab6a:	429c      	cmp	r4, r3
 800ab6c:	d1f4      	bne.n	800ab58 <funchad35.constprop.0+0xbec>
 800ab6e:	4bd4      	ldr	r3, [pc, #848]	; (800aec0 <funchad35.constprop.0+0xf54>)
 800ab70:	eef0 7a66 	vmov.f32	s15, s13
 800ab74:	eeb0 7ac7 	vabs.f32	s14, s14
 800ab78:	ecb3 6a01 	vldmia	r3!, {s12}
 800ab7c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800ab80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab84:	bf58      	it	pl
 800ab86:	eef0 7a46 	vmovpl.f32	s15, s12
 800ab8a:	429c      	cmp	r4, r3
 800ab8c:	d1f4      	bne.n	800ab78 <funchad35.constprop.0+0xc0c>
 800ab8e:	eef0 8ae7 	vabs.f32	s17, s15
 800ab92:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800ab96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab9a:	ee66 7aa6 	vmul.f32	s15, s13, s13
 800ab9e:	4bca      	ldr	r3, [pc, #808]	; (800aec8 <funchad35.constprop.0+0xf5c>)
 800aba0:	bf58      	it	pl
 800aba2:	eef0 8a47 	vmovpl.f32	s17, s14
 800aba6:	ecb3 7a01 	vldmia	r3!, {s14}
 800abaa:	429c      	cmp	r4, r3
 800abac:	eee7 7a07 	vfma.f32	s15, s14, s14
 800abb0:	d1f9      	bne.n	800aba6 <funchad35.constprop.0+0xc3a>
 800abb2:	ee27 0aa9 	vmul.f32	s0, s15, s19
 800abb6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800abba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abbe:	eeb1 9ac0 	vsqrt.f32	s18, s0
 800abc2:	f100 81ed 	bmi.w	800afa0 <funchad35.constprop.0+0x1034>
 800abc6:	eec8 7a89 	vdiv.f32	s15, s17, s18
 800abca:	edc5 7a00 	vstr	s15, [r5]
 800abce:	f7ff bbd4 	b.w	800a37a <funchad35.constprop.0+0x40e>
 800abd2:	edd7 7a00 	vldr	s15, [r7]
 800abd6:	9801      	ldr	r0, [sp, #4]
 800abd8:	4bbb      	ldr	r3, [pc, #748]	; (800aec8 <funchad35.constprop.0+0xf5c>)
 800abda:	eef0 7ae7 	vabs.f32	s15, s15
 800abde:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800abe2:	2106      	movs	r1, #6
 800abe4:	fb11 0202 	smlabb	r2, r1, r2, r0
 800abe8:	49b6      	ldr	r1, [pc, #728]	; (800aec4 <funchad35.constprop.0+0xf58>)
 800abea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800abee:	ecf3 7a01 	vldmia	r3!, {s15}
 800abf2:	eef0 7ae7 	vabs.f32	s15, s15
 800abf6:	eef1 6ae7 	vsqrt.f32	s13, s15
 800abfa:	429c      	cmp	r4, r3
 800abfc:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ac00:	d1f5      	bne.n	800abee <funchad35.constprop.0+0xc82>
 800ac02:	edd7 7a00 	vldr	s15, [r7]
 800ac06:	4fae      	ldr	r7, [pc, #696]	; (800aec0 <funchad35.constprop.0+0xf54>)
 800ac08:	ee27 6a29 	vmul.f32	s12, s14, s19
 800ac0c:	463b      	mov	r3, r7
 800ac0e:	eeb0 7a67 	vmov.f32	s14, s15
 800ac12:	ecf3 6a01 	vldmia	r3!, {s13}
 800ac16:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ac1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac1e:	bfd8      	it	le
 800ac20:	eeb0 7a66 	vmovle.f32	s14, s13
 800ac24:	429c      	cmp	r4, r3
 800ac26:	d1f4      	bne.n	800ac12 <funchad35.constprop.0+0xca6>
 800ac28:	4ba5      	ldr	r3, [pc, #660]	; (800aec0 <funchad35.constprop.0+0xf54>)
 800ac2a:	eeb0 7ac7 	vabs.f32	s14, s14
 800ac2e:	ecf3 6a01 	vldmia	r3!, {s13}
 800ac32:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ac36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac3a:	bf58      	it	pl
 800ac3c:	eef0 7a66 	vmovpl.f32	s15, s13
 800ac40:	429c      	cmp	r4, r3
 800ac42:	d1f4      	bne.n	800ac2e <funchad35.constprop.0+0xcc2>
 800ac44:	eef0 7ae7 	vabs.f32	s15, s15
 800ac48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ac4c:	ee26 6a06 	vmul.f32	s12, s12, s12
 800ac50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac54:	bf58      	it	pl
 800ac56:	eef0 7a47 	vmovpl.f32	s15, s14
 800ac5a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800ac5e:	ed82 7a00 	vstr	s14, [r2]
 800ac62:	f7ff bb85 	b.w	800a370 <funchad35.constprop.0+0x404>
 800ac66:	9901      	ldr	r1, [sp, #4]
 800ac68:	ed97 7a00 	vldr	s14, [r7]
 800ac6c:	4b96      	ldr	r3, [pc, #600]	; (800aec8 <funchad35.constprop.0+0xf5c>)
 800ac6e:	2506      	movs	r5, #6
 800ac70:	fb15 1202 	smlabb	r2, r5, r2, r1
 800ac74:	4993      	ldr	r1, [pc, #588]	; (800aec4 <funchad35.constprop.0+0xf58>)
 800ac76:	eef0 6ac7 	vabs.f32	s13, s14
 800ac7a:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800ac7e:	461a      	mov	r2, r3
 800ac80:	ecf2 7a01 	vldmia	r2!, {s15}
 800ac84:	eef0 7ae7 	vabs.f32	s15, s15
 800ac88:	4294      	cmp	r4, r2
 800ac8a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ac8e:	d1f7      	bne.n	800ac80 <funchad35.constprop.0+0xd14>
 800ac90:	ee66 8aa9 	vmul.f32	s17, s13, s19
 800ac94:	ee67 7a07 	vmul.f32	s15, s14, s14
 800ac98:	ecb3 7a01 	vldmia	r3!, {s14}
 800ac9c:	429c      	cmp	r4, r3
 800ac9e:	eee7 7a07 	vfma.f32	s15, s14, s14
 800aca2:	d1f9      	bne.n	800ac98 <funchad35.constprop.0+0xd2c>
 800aca4:	ee27 0aa9 	vmul.f32	s0, s15, s19
 800aca8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800acac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acb0:	eeb1 9ac0 	vsqrt.f32	s18, s0
 800acb4:	f100 8171 	bmi.w	800af9a <funchad35.constprop.0+0x102e>
 800acb8:	eec9 7a28 	vdiv.f32	s15, s18, s17
 800acbc:	edc5 7a00 	vstr	s15, [r5]
 800acc0:	f7ff bafc 	b.w	800a2bc <funchad35.constprop.0+0x350>
 800acc4:	9901      	ldr	r1, [sp, #4]
 800acc6:	edd7 7a00 	vldr	s15, [r7]
 800acca:	4b7f      	ldr	r3, [pc, #508]	; (800aec8 <funchad35.constprop.0+0xf5c>)
 800accc:	2506      	movs	r5, #6
 800acce:	fb15 1202 	smlabb	r2, r5, r2, r1
 800acd2:	497c      	ldr	r1, [pc, #496]	; (800aec4 <funchad35.constprop.0+0xf58>)
 800acd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800acd8:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800acdc:	ecb3 7a01 	vldmia	r3!, {s14}
 800ace0:	429c      	cmp	r4, r3
 800ace2:	eee7 7a07 	vfma.f32	s15, s14, s14
 800ace6:	d1f9      	bne.n	800acdc <funchad35.constprop.0+0xd70>
 800ace8:	ee27 0aa9 	vmul.f32	s0, s15, s19
 800acec:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800acf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf4:	eef1 8ac0 	vsqrt.f32	s17, s0
 800acf8:	f100 814c 	bmi.w	800af94 <funchad35.constprop.0+0x1028>
 800acfc:	edc5 8a00 	vstr	s17, [r5]
 800ad00:	f7ff bad7 	b.w	800a2b2 <funchad35.constprop.0+0x346>
 800ad04:	9a01      	ldr	r2, [sp, #4]
 800ad06:	ed97 6a00 	vldr	s12, [r7]
 800ad0a:	4d6f      	ldr	r5, [pc, #444]	; (800aec8 <funchad35.constprop.0+0xf5c>)
 800ad0c:	2606      	movs	r6, #6
 800ad0e:	fb16 2303 	smlabb	r3, r6, r3, r2
 800ad12:	4a6c      	ldr	r2, [pc, #432]	; (800aec4 <funchad35.constprop.0+0xf58>)
 800ad14:	eef0 7a46 	vmov.f32	s15, s12
 800ad18:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800ad1c:	462b      	mov	r3, r5
 800ad1e:	ecb3 7a01 	vldmia	r3!, {s14}
 800ad22:	429c      	cmp	r4, r3
 800ad24:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad28:	d1f9      	bne.n	800ad1e <funchad35.constprop.0+0xdb2>
 800ad2a:	ee67 8aa9 	vmul.f32	s17, s15, s19
 800ad2e:	462b      	mov	r3, r5
 800ad30:	eef0 7a46 	vmov.f32	s15, s12
 800ad34:	ecb3 7a01 	vldmia	r3!, {s14}
 800ad38:	429c      	cmp	r4, r3
 800ad3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad3e:	d1f9      	bne.n	800ad34 <funchad35.constprop.0+0xdc8>
 800ad40:	ee27 7aa9 	vmul.f32	s14, s15, s19
 800ad44:	462b      	mov	r3, r5
 800ad46:	ee76 6a47 	vsub.f32	s13, s12, s14
 800ad4a:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800ad4e:	ecf3 7a01 	vldmia	r3!, {s15}
 800ad52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad56:	429c      	cmp	r4, r3
 800ad58:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800ad5c:	d1f7      	bne.n	800ad4e <funchad35.constprop.0+0xde2>
 800ad5e:	ee26 0aa9 	vmul.f32	s0, s13, s19
 800ad62:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ad66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad6a:	eeb1 9ac0 	vsqrt.f32	s18, s0
 800ad6e:	f100 810c 	bmi.w	800af8a <funchad35.constprop.0+0x101e>
 800ad72:	ee36 6a68 	vsub.f32	s12, s12, s17
 800ad76:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ad7a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ad7e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ad82:	ecf5 7a01 	vldmia	r5!, {s15}
 800ad86:	ee77 7ae8 	vsub.f32	s15, s15, s17
 800ad8a:	42ac      	cmp	r4, r5
 800ad8c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ad90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad94:	eee7 6a87 	vfma.f32	s13, s15, s14
 800ad98:	d1f3      	bne.n	800ad82 <funchad35.constprop.0+0xe16>
 800ad9a:	ee69 7a09 	vmul.f32	s15, s18, s18
 800ad9e:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 800ada2:	ee67 7a89 	vmul.f32	s15, s15, s18
 800ada6:	ee67 7a89 	vmul.f32	s15, s15, s18
 800adaa:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800adae:	eef0 7a47 	vmov.f32	s15, s14
 800adb2:	eee6 7a29 	vfma.f32	s15, s12, s19
 800adb6:	edc6 7a00 	vstr	s15, [r6]
 800adba:	f7ff b9d8 	b.w	800a16e <funchad35.constprop.0+0x202>
 800adbe:	9a01      	ldr	r2, [sp, #4]
 800adc0:	ed97 6a00 	vldr	s12, [r7]
 800adc4:	4d40      	ldr	r5, [pc, #256]	; (800aec8 <funchad35.constprop.0+0xf5c>)
 800adc6:	2606      	movs	r6, #6
 800adc8:	fb16 2303 	smlabb	r3, r6, r3, r2
 800adcc:	4a3d      	ldr	r2, [pc, #244]	; (800aec4 <funchad35.constprop.0+0xf58>)
 800adce:	eef0 7a46 	vmov.f32	s15, s12
 800add2:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800add6:	462b      	mov	r3, r5
 800add8:	ecb3 7a01 	vldmia	r3!, {s14}
 800addc:	429c      	cmp	r4, r3
 800adde:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ade2:	d1f9      	bne.n	800add8 <funchad35.constprop.0+0xe6c>
 800ade4:	ee67 8aa9 	vmul.f32	s17, s15, s19
 800ade8:	462b      	mov	r3, r5
 800adea:	eef0 7a46 	vmov.f32	s15, s12
 800adee:	ecb3 7a01 	vldmia	r3!, {s14}
 800adf2:	429c      	cmp	r4, r3
 800adf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800adf8:	d1f9      	bne.n	800adee <funchad35.constprop.0+0xe82>
 800adfa:	ee27 7aa9 	vmul.f32	s14, s15, s19
 800adfe:	462b      	mov	r3, r5
 800ae00:	ee76 6a47 	vsub.f32	s13, s12, s14
 800ae04:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800ae08:	ecf3 7a01 	vldmia	r3!, {s15}
 800ae0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae10:	429c      	cmp	r4, r3
 800ae12:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800ae16:	d1f7      	bne.n	800ae08 <funchad35.constprop.0+0xe9c>
 800ae18:	ee26 0aa9 	vmul.f32	s0, s13, s19
 800ae1c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ae20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae24:	eeb1 9ac0 	vsqrt.f32	s18, s0
 800ae28:	f100 80aa 	bmi.w	800af80 <funchad35.constprop.0+0x1014>
 800ae2c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800ae30:	ee26 7a06 	vmul.f32	s14, s12, s12
 800ae34:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ae38:	ecf5 7a01 	vldmia	r5!, {s15}
 800ae3c:	ee77 7ae8 	vsub.f32	s15, s15, s17
 800ae40:	42ac      	cmp	r4, r5
 800ae42:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800ae46:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ae4a:	d1f5      	bne.n	800ae38 <funchad35.constprop.0+0xecc>
 800ae4c:	ee69 6a09 	vmul.f32	s13, s18, s18
 800ae50:	ee66 6a89 	vmul.f32	s13, s13, s18
 800ae54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ae58:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800ae5c:	edc6 7a00 	vstr	s15, [r6]
 800ae60:	f7ff b980 	b.w	800a164 <funchad35.constprop.0+0x1f8>
 800ae64:	9901      	ldr	r1, [sp, #4]
 800ae66:	edd7 6a00 	vldr	s13, [r7]
 800ae6a:	4b17      	ldr	r3, [pc, #92]	; (800aec8 <funchad35.constprop.0+0xf5c>)
 800ae6c:	2506      	movs	r5, #6
 800ae6e:	fb15 1202 	smlabb	r2, r5, r2, r1
 800ae72:	4914      	ldr	r1, [pc, #80]	; (800aec4 <funchad35.constprop.0+0xf58>)
 800ae74:	eef0 7a66 	vmov.f32	s15, s13
 800ae78:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	ecb2 7a01 	vldmia	r2!, {s14}
 800ae82:	4294      	cmp	r4, r2
 800ae84:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae88:	d1f9      	bne.n	800ae7e <funchad35.constprop.0+0xf12>
 800ae8a:	ee27 7aa9 	vmul.f32	s14, s15, s19
 800ae8e:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800ae92:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800ae96:	ecf3 7a01 	vldmia	r3!, {s15}
 800ae9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae9e:	429c      	cmp	r4, r3
 800aea0:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800aea4:	d1f7      	bne.n	800ae96 <funchad35.constprop.0+0xf2a>
 800aea6:	ee26 0aa9 	vmul.f32	s0, s13, s19
 800aeaa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800aeae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb2:	eef1 8ac0 	vsqrt.f32	s17, s0
 800aeb6:	d460      	bmi.n	800af7a <funchad35.constprop.0+0x100e>
 800aeb8:	edc5 8a00 	vstr	s17, [r5]
 800aebc:	f7ff b94d 	b.w	800a15a <funchad35.constprop.0+0x1ee>
 800aec0:	20001328 	.word	0x20001328
 800aec4:	200010a0 	.word	0x200010a0
 800aec8:	2000132c 	.word	0x2000132c
 800aecc:	9a01      	ldr	r2, [sp, #4]
 800aece:	edd7 7a00 	vldr	s15, [r7]
 800aed2:	4d35      	ldr	r5, [pc, #212]	; (800afa8 <funchad35.constprop.0+0x103c>)
 800aed4:	ed9f aa35 	vldr	s20, [pc, #212]	; 800afac <funchad35.constprop.0+0x1040>
 800aed8:	2606      	movs	r6, #6
 800aeda:	fb16 2303 	smlabb	r3, r6, r3, r2
 800aede:	4a34      	ldr	r2, [pc, #208]	; (800afb0 <funchad35.constprop.0+0x1044>)
 800aee0:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800aee4:	2301      	movs	r3, #1
 800aee6:	ecb5 9a01 	vldmia	r5!, {s18}
 800aeea:	eeb4 9a67 	vcmp.f32	s18, s15
 800aeee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aef2:	f103 0201 	add.w	r2, r3, #1
 800aef6:	d114      	bne.n	800af22 <funchad35.constprop.0+0xfb6>
 800aef8:	42ac      	cmp	r4, r5
 800aefa:	b293      	uxth	r3, r2
 800aefc:	d1f3      	bne.n	800aee6 <funchad35.constprop.0+0xf7a>
 800aefe:	ee07 3a90 	vmov	s15, r3
 800af02:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800af06:	ee68 8aa9 	vmul.f32	s17, s17, s19
 800af0a:	eeb0 0a68 	vmov.f32	s0, s17
 800af0e:	f001 fa6b 	bl	800c3e8 <logf>
 800af12:	eea8 aa80 	vfma.f32	s20, s17, s0
 800af16:	eef1 7a4a 	vneg.f32	s15, s20
 800af1a:	edc6 7a00 	vstr	s15, [r6]
 800af1e:	f7ff baf6 	b.w	800a50e <funchad35.constprop.0+0x5a2>
 800af22:	ee07 3a90 	vmov	s15, r3
 800af26:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800af2a:	ee68 8aa9 	vmul.f32	s17, s17, s19
 800af2e:	eeb0 0a68 	vmov.f32	s0, s17
 800af32:	f001 fa59 	bl	800c3e8 <logf>
 800af36:	42ac      	cmp	r4, r5
 800af38:	eea8 aa80 	vfma.f32	s20, s17, s0
 800af3c:	d003      	beq.n	800af46 <funchad35.constprop.0+0xfda>
 800af3e:	eef0 7a49 	vmov.f32	s15, s18
 800af42:	2301      	movs	r3, #1
 800af44:	e7cf      	b.n	800aee6 <funchad35.constprop.0+0xf7a>
 800af46:	2301      	movs	r3, #1
 800af48:	e7d9      	b.n	800aefe <funchad35.constprop.0+0xf92>
 800af4a:	f89b 3016 	ldrb.w	r3, [fp, #22]
 800af4e:	2b05      	cmp	r3, #5
 800af50:	f67f aa63 	bls.w	800a41a <funchad35.constprop.0+0x4ae>
 800af54:	f7ff badb 	b.w	800a50e <funchad35.constprop.0+0x5a2>
 800af58:	f001 fa74 	bl	800c444 <sqrtf>
 800af5c:	f7ff bba4 	b.w	800a6a8 <funchad35.constprop.0+0x73c>
 800af60:	f001 fa70 	bl	800c444 <sqrtf>
 800af64:	42ae      	cmp	r6, r5
 800af66:	ed45 8a01 	vstr	s17, [r5, #-4]
 800af6a:	f47f abd8 	bne.w	800a71e <funchad35.constprop.0+0x7b2>
 800af6e:	f7ff bbe4 	b.w	800a73a <funchad35.constprop.0+0x7ce>
 800af72:	f001 fa67 	bl	800c444 <sqrtf>
 800af76:	f7ff bba5 	b.w	800a6c4 <funchad35.constprop.0+0x758>
 800af7a:	f001 fa63 	bl	800c444 <sqrtf>
 800af7e:	e79b      	b.n	800aeb8 <funchad35.constprop.0+0xf4c>
 800af80:	f001 fa60 	bl	800c444 <sqrtf>
 800af84:	ed97 6a00 	vldr	s12, [r7]
 800af88:	e750      	b.n	800ae2c <funchad35.constprop.0+0xec0>
 800af8a:	f001 fa5b 	bl	800c444 <sqrtf>
 800af8e:	ed97 6a00 	vldr	s12, [r7]
 800af92:	e6ee      	b.n	800ad72 <funchad35.constprop.0+0xe06>
 800af94:	f001 fa56 	bl	800c444 <sqrtf>
 800af98:	e6b0      	b.n	800acfc <funchad35.constprop.0+0xd90>
 800af9a:	f001 fa53 	bl	800c444 <sqrtf>
 800af9e:	e68b      	b.n	800acb8 <funchad35.constprop.0+0xd4c>
 800afa0:	f001 fa50 	bl	800c444 <sqrtf>
 800afa4:	e60f      	b.n	800abc6 <funchad35.constprop.0+0xc5a>
 800afa6:	bf00      	nop
 800afa8:	2000132c 	.word	0x2000132c
 800afac:	00000000 	.word	0x00000000
 800afb0:	200010a0 	.word	0x200010a0

0800afb4 <neai_anomalydetection_init>:
 800afb4:	b570      	push	{r4, r5, r6, lr}
 800afb6:	4c1d      	ldr	r4, [pc, #116]	; (800b02c <neai_anomalydetection_init+0x78>)
 800afb8:	2500      	movs	r5, #0
 800afba:	4629      	mov	r1, r5
 800afbc:	2290      	movs	r2, #144	; 0x90
 800afbe:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800afc2:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
 800afc6:	f000 fd33 	bl	800ba30 <memset>
 800afca:	4629      	mov	r1, r5
 800afcc:	2290      	movs	r2, #144	; 0x90
 800afce:	4620      	mov	r0, r4
 800afd0:	f000 fd2e 	bl	800ba30 <memset>
 800afd4:	4a16      	ldr	r2, [pc, #88]	; (800b030 <neai_anomalydetection_init+0x7c>)
 800afd6:	4b17      	ldr	r3, [pc, #92]	; (800b034 <neai_anomalydetection_init+0x80>)
 800afd8:	8812      	ldrh	r2, [r2, #0]
 800afda:	4917      	ldr	r1, [pc, #92]	; (800b038 <neai_anomalydetection_init+0x84>)
 800afdc:	6019      	str	r1, [r3, #0]
 800afde:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 800afe2:	4b16      	ldr	r3, [pc, #88]	; (800b03c <neai_anomalydetection_init+0x88>)
 800afe4:	4916      	ldr	r1, [pc, #88]	; (800b040 <neai_anomalydetection_init+0x8c>)
 800afe6:	4817      	ldr	r0, [pc, #92]	; (800b044 <neai_anomalydetection_init+0x90>)
 800afe8:	f8c4 6130 	str.w	r6, [r4, #304]	; 0x130
 800afec:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 800aff0:	4e15      	ldr	r6, [pc, #84]	; (800b048 <neai_anomalydetection_init+0x94>)
 800aff2:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
 800aff6:	2300      	movs	r3, #0
 800aff8:	2101      	movs	r1, #1
 800affa:	2aa5      	cmp	r2, #165	; 0xa5
 800affc:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800b000:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
 800b004:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
 800b008:	f884 1144 	strb.w	r1, [r4, #324]	; 0x144
 800b00c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800b010:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800b014:	d105      	bne.n	800b022 <neai_anomalydetection_init+0x6e>
 800b016:	f884 5145 	strb.w	r5, [r4, #325]	; 0x145
 800b01a:	f8a4 5146 	strh.w	r5, [r4, #326]	; 0x146
 800b01e:	4628      	mov	r0, r5
 800b020:	bd70      	pop	{r4, r5, r6, pc}
 800b022:	207c      	movs	r0, #124	; 0x7c
 800b024:	f884 0145 	strb.w	r0, [r4, #325]	; 0x145
 800b028:	bd70      	pop	{r4, r5, r6, pc}
 800b02a:	bf00      	nop
 800b02c:	200000ac 	.word	0x200000ac
 800b030:	1fff77f0 	.word	0x1fff77f0
 800b034:	20000048 	.word	0x20000048
 800b038:	3f7ae148 	.word	0x3f7ae148
 800b03c:	3f7d70a4 	.word	0x3f7d70a4
 800b040:	3ef0a3d7 	.word	0x3ef0a3d7
 800b044:	3d8f5c29 	.word	0x3d8f5c29
 800b048:	40400000 	.word	0x40400000
 800b04c:	00000000 	.word	0x00000000

0800b050 <neai_anomalydetection_learn>:
 800b050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b054:	ed2d 8b02 	vpush	{d8}
 800b058:	4c99      	ldr	r4, [pc, #612]	; (800b2c0 <neai_anomalydetection_learn+0x270>)
 800b05a:	f894 3144 	ldrb.w	r3, [r4, #324]	; 0x144
 800b05e:	2b01      	cmp	r3, #1
 800b060:	b085      	sub	sp, #20
 800b062:	f040 80b5 	bne.w	800b1d0 <neai_anomalydetection_learn+0x180>
 800b066:	f894 3145 	ldrb.w	r3, [r4, #325]	; 0x145
 800b06a:	2b7c      	cmp	r3, #124	; 0x7c
 800b06c:	f000 80aa 	beq.w	800b1c4 <neai_anomalydetection_learn+0x174>
 800b070:	f7fe ff7c 	bl	8009f6c <funchad35.constprop.0>
 800b074:	f8b4 7146 	ldrh.w	r7, [r4, #326]	; 0x146
 800b078:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
 800b07c:	3701      	adds	r7, #1
 800b07e:	1c6b      	adds	r3, r5, #1
 800b080:	b2bf      	uxth	r7, r7
 800b082:	2b02      	cmp	r3, #2
 800b084:	f8a4 7146 	strh.w	r7, [r4, #326]	; 0x146
 800b088:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800b08c:	f200 80a9 	bhi.w	800b1e2 <neai_anomalydetection_learn+0x192>
 800b090:	f8df c234 	ldr.w	ip, [pc, #564]	; 800b2c8 <neai_anomalydetection_learn+0x278>
 800b094:	4663      	mov	r3, ip
 800b096:	ba1a      	rev	r2, r3
 800b098:	2000      	movs	r0, #0
 800b09a:	1e59      	subs	r1, r3, #1
 800b09c:	400b      	ands	r3, r1
 800b09e:	f100 0001 	add.w	r0, r0, #1
 800b0a2:	d1fa      	bne.n	800b09a <neai_anomalydetection_learn+0x4a>
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	b122      	cbz	r2, 800b0b2 <neai_anomalydetection_learn+0x62>
 800b0a8:	1e54      	subs	r4, r2, #1
 800b0aa:	4022      	ands	r2, r4
 800b0ac:	f101 0101 	add.w	r1, r1, #1
 800b0b0:	d1fa      	bne.n	800b0a8 <neai_anomalydetection_learn+0x58>
 800b0b2:	1a09      	subs	r1, r1, r0
 800b0b4:	fab1 f181 	clz	r1, r1
 800b0b8:	0949      	lsrs	r1, r1, #5
 800b0ba:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800b0be:	eba2 0201 	sub.w	r2, r2, r1
 800b0c2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800b0c6:	eba2 0201 	sub.w	r2, r2, r1
 800b0ca:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800b0ce:	eba2 0201 	sub.w	r2, r2, r1
 800b0d2:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800b0d6:	440a      	add	r2, r1
 800b0d8:	ea4f 22c2 	mov.w	r2, r2, lsl #11
 800b0dc:	440a      	add	r2, r1
 800b0de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800b0e2:	eba2 0201 	sub.w	r2, r2, r1
 800b0e6:	ea4f 1242 	mov.w	r2, r2, lsl #5
 800b0ea:	ea6f 0202 	mvn.w	r2, r2
 800b0ee:	ba12      	rev	r2, r2
 800b0f0:	88d2      	ldrh	r2, [r2, #6]
 800b0f2:	1114      	asrs	r4, r2, #4
 800b0f4:	f002 010f 	and.w	r1, r2, #15
 800b0f8:	f000 80d1 	beq.w	800b29e <neai_anomalydetection_learn+0x24e>
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	4622      	mov	r2, r4
 800b100:	1e56      	subs	r6, r2, #1
 800b102:	4032      	ands	r2, r6
 800b104:	f100 0001 	add.w	r0, r0, #1
 800b108:	d1fa      	bne.n	800b100 <neai_anomalydetection_learn+0xb0>
 800b10a:	b179      	cbz	r1, 800b12c <neai_anomalydetection_learn+0xdc>
 800b10c:	460a      	mov	r2, r1
 800b10e:	1e56      	subs	r6, r2, #1
 800b110:	4032      	ands	r2, r6
 800b112:	f103 0301 	add.w	r3, r3, #1
 800b116:	d1fa      	bne.n	800b10e <neai_anomalydetection_learn+0xbe>
 800b118:	fb01 f104 	mul.w	r1, r1, r4
 800b11c:	4418      	add	r0, r3
 800b11e:	b129      	cbz	r1, 800b12c <neai_anomalydetection_learn+0xdc>
 800b120:	1e4b      	subs	r3, r1, #1
 800b122:	4019      	ands	r1, r3
 800b124:	f102 0201 	add.w	r2, r2, #1
 800b128:	d1fa      	bne.n	800b120 <neai_anomalydetection_learn+0xd0>
 800b12a:	4410      	add	r0, r2
 800b12c:	4e64      	ldr	r6, [pc, #400]	; (800b2c0 <neai_anomalydetection_learn+0x270>)
 800b12e:	3502      	adds	r5, #2
 800b130:	4634      	mov	r4, r6
 800b132:	ee07 5a90 	vmov	s15, r5
 800b136:	3807      	subs	r0, #7
 800b138:	f06f 0303 	mvn.w	r3, #3
 800b13c:	4460      	add	r0, ip
 800b13e:	3690      	adds	r6, #144	; 0x90
 800b140:	1b1b      	subs	r3, r3, r4
 800b142:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800b146:	f04f 0900 	mov.w	r9, #0
 800b14a:	4403      	add	r3, r0
 800b14c:	46b0      	mov	r8, r6
 800b14e:	4625      	mov	r5, r4
 800b150:	e003      	b.n	800b15a <neai_anomalydetection_learn+0x10a>
 800b152:	45a8      	cmp	r8, r5
 800b154:	f845 9c04 	str.w	r9, [r5, #-4]
 800b158:	d02e      	beq.n	800b1b8 <neai_anomalydetection_learn+0x168>
 800b15a:	ed96 7a00 	vldr	s14, [r6]
 800b15e:	ecf5 7a01 	vldmia	r5!, {s15}
 800b162:	ee27 0a07 	vmul.f32	s0, s14, s14
 800b166:	195a      	adds	r2, r3, r5
 800b168:	eef0 6a40 	vmov.f32	s13, s0
 800b16c:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800b170:	edd2 7a00 	vldr	s15, [r2]
 800b174:	eef0 5a66 	vmov.f32	s11, s13
 800b178:	eed7 5aa7 	vfnms.f32	s11, s15, s15
 800b17c:	ee37 6ac7 	vsub.f32	s12, s15, s14
 800b180:	ee85 0a88 	vdiv.f32	s0, s11, s16
 800b184:	eec6 7a08 	vdiv.f32	s15, s12, s16
 800b188:	ee30 0a26 	vadd.f32	s0, s0, s13
 800b18c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b190:	eea7 0ae7 	vfms.f32	s0, s15, s15
 800b194:	ece6 7a01 	vstmia	r6!, {s15}
 800b198:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a0:	dbd7      	blt.n	800b152 <neai_anomalydetection_learn+0x102>
 800b1a2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1aa:	eef1 8ac0 	vsqrt.f32	s17, s0
 800b1ae:	d478      	bmi.n	800b2a2 <neai_anomalydetection_learn+0x252>
 800b1b0:	45a8      	cmp	r8, r5
 800b1b2:	ed45 8a01 	vstr	s17, [r5, #-4]
 800b1b6:	d1d0      	bne.n	800b15a <neai_anomalydetection_learn+0x10a>
 800b1b8:	2f0a      	cmp	r7, #10
 800b1ba:	bf34      	ite	cc
 800b1bc:	237e      	movcc	r3, #126	; 0x7e
 800b1be:	237f      	movcs	r3, #127	; 0x7f
 800b1c0:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	b005      	add	sp, #20
 800b1c8:	ecbd 8b02 	vpop	{d8}
 800b1cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1d0:	237b      	movs	r3, #123	; 0x7b
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
 800b1d8:	b005      	add	sp, #20
 800b1da:	ecbd 8b02 	vpop	{d8}
 800b1de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	a903      	add	r1, sp, #12
 800b1e6:	a802      	add	r0, sp, #8
 800b1e8:	9302      	str	r3, [sp, #8]
 800b1ea:	9303      	str	r3, [sp, #12]
 800b1ec:	f7fe fe32 	bl	8009e54 <funchad14.constprop.0>
 800b1f0:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800b1f4:	edd4 5a49 	vldr	s11, [r4, #292]	; 0x124
 800b1f8:	ed94 6a4a 	vldr	s12, [r4, #296]	; 0x128
 800b1fc:	eddd 6a02 	vldr	s13, [sp, #8]
 800b200:	ed9d 7a03 	vldr	s14, [sp, #12]
 800b204:	3301      	adds	r3, #1
 800b206:	ee07 3a90 	vmov	s15, r3
 800b20a:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800b20e:	eeb8 5a67 	vcvt.f32.u32	s10, s15
 800b212:	ee37 7a46 	vsub.f32	s14, s14, s12
 800b216:	eec6 7a85 	vdiv.f32	s15, s13, s10
 800b21a:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 800b21e:	ee87 8a05 	vdiv.f32	s16, s14, s10
 800b222:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b226:	ee38 8a06 	vadd.f32	s16, s16, s12
 800b22a:	edc4 7a49 	vstr	s15, [r4, #292]	; 0x124
 800b22e:	ed84 8a4a 	vstr	s16, [r4, #296]	; 0x128
 800b232:	2b00      	cmp	r3, #0
 800b234:	f43f af2c 	beq.w	800b090 <neai_anomalydetection_learn+0x40>
 800b238:	edd4 8a4e 	vldr	s17, [r4, #312]	; 0x138
 800b23c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800b240:	ee17 0a90 	vmov	r0, s15
 800b244:	f7f5 faa2 	bl	800078c <__aeabi_f2d>
 800b248:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800b2b0 <neai_anomalydetection_learn+0x260>
 800b24c:	ec41 0b10 	vmov	d0, r0, r1
 800b250:	f001 f916 	bl	800c480 <fmax>
 800b254:	ec51 0b10 	vmov	r0, r1, d0
 800b258:	f7f5 fb78 	bl	800094c <__aeabi_d2f>
 800b25c:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800b260:	ee00 0a10 	vmov	s0, r0
 800b264:	f001 f964 	bl	800c530 <fminf>
 800b268:	ee68 7a28 	vmul.f32	s15, s16, s17
 800b26c:	ed84 0a4c 	vstr	s0, [r4, #304]	; 0x130
 800b270:	ee17 0a90 	vmov	r0, s15
 800b274:	f7f5 fa8a 	bl	800078c <__aeabi_f2d>
 800b278:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800b2b8 <neai_anomalydetection_learn+0x268>
 800b27c:	ec41 0b10 	vmov	d0, r0, r1
 800b280:	f001 f8fe 	bl	800c480 <fmax>
 800b284:	ec51 0b10 	vmov	r0, r1, d0
 800b288:	f7f5 fb60 	bl	800094c <__aeabi_d2f>
 800b28c:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800b2c4 <neai_anomalydetection_learn+0x274>
 800b290:	ee00 0a10 	vmov	s0, r0
 800b294:	f001 f94c 	bl	800c530 <fminf>
 800b298:	ed84 0a4d 	vstr	s0, [r4, #308]	; 0x134
 800b29c:	e6f8      	b.n	800b090 <neai_anomalydetection_learn+0x40>
 800b29e:	4620      	mov	r0, r4
 800b2a0:	e733      	b.n	800b10a <neai_anomalydetection_learn+0xba>
 800b2a2:	9301      	str	r3, [sp, #4]
 800b2a4:	f001 f8ce 	bl	800c444 <sqrtf>
 800b2a8:	9b01      	ldr	r3, [sp, #4]
 800b2aa:	e781      	b.n	800b1b0 <neai_anomalydetection_learn+0x160>
 800b2ac:	f3af 8000 	nop.w
 800b2b0:	00000000 	.word	0x00000000
 800b2b4:	3ff00000 	.word	0x3ff00000
 800b2b8:	00000000 	.word	0x00000000
 800b2bc:	40080000 	.word	0x40080000
 800b2c0:	200000ac 	.word	0x200000ac
 800b2c4:	42c80000 	.word	0x42c80000
 800b2c8:	20001528 	.word	0x20001528
 800b2cc:	00000000 	.word	0x00000000

0800b2d0 <neai_anomalydetection_detect>:
 800b2d0:	b530      	push	{r4, r5, lr}
 800b2d2:	4d79      	ldr	r5, [pc, #484]	; (800b4b8 <neai_anomalydetection_detect+0x1e8>)
 800b2d4:	f895 3145 	ldrb.w	r3, [r5, #325]	; 0x145
 800b2d8:	ed2d 8b02 	vpush	{d8}
 800b2dc:	460c      	mov	r4, r1
 800b2de:	f1a3 027c 	sub.w	r2, r3, #124	; 0x7c
 800b2e2:	21ff      	movs	r1, #255	; 0xff
 800b2e4:	2a02      	cmp	r2, #2
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	7021      	strb	r1, [r4, #0]
 800b2ea:	f240 80b2 	bls.w	800b452 <neai_anomalydetection_detect+0x182>
 800b2ee:	2b80      	cmp	r3, #128	; 0x80
 800b2f0:	f000 80af 	beq.w	800b452 <neai_anomalydetection_detect+0x182>
 800b2f4:	f8b5 3146 	ldrh.w	r3, [r5, #326]	; 0x146
 800b2f8:	2b09      	cmp	r3, #9
 800b2fa:	f240 80af 	bls.w	800b45c <neai_anomalydetection_detect+0x18c>
 800b2fe:	f7fe fe35 	bl	8009f6c <funchad35.constprop.0>
 800b302:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800b306:	2b00      	cmp	r3, #0
 800b308:	f000 80a1 	beq.w	800b44e <neai_anomalydetection_detect+0x17e>
 800b30c:	4b6b      	ldr	r3, [pc, #428]	; (800b4bc <neai_anomalydetection_detect+0x1ec>)
 800b30e:	6818      	ldr	r0, [r3, #0]
 800b310:	f7f5 fa3c 	bl	800078c <__aeabi_f2d>
 800b314:	a364      	add	r3, pc, #400	; (adr r3, 800b4a8 <neai_anomalydetection_detect+0x1d8>)
 800b316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31a:	f7f4 ffa9 	bl	8000270 <__aeabi_dmul>
 800b31e:	f7f5 fb15 	bl	800094c <__aeabi_d2f>
 800b322:	eddf 7a67 	vldr	s15, [pc, #412]	; 800b4c0 <neai_anomalydetection_detect+0x1f0>
 800b326:	ee08 0a10 	vmov	s16, r0
 800b32a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b332:	f2c0 809b 	blt.w	800b46c <neai_anomalydetection_detect+0x19c>
 800b336:	eddf 7a63 	vldr	s15, [pc, #396]	; 800b4c4 <neai_anomalydetection_detect+0x1f4>
 800b33a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b342:	f200 8093 	bhi.w	800b46c <neai_anomalydetection_detect+0x19c>
 800b346:	4b60      	ldr	r3, [pc, #384]	; (800b4c8 <neai_anomalydetection_detect+0x1f8>)
 800b348:	6018      	str	r0, [r3, #0]
 800b34a:	2300      	movs	r3, #0
 800b34c:	a903      	add	r1, sp, #12
 800b34e:	a802      	add	r0, sp, #8
 800b350:	9302      	str	r3, [sp, #8]
 800b352:	9303      	str	r3, [sp, #12]
 800b354:	f7fe fd7e 	bl	8009e54 <funchad14.constprop.0>
 800b358:	2224      	movs	r2, #36	; 0x24
 800b35a:	ba13      	rev	r3, r2
 800b35c:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800b360:	f1a3 0301 	sub.w	r3, r3, #1
 800b364:	eba2 0303 	sub.w	r3, r2, r3
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	ea4f 1203 	mov.w	r2, r3, lsl #4
 800b36e:	441a      	add	r2, r3
 800b370:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800b374:	eba2 0203 	sub.w	r2, r2, r3
 800b378:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800b37c:	441a      	add	r2, r3
 800b37e:	ea4f 22c2 	mov.w	r2, r2, lsl #11
 800b382:	441a      	add	r2, r3
 800b384:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800b388:	eba2 0203 	sub.w	r2, r2, r3
 800b38c:	ea4f 1242 	mov.w	r2, r2, lsl #5
 800b390:	ea6f 0202 	mvn.w	r2, r2
 800b394:	ba12      	rev	r2, r2
 800b396:	eddd 6a03 	vldr	s13, [sp, #12]
 800b39a:	ed95 6a4d 	vldr	s12, [r5, #308]	; 0x134
 800b39e:	edd5 7a50 	vldr	s15, [r5, #320]	; 0x140
 800b3a2:	ee68 6a26 	vmul.f32	s13, s16, s13
 800b3a6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b3aa:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800b3ae:	ee37 7a68 	vsub.f32	s14, s14, s17
 800b3b2:	ee37 7a07 	vadd.f32	s14, s14, s14
 800b3b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ba:	ee17 0a90 	vmov	r0, s15
 800b3be:	f7f5 f9e5 	bl	800078c <__aeabi_f2d>
 800b3c2:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 800b4b0 <neai_anomalydetection_detect+0x1e0>
 800b3c6:	ec41 0b10 	vmov	d0, r0, r1
 800b3ca:	f001 f859 	bl	800c480 <fmax>
 800b3ce:	ec51 0b10 	vmov	r0, r1, d0
 800b3d2:	f7f5 fabb 	bl	800094c <__aeabi_d2f>
 800b3d6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800b3da:	ee00 0a10 	vmov	s0, r0
 800b3de:	f001 f8a7 	bl	800c530 <fminf>
 800b3e2:	ed9d 7a02 	vldr	s14, [sp, #8]
 800b3e6:	edd5 5a4c 	vldr	s11, [r5, #304]	; 0x130
 800b3ea:	edd5 6a4f 	vldr	s13, [r5, #316]	; 0x13c
 800b3ee:	ee28 7a07 	vmul.f32	s14, s16, s14
 800b3f2:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 800b3f6:	eec7 7a25 	vdiv.f32	s15, s14, s11
 800b3fa:	ee28 8a06 	vmul.f32	s16, s16, s12
 800b3fe:	ee77 7ae8 	vsub.f32	s15, s15, s17
 800b402:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b406:	eea7 0aa6 	vfma.f32	s0, s15, s13
 800b40a:	ee68 7a00 	vmul.f32	s15, s16, s0
 800b40e:	ee17 0a90 	vmov	r0, s15
 800b412:	f7f5 f9bb 	bl	800078c <__aeabi_f2d>
 800b416:	ed9f 1b26 	vldr	d1, [pc, #152]	; 800b4b0 <neai_anomalydetection_detect+0x1e0>
 800b41a:	ec41 0b10 	vmov	d0, r0, r1
 800b41e:	f001 f82f 	bl	800c480 <fmax>
 800b422:	ec51 0b10 	vmov	r0, r1, d0
 800b426:	f7f5 fa91 	bl	800094c <__aeabi_d2f>
 800b42a:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800b42e:	ee00 0a10 	vmov	s0, r0
 800b432:	f001 f87d 	bl	800c530 <fminf>
 800b436:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800b43a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b43e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b442:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b446:	edcd 7a01 	vstr	s15, [sp, #4]
 800b44a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b44e:	7023      	strb	r3, [r4, #0]
 800b450:	2300      	movs	r3, #0
 800b452:	4618      	mov	r0, r3
 800b454:	b005      	add	sp, #20
 800b456:	ecbd 8b02 	vpop	{d8}
 800b45a:	bd30      	pop	{r4, r5, pc}
 800b45c:	237e      	movs	r3, #126	; 0x7e
 800b45e:	4618      	mov	r0, r3
 800b460:	f885 3145 	strb.w	r3, [r5, #325]	; 0x145
 800b464:	b005      	add	sp, #20
 800b466:	ecbd 8b02 	vpop	{d8}
 800b46a:	bd30      	pop	{r4, r5, pc}
 800b46c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b474:	dd13      	ble.n	800b49e <neai_anomalydetection_detect+0x1ce>
 800b476:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b4c0 <neai_anomalydetection_detect+0x1f0>
 800b47a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b482:	d505      	bpl.n	800b490 <neai_anomalydetection_detect+0x1c0>
 800b484:	4b10      	ldr	r3, [pc, #64]	; (800b4c8 <neai_anomalydetection_detect+0x1f8>)
 800b486:	eeb0 8a67 	vmov.f32	s16, s15
 800b48a:	edc3 7a00 	vstr	s15, [r3]
 800b48e:	e75c      	b.n	800b34a <neai_anomalydetection_detect+0x7a>
 800b490:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800b4c4 <neai_anomalydetection_detect+0x1f4>
 800b494:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b49c:	dcf2      	bgt.n	800b484 <neai_anomalydetection_detect+0x1b4>
 800b49e:	4b0a      	ldr	r3, [pc, #40]	; (800b4c8 <neai_anomalydetection_detect+0x1f8>)
 800b4a0:	ed93 8a00 	vldr	s16, [r3]
 800b4a4:	e751      	b.n	800b34a <neai_anomalydetection_detect+0x7a>
 800b4a6:	bf00      	nop
 800b4a8:	f5c28f5c 	.word	0xf5c28f5c
 800b4ac:	3fef5c28 	.word	0x3fef5c28
	...
 800b4b8:	200000ac 	.word	0x200000ac
 800b4bc:	2000004c 	.word	0x2000004c
 800b4c0:	3c23d70a 	.word	0x3c23d70a
 800b4c4:	42c80000 	.word	0x42c80000
 800b4c8:	20000048 	.word	0x20000048

0800b4cc <malloc>:
 800b4cc:	4b02      	ldr	r3, [pc, #8]	; (800b4d8 <malloc+0xc>)
 800b4ce:	4601      	mov	r1, r0
 800b4d0:	6818      	ldr	r0, [r3, #0]
 800b4d2:	f000 b82b 	b.w	800b52c <_malloc_r>
 800b4d6:	bf00      	nop
 800b4d8:	200000a8 	.word	0x200000a8

0800b4dc <free>:
 800b4dc:	4b02      	ldr	r3, [pc, #8]	; (800b4e8 <free+0xc>)
 800b4de:	4601      	mov	r1, r0
 800b4e0:	6818      	ldr	r0, [r3, #0]
 800b4e2:	f000 bb2f 	b.w	800bb44 <_free_r>
 800b4e6:	bf00      	nop
 800b4e8:	200000a8 	.word	0x200000a8

0800b4ec <sbrk_aligned>:
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	4e0e      	ldr	r6, [pc, #56]	; (800b528 <sbrk_aligned+0x3c>)
 800b4f0:	460c      	mov	r4, r1
 800b4f2:	6831      	ldr	r1, [r6, #0]
 800b4f4:	4605      	mov	r5, r0
 800b4f6:	b911      	cbnz	r1, 800b4fe <sbrk_aligned+0x12>
 800b4f8:	f000 fad6 	bl	800baa8 <_sbrk_r>
 800b4fc:	6030      	str	r0, [r6, #0]
 800b4fe:	4621      	mov	r1, r4
 800b500:	4628      	mov	r0, r5
 800b502:	f000 fad1 	bl	800baa8 <_sbrk_r>
 800b506:	1c43      	adds	r3, r0, #1
 800b508:	d00a      	beq.n	800b520 <sbrk_aligned+0x34>
 800b50a:	1cc4      	adds	r4, r0, #3
 800b50c:	f024 0403 	bic.w	r4, r4, #3
 800b510:	42a0      	cmp	r0, r4
 800b512:	d007      	beq.n	800b524 <sbrk_aligned+0x38>
 800b514:	1a21      	subs	r1, r4, r0
 800b516:	4628      	mov	r0, r5
 800b518:	f000 fac6 	bl	800baa8 <_sbrk_r>
 800b51c:	3001      	adds	r0, #1
 800b51e:	d101      	bne.n	800b524 <sbrk_aligned+0x38>
 800b520:	f04f 34ff 	mov.w	r4, #4294967295
 800b524:	4620      	mov	r0, r4
 800b526:	bd70      	pop	{r4, r5, r6, pc}
 800b528:	200015bc 	.word	0x200015bc

0800b52c <_malloc_r>:
 800b52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b530:	1ccd      	adds	r5, r1, #3
 800b532:	f025 0503 	bic.w	r5, r5, #3
 800b536:	3508      	adds	r5, #8
 800b538:	2d0c      	cmp	r5, #12
 800b53a:	bf38      	it	cc
 800b53c:	250c      	movcc	r5, #12
 800b53e:	2d00      	cmp	r5, #0
 800b540:	4607      	mov	r7, r0
 800b542:	db01      	blt.n	800b548 <_malloc_r+0x1c>
 800b544:	42a9      	cmp	r1, r5
 800b546:	d905      	bls.n	800b554 <_malloc_r+0x28>
 800b548:	230c      	movs	r3, #12
 800b54a:	603b      	str	r3, [r7, #0]
 800b54c:	2600      	movs	r6, #0
 800b54e:	4630      	mov	r0, r6
 800b550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b554:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b628 <_malloc_r+0xfc>
 800b558:	f000 f868 	bl	800b62c <__malloc_lock>
 800b55c:	f8d8 3000 	ldr.w	r3, [r8]
 800b560:	461c      	mov	r4, r3
 800b562:	bb5c      	cbnz	r4, 800b5bc <_malloc_r+0x90>
 800b564:	4629      	mov	r1, r5
 800b566:	4638      	mov	r0, r7
 800b568:	f7ff ffc0 	bl	800b4ec <sbrk_aligned>
 800b56c:	1c43      	adds	r3, r0, #1
 800b56e:	4604      	mov	r4, r0
 800b570:	d155      	bne.n	800b61e <_malloc_r+0xf2>
 800b572:	f8d8 4000 	ldr.w	r4, [r8]
 800b576:	4626      	mov	r6, r4
 800b578:	2e00      	cmp	r6, #0
 800b57a:	d145      	bne.n	800b608 <_malloc_r+0xdc>
 800b57c:	2c00      	cmp	r4, #0
 800b57e:	d048      	beq.n	800b612 <_malloc_r+0xe6>
 800b580:	6823      	ldr	r3, [r4, #0]
 800b582:	4631      	mov	r1, r6
 800b584:	4638      	mov	r0, r7
 800b586:	eb04 0903 	add.w	r9, r4, r3
 800b58a:	f000 fa8d 	bl	800baa8 <_sbrk_r>
 800b58e:	4581      	cmp	r9, r0
 800b590:	d13f      	bne.n	800b612 <_malloc_r+0xe6>
 800b592:	6821      	ldr	r1, [r4, #0]
 800b594:	1a6d      	subs	r5, r5, r1
 800b596:	4629      	mov	r1, r5
 800b598:	4638      	mov	r0, r7
 800b59a:	f7ff ffa7 	bl	800b4ec <sbrk_aligned>
 800b59e:	3001      	adds	r0, #1
 800b5a0:	d037      	beq.n	800b612 <_malloc_r+0xe6>
 800b5a2:	6823      	ldr	r3, [r4, #0]
 800b5a4:	442b      	add	r3, r5
 800b5a6:	6023      	str	r3, [r4, #0]
 800b5a8:	f8d8 3000 	ldr.w	r3, [r8]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d038      	beq.n	800b622 <_malloc_r+0xf6>
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	42a2      	cmp	r2, r4
 800b5b4:	d12b      	bne.n	800b60e <_malloc_r+0xe2>
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	605a      	str	r2, [r3, #4]
 800b5ba:	e00f      	b.n	800b5dc <_malloc_r+0xb0>
 800b5bc:	6822      	ldr	r2, [r4, #0]
 800b5be:	1b52      	subs	r2, r2, r5
 800b5c0:	d41f      	bmi.n	800b602 <_malloc_r+0xd6>
 800b5c2:	2a0b      	cmp	r2, #11
 800b5c4:	d917      	bls.n	800b5f6 <_malloc_r+0xca>
 800b5c6:	1961      	adds	r1, r4, r5
 800b5c8:	42a3      	cmp	r3, r4
 800b5ca:	6025      	str	r5, [r4, #0]
 800b5cc:	bf18      	it	ne
 800b5ce:	6059      	strne	r1, [r3, #4]
 800b5d0:	6863      	ldr	r3, [r4, #4]
 800b5d2:	bf08      	it	eq
 800b5d4:	f8c8 1000 	streq.w	r1, [r8]
 800b5d8:	5162      	str	r2, [r4, r5]
 800b5da:	604b      	str	r3, [r1, #4]
 800b5dc:	4638      	mov	r0, r7
 800b5de:	f104 060b 	add.w	r6, r4, #11
 800b5e2:	f000 f829 	bl	800b638 <__malloc_unlock>
 800b5e6:	f026 0607 	bic.w	r6, r6, #7
 800b5ea:	1d23      	adds	r3, r4, #4
 800b5ec:	1af2      	subs	r2, r6, r3
 800b5ee:	d0ae      	beq.n	800b54e <_malloc_r+0x22>
 800b5f0:	1b9b      	subs	r3, r3, r6
 800b5f2:	50a3      	str	r3, [r4, r2]
 800b5f4:	e7ab      	b.n	800b54e <_malloc_r+0x22>
 800b5f6:	42a3      	cmp	r3, r4
 800b5f8:	6862      	ldr	r2, [r4, #4]
 800b5fa:	d1dd      	bne.n	800b5b8 <_malloc_r+0x8c>
 800b5fc:	f8c8 2000 	str.w	r2, [r8]
 800b600:	e7ec      	b.n	800b5dc <_malloc_r+0xb0>
 800b602:	4623      	mov	r3, r4
 800b604:	6864      	ldr	r4, [r4, #4]
 800b606:	e7ac      	b.n	800b562 <_malloc_r+0x36>
 800b608:	4634      	mov	r4, r6
 800b60a:	6876      	ldr	r6, [r6, #4]
 800b60c:	e7b4      	b.n	800b578 <_malloc_r+0x4c>
 800b60e:	4613      	mov	r3, r2
 800b610:	e7cc      	b.n	800b5ac <_malloc_r+0x80>
 800b612:	230c      	movs	r3, #12
 800b614:	603b      	str	r3, [r7, #0]
 800b616:	4638      	mov	r0, r7
 800b618:	f000 f80e 	bl	800b638 <__malloc_unlock>
 800b61c:	e797      	b.n	800b54e <_malloc_r+0x22>
 800b61e:	6025      	str	r5, [r4, #0]
 800b620:	e7dc      	b.n	800b5dc <_malloc_r+0xb0>
 800b622:	605b      	str	r3, [r3, #4]
 800b624:	deff      	udf	#255	; 0xff
 800b626:	bf00      	nop
 800b628:	200015b8 	.word	0x200015b8

0800b62c <__malloc_lock>:
 800b62c:	4801      	ldr	r0, [pc, #4]	; (800b634 <__malloc_lock+0x8>)
 800b62e:	f000 ba87 	b.w	800bb40 <__retarget_lock_acquire_recursive>
 800b632:	bf00      	nop
 800b634:	20001700 	.word	0x20001700

0800b638 <__malloc_unlock>:
 800b638:	4801      	ldr	r0, [pc, #4]	; (800b640 <__malloc_unlock+0x8>)
 800b63a:	f000 ba82 	b.w	800bb42 <__retarget_lock_release_recursive>
 800b63e:	bf00      	nop
 800b640:	20001700 	.word	0x20001700

0800b644 <std>:
 800b644:	2300      	movs	r3, #0
 800b646:	b510      	push	{r4, lr}
 800b648:	4604      	mov	r4, r0
 800b64a:	e9c0 3300 	strd	r3, r3, [r0]
 800b64e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b652:	6083      	str	r3, [r0, #8]
 800b654:	8181      	strh	r1, [r0, #12]
 800b656:	6643      	str	r3, [r0, #100]	; 0x64
 800b658:	81c2      	strh	r2, [r0, #14]
 800b65a:	6183      	str	r3, [r0, #24]
 800b65c:	4619      	mov	r1, r3
 800b65e:	2208      	movs	r2, #8
 800b660:	305c      	adds	r0, #92	; 0x5c
 800b662:	f000 f9e5 	bl	800ba30 <memset>
 800b666:	4b05      	ldr	r3, [pc, #20]	; (800b67c <std+0x38>)
 800b668:	6263      	str	r3, [r4, #36]	; 0x24
 800b66a:	4b05      	ldr	r3, [pc, #20]	; (800b680 <std+0x3c>)
 800b66c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b66e:	4b05      	ldr	r3, [pc, #20]	; (800b684 <std+0x40>)
 800b670:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b672:	4b05      	ldr	r3, [pc, #20]	; (800b688 <std+0x44>)
 800b674:	6224      	str	r4, [r4, #32]
 800b676:	6323      	str	r3, [r4, #48]	; 0x30
 800b678:	bd10      	pop	{r4, pc}
 800b67a:	bf00      	nop
 800b67c:	0800b881 	.word	0x0800b881
 800b680:	0800b8a3 	.word	0x0800b8a3
 800b684:	0800b8db 	.word	0x0800b8db
 800b688:	0800b8ff 	.word	0x0800b8ff

0800b68c <stdio_exit_handler>:
 800b68c:	4a02      	ldr	r2, [pc, #8]	; (800b698 <stdio_exit_handler+0xc>)
 800b68e:	4903      	ldr	r1, [pc, #12]	; (800b69c <stdio_exit_handler+0x10>)
 800b690:	4803      	ldr	r0, [pc, #12]	; (800b6a0 <stdio_exit_handler+0x14>)
 800b692:	f000 b869 	b.w	800b768 <_fwalk_sglue>
 800b696:	bf00      	nop
 800b698:	20000050 	.word	0x20000050
 800b69c:	0800c291 	.word	0x0800c291
 800b6a0:	2000005c 	.word	0x2000005c

0800b6a4 <cleanup_stdio>:
 800b6a4:	6841      	ldr	r1, [r0, #4]
 800b6a6:	4b0c      	ldr	r3, [pc, #48]	; (800b6d8 <cleanup_stdio+0x34>)
 800b6a8:	4299      	cmp	r1, r3
 800b6aa:	b510      	push	{r4, lr}
 800b6ac:	4604      	mov	r4, r0
 800b6ae:	d001      	beq.n	800b6b4 <cleanup_stdio+0x10>
 800b6b0:	f000 fdee 	bl	800c290 <_fflush_r>
 800b6b4:	68a1      	ldr	r1, [r4, #8]
 800b6b6:	4b09      	ldr	r3, [pc, #36]	; (800b6dc <cleanup_stdio+0x38>)
 800b6b8:	4299      	cmp	r1, r3
 800b6ba:	d002      	beq.n	800b6c2 <cleanup_stdio+0x1e>
 800b6bc:	4620      	mov	r0, r4
 800b6be:	f000 fde7 	bl	800c290 <_fflush_r>
 800b6c2:	68e1      	ldr	r1, [r4, #12]
 800b6c4:	4b06      	ldr	r3, [pc, #24]	; (800b6e0 <cleanup_stdio+0x3c>)
 800b6c6:	4299      	cmp	r1, r3
 800b6c8:	d004      	beq.n	800b6d4 <cleanup_stdio+0x30>
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6d0:	f000 bdde 	b.w	800c290 <_fflush_r>
 800b6d4:	bd10      	pop	{r4, pc}
 800b6d6:	bf00      	nop
 800b6d8:	200015c0 	.word	0x200015c0
 800b6dc:	20001628 	.word	0x20001628
 800b6e0:	20001690 	.word	0x20001690

0800b6e4 <global_stdio_init.part.0>:
 800b6e4:	b510      	push	{r4, lr}
 800b6e6:	4b0b      	ldr	r3, [pc, #44]	; (800b714 <global_stdio_init.part.0+0x30>)
 800b6e8:	4c0b      	ldr	r4, [pc, #44]	; (800b718 <global_stdio_init.part.0+0x34>)
 800b6ea:	4a0c      	ldr	r2, [pc, #48]	; (800b71c <global_stdio_init.part.0+0x38>)
 800b6ec:	601a      	str	r2, [r3, #0]
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	2104      	movs	r1, #4
 800b6f4:	f7ff ffa6 	bl	800b644 <std>
 800b6f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	2109      	movs	r1, #9
 800b700:	f7ff ffa0 	bl	800b644 <std>
 800b704:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b708:	2202      	movs	r2, #2
 800b70a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b70e:	2112      	movs	r1, #18
 800b710:	f7ff bf98 	b.w	800b644 <std>
 800b714:	200016f8 	.word	0x200016f8
 800b718:	200015c0 	.word	0x200015c0
 800b71c:	0800b68d 	.word	0x0800b68d

0800b720 <__sfp_lock_acquire>:
 800b720:	4801      	ldr	r0, [pc, #4]	; (800b728 <__sfp_lock_acquire+0x8>)
 800b722:	f000 ba0d 	b.w	800bb40 <__retarget_lock_acquire_recursive>
 800b726:	bf00      	nop
 800b728:	20001701 	.word	0x20001701

0800b72c <__sfp_lock_release>:
 800b72c:	4801      	ldr	r0, [pc, #4]	; (800b734 <__sfp_lock_release+0x8>)
 800b72e:	f000 ba08 	b.w	800bb42 <__retarget_lock_release_recursive>
 800b732:	bf00      	nop
 800b734:	20001701 	.word	0x20001701

0800b738 <__sinit>:
 800b738:	b510      	push	{r4, lr}
 800b73a:	4604      	mov	r4, r0
 800b73c:	f7ff fff0 	bl	800b720 <__sfp_lock_acquire>
 800b740:	6a23      	ldr	r3, [r4, #32]
 800b742:	b11b      	cbz	r3, 800b74c <__sinit+0x14>
 800b744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b748:	f7ff bff0 	b.w	800b72c <__sfp_lock_release>
 800b74c:	4b04      	ldr	r3, [pc, #16]	; (800b760 <__sinit+0x28>)
 800b74e:	6223      	str	r3, [r4, #32]
 800b750:	4b04      	ldr	r3, [pc, #16]	; (800b764 <__sinit+0x2c>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1f5      	bne.n	800b744 <__sinit+0xc>
 800b758:	f7ff ffc4 	bl	800b6e4 <global_stdio_init.part.0>
 800b75c:	e7f2      	b.n	800b744 <__sinit+0xc>
 800b75e:	bf00      	nop
 800b760:	0800b6a5 	.word	0x0800b6a5
 800b764:	200016f8 	.word	0x200016f8

0800b768 <_fwalk_sglue>:
 800b768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b76c:	4607      	mov	r7, r0
 800b76e:	4688      	mov	r8, r1
 800b770:	4614      	mov	r4, r2
 800b772:	2600      	movs	r6, #0
 800b774:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b778:	f1b9 0901 	subs.w	r9, r9, #1
 800b77c:	d505      	bpl.n	800b78a <_fwalk_sglue+0x22>
 800b77e:	6824      	ldr	r4, [r4, #0]
 800b780:	2c00      	cmp	r4, #0
 800b782:	d1f7      	bne.n	800b774 <_fwalk_sglue+0xc>
 800b784:	4630      	mov	r0, r6
 800b786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b78a:	89ab      	ldrh	r3, [r5, #12]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d907      	bls.n	800b7a0 <_fwalk_sglue+0x38>
 800b790:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b794:	3301      	adds	r3, #1
 800b796:	d003      	beq.n	800b7a0 <_fwalk_sglue+0x38>
 800b798:	4629      	mov	r1, r5
 800b79a:	4638      	mov	r0, r7
 800b79c:	47c0      	blx	r8
 800b79e:	4306      	orrs	r6, r0
 800b7a0:	3568      	adds	r5, #104	; 0x68
 800b7a2:	e7e9      	b.n	800b778 <_fwalk_sglue+0x10>

0800b7a4 <iprintf>:
 800b7a4:	b40f      	push	{r0, r1, r2, r3}
 800b7a6:	b507      	push	{r0, r1, r2, lr}
 800b7a8:	4906      	ldr	r1, [pc, #24]	; (800b7c4 <iprintf+0x20>)
 800b7aa:	ab04      	add	r3, sp, #16
 800b7ac:	6808      	ldr	r0, [r1, #0]
 800b7ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7b2:	6881      	ldr	r1, [r0, #8]
 800b7b4:	9301      	str	r3, [sp, #4]
 800b7b6:	f000 fa3b 	bl	800bc30 <_vfiprintf_r>
 800b7ba:	b003      	add	sp, #12
 800b7bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7c0:	b004      	add	sp, #16
 800b7c2:	4770      	bx	lr
 800b7c4:	200000a8 	.word	0x200000a8

0800b7c8 <_puts_r>:
 800b7c8:	6a03      	ldr	r3, [r0, #32]
 800b7ca:	b570      	push	{r4, r5, r6, lr}
 800b7cc:	6884      	ldr	r4, [r0, #8]
 800b7ce:	4605      	mov	r5, r0
 800b7d0:	460e      	mov	r6, r1
 800b7d2:	b90b      	cbnz	r3, 800b7d8 <_puts_r+0x10>
 800b7d4:	f7ff ffb0 	bl	800b738 <__sinit>
 800b7d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7da:	07db      	lsls	r3, r3, #31
 800b7dc:	d405      	bmi.n	800b7ea <_puts_r+0x22>
 800b7de:	89a3      	ldrh	r3, [r4, #12]
 800b7e0:	0598      	lsls	r0, r3, #22
 800b7e2:	d402      	bmi.n	800b7ea <_puts_r+0x22>
 800b7e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7e6:	f000 f9ab 	bl	800bb40 <__retarget_lock_acquire_recursive>
 800b7ea:	89a3      	ldrh	r3, [r4, #12]
 800b7ec:	0719      	lsls	r1, r3, #28
 800b7ee:	d513      	bpl.n	800b818 <_puts_r+0x50>
 800b7f0:	6923      	ldr	r3, [r4, #16]
 800b7f2:	b18b      	cbz	r3, 800b818 <_puts_r+0x50>
 800b7f4:	3e01      	subs	r6, #1
 800b7f6:	68a3      	ldr	r3, [r4, #8]
 800b7f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	60a3      	str	r3, [r4, #8]
 800b800:	b9e9      	cbnz	r1, 800b83e <_puts_r+0x76>
 800b802:	2b00      	cmp	r3, #0
 800b804:	da2e      	bge.n	800b864 <_puts_r+0x9c>
 800b806:	4622      	mov	r2, r4
 800b808:	210a      	movs	r1, #10
 800b80a:	4628      	mov	r0, r5
 800b80c:	f000 f87b 	bl	800b906 <__swbuf_r>
 800b810:	3001      	adds	r0, #1
 800b812:	d007      	beq.n	800b824 <_puts_r+0x5c>
 800b814:	250a      	movs	r5, #10
 800b816:	e007      	b.n	800b828 <_puts_r+0x60>
 800b818:	4621      	mov	r1, r4
 800b81a:	4628      	mov	r0, r5
 800b81c:	f000 f8b0 	bl	800b980 <__swsetup_r>
 800b820:	2800      	cmp	r0, #0
 800b822:	d0e7      	beq.n	800b7f4 <_puts_r+0x2c>
 800b824:	f04f 35ff 	mov.w	r5, #4294967295
 800b828:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b82a:	07da      	lsls	r2, r3, #31
 800b82c:	d405      	bmi.n	800b83a <_puts_r+0x72>
 800b82e:	89a3      	ldrh	r3, [r4, #12]
 800b830:	059b      	lsls	r3, r3, #22
 800b832:	d402      	bmi.n	800b83a <_puts_r+0x72>
 800b834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b836:	f000 f984 	bl	800bb42 <__retarget_lock_release_recursive>
 800b83a:	4628      	mov	r0, r5
 800b83c:	bd70      	pop	{r4, r5, r6, pc}
 800b83e:	2b00      	cmp	r3, #0
 800b840:	da04      	bge.n	800b84c <_puts_r+0x84>
 800b842:	69a2      	ldr	r2, [r4, #24]
 800b844:	429a      	cmp	r2, r3
 800b846:	dc06      	bgt.n	800b856 <_puts_r+0x8e>
 800b848:	290a      	cmp	r1, #10
 800b84a:	d004      	beq.n	800b856 <_puts_r+0x8e>
 800b84c:	6823      	ldr	r3, [r4, #0]
 800b84e:	1c5a      	adds	r2, r3, #1
 800b850:	6022      	str	r2, [r4, #0]
 800b852:	7019      	strb	r1, [r3, #0]
 800b854:	e7cf      	b.n	800b7f6 <_puts_r+0x2e>
 800b856:	4622      	mov	r2, r4
 800b858:	4628      	mov	r0, r5
 800b85a:	f000 f854 	bl	800b906 <__swbuf_r>
 800b85e:	3001      	adds	r0, #1
 800b860:	d1c9      	bne.n	800b7f6 <_puts_r+0x2e>
 800b862:	e7df      	b.n	800b824 <_puts_r+0x5c>
 800b864:	6823      	ldr	r3, [r4, #0]
 800b866:	250a      	movs	r5, #10
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	6022      	str	r2, [r4, #0]
 800b86c:	701d      	strb	r5, [r3, #0]
 800b86e:	e7db      	b.n	800b828 <_puts_r+0x60>

0800b870 <puts>:
 800b870:	4b02      	ldr	r3, [pc, #8]	; (800b87c <puts+0xc>)
 800b872:	4601      	mov	r1, r0
 800b874:	6818      	ldr	r0, [r3, #0]
 800b876:	f7ff bfa7 	b.w	800b7c8 <_puts_r>
 800b87a:	bf00      	nop
 800b87c:	200000a8 	.word	0x200000a8

0800b880 <__sread>:
 800b880:	b510      	push	{r4, lr}
 800b882:	460c      	mov	r4, r1
 800b884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b888:	f000 f8fc 	bl	800ba84 <_read_r>
 800b88c:	2800      	cmp	r0, #0
 800b88e:	bfab      	itete	ge
 800b890:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b892:	89a3      	ldrhlt	r3, [r4, #12]
 800b894:	181b      	addge	r3, r3, r0
 800b896:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b89a:	bfac      	ite	ge
 800b89c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b89e:	81a3      	strhlt	r3, [r4, #12]
 800b8a0:	bd10      	pop	{r4, pc}

0800b8a2 <__swrite>:
 800b8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a6:	461f      	mov	r7, r3
 800b8a8:	898b      	ldrh	r3, [r1, #12]
 800b8aa:	05db      	lsls	r3, r3, #23
 800b8ac:	4605      	mov	r5, r0
 800b8ae:	460c      	mov	r4, r1
 800b8b0:	4616      	mov	r6, r2
 800b8b2:	d505      	bpl.n	800b8c0 <__swrite+0x1e>
 800b8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b8:	2302      	movs	r3, #2
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f000 f8d0 	bl	800ba60 <_lseek_r>
 800b8c0:	89a3      	ldrh	r3, [r4, #12]
 800b8c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8ca:	81a3      	strh	r3, [r4, #12]
 800b8cc:	4632      	mov	r2, r6
 800b8ce:	463b      	mov	r3, r7
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d6:	f000 b8f7 	b.w	800bac8 <_write_r>

0800b8da <__sseek>:
 800b8da:	b510      	push	{r4, lr}
 800b8dc:	460c      	mov	r4, r1
 800b8de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8e2:	f000 f8bd 	bl	800ba60 <_lseek_r>
 800b8e6:	1c43      	adds	r3, r0, #1
 800b8e8:	89a3      	ldrh	r3, [r4, #12]
 800b8ea:	bf15      	itete	ne
 800b8ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800b8ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b8f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b8f6:	81a3      	strheq	r3, [r4, #12]
 800b8f8:	bf18      	it	ne
 800b8fa:	81a3      	strhne	r3, [r4, #12]
 800b8fc:	bd10      	pop	{r4, pc}

0800b8fe <__sclose>:
 800b8fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b902:	f000 b89d 	b.w	800ba40 <_close_r>

0800b906 <__swbuf_r>:
 800b906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b908:	460e      	mov	r6, r1
 800b90a:	4614      	mov	r4, r2
 800b90c:	4605      	mov	r5, r0
 800b90e:	b118      	cbz	r0, 800b918 <__swbuf_r+0x12>
 800b910:	6a03      	ldr	r3, [r0, #32]
 800b912:	b90b      	cbnz	r3, 800b918 <__swbuf_r+0x12>
 800b914:	f7ff ff10 	bl	800b738 <__sinit>
 800b918:	69a3      	ldr	r3, [r4, #24]
 800b91a:	60a3      	str	r3, [r4, #8]
 800b91c:	89a3      	ldrh	r3, [r4, #12]
 800b91e:	071a      	lsls	r2, r3, #28
 800b920:	d525      	bpl.n	800b96e <__swbuf_r+0x68>
 800b922:	6923      	ldr	r3, [r4, #16]
 800b924:	b31b      	cbz	r3, 800b96e <__swbuf_r+0x68>
 800b926:	6823      	ldr	r3, [r4, #0]
 800b928:	6922      	ldr	r2, [r4, #16]
 800b92a:	1a98      	subs	r0, r3, r2
 800b92c:	6963      	ldr	r3, [r4, #20]
 800b92e:	b2f6      	uxtb	r6, r6
 800b930:	4283      	cmp	r3, r0
 800b932:	4637      	mov	r7, r6
 800b934:	dc04      	bgt.n	800b940 <__swbuf_r+0x3a>
 800b936:	4621      	mov	r1, r4
 800b938:	4628      	mov	r0, r5
 800b93a:	f000 fca9 	bl	800c290 <_fflush_r>
 800b93e:	b9e0      	cbnz	r0, 800b97a <__swbuf_r+0x74>
 800b940:	68a3      	ldr	r3, [r4, #8]
 800b942:	3b01      	subs	r3, #1
 800b944:	60a3      	str	r3, [r4, #8]
 800b946:	6823      	ldr	r3, [r4, #0]
 800b948:	1c5a      	adds	r2, r3, #1
 800b94a:	6022      	str	r2, [r4, #0]
 800b94c:	701e      	strb	r6, [r3, #0]
 800b94e:	6962      	ldr	r2, [r4, #20]
 800b950:	1c43      	adds	r3, r0, #1
 800b952:	429a      	cmp	r2, r3
 800b954:	d004      	beq.n	800b960 <__swbuf_r+0x5a>
 800b956:	89a3      	ldrh	r3, [r4, #12]
 800b958:	07db      	lsls	r3, r3, #31
 800b95a:	d506      	bpl.n	800b96a <__swbuf_r+0x64>
 800b95c:	2e0a      	cmp	r6, #10
 800b95e:	d104      	bne.n	800b96a <__swbuf_r+0x64>
 800b960:	4621      	mov	r1, r4
 800b962:	4628      	mov	r0, r5
 800b964:	f000 fc94 	bl	800c290 <_fflush_r>
 800b968:	b938      	cbnz	r0, 800b97a <__swbuf_r+0x74>
 800b96a:	4638      	mov	r0, r7
 800b96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b96e:	4621      	mov	r1, r4
 800b970:	4628      	mov	r0, r5
 800b972:	f000 f805 	bl	800b980 <__swsetup_r>
 800b976:	2800      	cmp	r0, #0
 800b978:	d0d5      	beq.n	800b926 <__swbuf_r+0x20>
 800b97a:	f04f 37ff 	mov.w	r7, #4294967295
 800b97e:	e7f4      	b.n	800b96a <__swbuf_r+0x64>

0800b980 <__swsetup_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4b2a      	ldr	r3, [pc, #168]	; (800ba2c <__swsetup_r+0xac>)
 800b984:	4605      	mov	r5, r0
 800b986:	6818      	ldr	r0, [r3, #0]
 800b988:	460c      	mov	r4, r1
 800b98a:	b118      	cbz	r0, 800b994 <__swsetup_r+0x14>
 800b98c:	6a03      	ldr	r3, [r0, #32]
 800b98e:	b90b      	cbnz	r3, 800b994 <__swsetup_r+0x14>
 800b990:	f7ff fed2 	bl	800b738 <__sinit>
 800b994:	89a3      	ldrh	r3, [r4, #12]
 800b996:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b99a:	0718      	lsls	r0, r3, #28
 800b99c:	d422      	bmi.n	800b9e4 <__swsetup_r+0x64>
 800b99e:	06d9      	lsls	r1, r3, #27
 800b9a0:	d407      	bmi.n	800b9b2 <__swsetup_r+0x32>
 800b9a2:	2309      	movs	r3, #9
 800b9a4:	602b      	str	r3, [r5, #0]
 800b9a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b9aa:	81a3      	strh	r3, [r4, #12]
 800b9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b0:	e034      	b.n	800ba1c <__swsetup_r+0x9c>
 800b9b2:	0758      	lsls	r0, r3, #29
 800b9b4:	d512      	bpl.n	800b9dc <__swsetup_r+0x5c>
 800b9b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9b8:	b141      	cbz	r1, 800b9cc <__swsetup_r+0x4c>
 800b9ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9be:	4299      	cmp	r1, r3
 800b9c0:	d002      	beq.n	800b9c8 <__swsetup_r+0x48>
 800b9c2:	4628      	mov	r0, r5
 800b9c4:	f000 f8be 	bl	800bb44 <_free_r>
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	6363      	str	r3, [r4, #52]	; 0x34
 800b9cc:	89a3      	ldrh	r3, [r4, #12]
 800b9ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b9d2:	81a3      	strh	r3, [r4, #12]
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	6063      	str	r3, [r4, #4]
 800b9d8:	6923      	ldr	r3, [r4, #16]
 800b9da:	6023      	str	r3, [r4, #0]
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	f043 0308 	orr.w	r3, r3, #8
 800b9e2:	81a3      	strh	r3, [r4, #12]
 800b9e4:	6923      	ldr	r3, [r4, #16]
 800b9e6:	b94b      	cbnz	r3, 800b9fc <__swsetup_r+0x7c>
 800b9e8:	89a3      	ldrh	r3, [r4, #12]
 800b9ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b9ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9f2:	d003      	beq.n	800b9fc <__swsetup_r+0x7c>
 800b9f4:	4621      	mov	r1, r4
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f000 fc98 	bl	800c32c <__smakebuf_r>
 800b9fc:	89a0      	ldrh	r0, [r4, #12]
 800b9fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba02:	f010 0301 	ands.w	r3, r0, #1
 800ba06:	d00a      	beq.n	800ba1e <__swsetup_r+0x9e>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	60a3      	str	r3, [r4, #8]
 800ba0c:	6963      	ldr	r3, [r4, #20]
 800ba0e:	425b      	negs	r3, r3
 800ba10:	61a3      	str	r3, [r4, #24]
 800ba12:	6923      	ldr	r3, [r4, #16]
 800ba14:	b943      	cbnz	r3, 800ba28 <__swsetup_r+0xa8>
 800ba16:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba1a:	d1c4      	bne.n	800b9a6 <__swsetup_r+0x26>
 800ba1c:	bd38      	pop	{r3, r4, r5, pc}
 800ba1e:	0781      	lsls	r1, r0, #30
 800ba20:	bf58      	it	pl
 800ba22:	6963      	ldrpl	r3, [r4, #20]
 800ba24:	60a3      	str	r3, [r4, #8]
 800ba26:	e7f4      	b.n	800ba12 <__swsetup_r+0x92>
 800ba28:	2000      	movs	r0, #0
 800ba2a:	e7f7      	b.n	800ba1c <__swsetup_r+0x9c>
 800ba2c:	200000a8 	.word	0x200000a8

0800ba30 <memset>:
 800ba30:	4402      	add	r2, r0
 800ba32:	4603      	mov	r3, r0
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d100      	bne.n	800ba3a <memset+0xa>
 800ba38:	4770      	bx	lr
 800ba3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ba3e:	e7f9      	b.n	800ba34 <memset+0x4>

0800ba40 <_close_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4d06      	ldr	r5, [pc, #24]	; (800ba5c <_close_r+0x1c>)
 800ba44:	2300      	movs	r3, #0
 800ba46:	4604      	mov	r4, r0
 800ba48:	4608      	mov	r0, r1
 800ba4a:	602b      	str	r3, [r5, #0]
 800ba4c:	f7f5 fffd 	bl	8001a4a <_close>
 800ba50:	1c43      	adds	r3, r0, #1
 800ba52:	d102      	bne.n	800ba5a <_close_r+0x1a>
 800ba54:	682b      	ldr	r3, [r5, #0]
 800ba56:	b103      	cbz	r3, 800ba5a <_close_r+0x1a>
 800ba58:	6023      	str	r3, [r4, #0]
 800ba5a:	bd38      	pop	{r3, r4, r5, pc}
 800ba5c:	200016fc 	.word	0x200016fc

0800ba60 <_lseek_r>:
 800ba60:	b538      	push	{r3, r4, r5, lr}
 800ba62:	4d07      	ldr	r5, [pc, #28]	; (800ba80 <_lseek_r+0x20>)
 800ba64:	4604      	mov	r4, r0
 800ba66:	4608      	mov	r0, r1
 800ba68:	4611      	mov	r1, r2
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	602a      	str	r2, [r5, #0]
 800ba6e:	461a      	mov	r2, r3
 800ba70:	f7f6 f812 	bl	8001a98 <_lseek>
 800ba74:	1c43      	adds	r3, r0, #1
 800ba76:	d102      	bne.n	800ba7e <_lseek_r+0x1e>
 800ba78:	682b      	ldr	r3, [r5, #0]
 800ba7a:	b103      	cbz	r3, 800ba7e <_lseek_r+0x1e>
 800ba7c:	6023      	str	r3, [r4, #0]
 800ba7e:	bd38      	pop	{r3, r4, r5, pc}
 800ba80:	200016fc 	.word	0x200016fc

0800ba84 <_read_r>:
 800ba84:	b538      	push	{r3, r4, r5, lr}
 800ba86:	4d07      	ldr	r5, [pc, #28]	; (800baa4 <_read_r+0x20>)
 800ba88:	4604      	mov	r4, r0
 800ba8a:	4608      	mov	r0, r1
 800ba8c:	4611      	mov	r1, r2
 800ba8e:	2200      	movs	r2, #0
 800ba90:	602a      	str	r2, [r5, #0]
 800ba92:	461a      	mov	r2, r3
 800ba94:	f7f5 ffa0 	bl	80019d8 <_read>
 800ba98:	1c43      	adds	r3, r0, #1
 800ba9a:	d102      	bne.n	800baa2 <_read_r+0x1e>
 800ba9c:	682b      	ldr	r3, [r5, #0]
 800ba9e:	b103      	cbz	r3, 800baa2 <_read_r+0x1e>
 800baa0:	6023      	str	r3, [r4, #0]
 800baa2:	bd38      	pop	{r3, r4, r5, pc}
 800baa4:	200016fc 	.word	0x200016fc

0800baa8 <_sbrk_r>:
 800baa8:	b538      	push	{r3, r4, r5, lr}
 800baaa:	4d06      	ldr	r5, [pc, #24]	; (800bac4 <_sbrk_r+0x1c>)
 800baac:	2300      	movs	r3, #0
 800baae:	4604      	mov	r4, r0
 800bab0:	4608      	mov	r0, r1
 800bab2:	602b      	str	r3, [r5, #0]
 800bab4:	f7f5 fffe 	bl	8001ab4 <_sbrk>
 800bab8:	1c43      	adds	r3, r0, #1
 800baba:	d102      	bne.n	800bac2 <_sbrk_r+0x1a>
 800babc:	682b      	ldr	r3, [r5, #0]
 800babe:	b103      	cbz	r3, 800bac2 <_sbrk_r+0x1a>
 800bac0:	6023      	str	r3, [r4, #0]
 800bac2:	bd38      	pop	{r3, r4, r5, pc}
 800bac4:	200016fc 	.word	0x200016fc

0800bac8 <_write_r>:
 800bac8:	b538      	push	{r3, r4, r5, lr}
 800baca:	4d07      	ldr	r5, [pc, #28]	; (800bae8 <_write_r+0x20>)
 800bacc:	4604      	mov	r4, r0
 800bace:	4608      	mov	r0, r1
 800bad0:	4611      	mov	r1, r2
 800bad2:	2200      	movs	r2, #0
 800bad4:	602a      	str	r2, [r5, #0]
 800bad6:	461a      	mov	r2, r3
 800bad8:	f7f5 ff9b 	bl	8001a12 <_write>
 800badc:	1c43      	adds	r3, r0, #1
 800bade:	d102      	bne.n	800bae6 <_write_r+0x1e>
 800bae0:	682b      	ldr	r3, [r5, #0]
 800bae2:	b103      	cbz	r3, 800bae6 <_write_r+0x1e>
 800bae4:	6023      	str	r3, [r4, #0]
 800bae6:	bd38      	pop	{r3, r4, r5, pc}
 800bae8:	200016fc 	.word	0x200016fc

0800baec <__errno>:
 800baec:	4b01      	ldr	r3, [pc, #4]	; (800baf4 <__errno+0x8>)
 800baee:	6818      	ldr	r0, [r3, #0]
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	200000a8 	.word	0x200000a8

0800baf8 <__libc_init_array>:
 800baf8:	b570      	push	{r4, r5, r6, lr}
 800bafa:	4d0d      	ldr	r5, [pc, #52]	; (800bb30 <__libc_init_array+0x38>)
 800bafc:	4c0d      	ldr	r4, [pc, #52]	; (800bb34 <__libc_init_array+0x3c>)
 800bafe:	1b64      	subs	r4, r4, r5
 800bb00:	10a4      	asrs	r4, r4, #2
 800bb02:	2600      	movs	r6, #0
 800bb04:	42a6      	cmp	r6, r4
 800bb06:	d109      	bne.n	800bb1c <__libc_init_array+0x24>
 800bb08:	4d0b      	ldr	r5, [pc, #44]	; (800bb38 <__libc_init_array+0x40>)
 800bb0a:	4c0c      	ldr	r4, [pc, #48]	; (800bb3c <__libc_init_array+0x44>)
 800bb0c:	f000 fe3e 	bl	800c78c <_init>
 800bb10:	1b64      	subs	r4, r4, r5
 800bb12:	10a4      	asrs	r4, r4, #2
 800bb14:	2600      	movs	r6, #0
 800bb16:	42a6      	cmp	r6, r4
 800bb18:	d105      	bne.n	800bb26 <__libc_init_array+0x2e>
 800bb1a:	bd70      	pop	{r4, r5, r6, pc}
 800bb1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb20:	4798      	blx	r3
 800bb22:	3601      	adds	r6, #1
 800bb24:	e7ee      	b.n	800bb04 <__libc_init_array+0xc>
 800bb26:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb2a:	4798      	blx	r3
 800bb2c:	3601      	adds	r6, #1
 800bb2e:	e7f2      	b.n	800bb16 <__libc_init_array+0x1e>
 800bb30:	0800c898 	.word	0x0800c898
 800bb34:	0800c898 	.word	0x0800c898
 800bb38:	0800c898 	.word	0x0800c898
 800bb3c:	0800c89c 	.word	0x0800c89c

0800bb40 <__retarget_lock_acquire_recursive>:
 800bb40:	4770      	bx	lr

0800bb42 <__retarget_lock_release_recursive>:
 800bb42:	4770      	bx	lr

0800bb44 <_free_r>:
 800bb44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb46:	2900      	cmp	r1, #0
 800bb48:	d044      	beq.n	800bbd4 <_free_r+0x90>
 800bb4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb4e:	9001      	str	r0, [sp, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f1a1 0404 	sub.w	r4, r1, #4
 800bb56:	bfb8      	it	lt
 800bb58:	18e4      	addlt	r4, r4, r3
 800bb5a:	f7ff fd67 	bl	800b62c <__malloc_lock>
 800bb5e:	4a1e      	ldr	r2, [pc, #120]	; (800bbd8 <_free_r+0x94>)
 800bb60:	9801      	ldr	r0, [sp, #4]
 800bb62:	6813      	ldr	r3, [r2, #0]
 800bb64:	b933      	cbnz	r3, 800bb74 <_free_r+0x30>
 800bb66:	6063      	str	r3, [r4, #4]
 800bb68:	6014      	str	r4, [r2, #0]
 800bb6a:	b003      	add	sp, #12
 800bb6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb70:	f7ff bd62 	b.w	800b638 <__malloc_unlock>
 800bb74:	42a3      	cmp	r3, r4
 800bb76:	d908      	bls.n	800bb8a <_free_r+0x46>
 800bb78:	6825      	ldr	r5, [r4, #0]
 800bb7a:	1961      	adds	r1, r4, r5
 800bb7c:	428b      	cmp	r3, r1
 800bb7e:	bf01      	itttt	eq
 800bb80:	6819      	ldreq	r1, [r3, #0]
 800bb82:	685b      	ldreq	r3, [r3, #4]
 800bb84:	1949      	addeq	r1, r1, r5
 800bb86:	6021      	streq	r1, [r4, #0]
 800bb88:	e7ed      	b.n	800bb66 <_free_r+0x22>
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	b10b      	cbz	r3, 800bb94 <_free_r+0x50>
 800bb90:	42a3      	cmp	r3, r4
 800bb92:	d9fa      	bls.n	800bb8a <_free_r+0x46>
 800bb94:	6811      	ldr	r1, [r2, #0]
 800bb96:	1855      	adds	r5, r2, r1
 800bb98:	42a5      	cmp	r5, r4
 800bb9a:	d10b      	bne.n	800bbb4 <_free_r+0x70>
 800bb9c:	6824      	ldr	r4, [r4, #0]
 800bb9e:	4421      	add	r1, r4
 800bba0:	1854      	adds	r4, r2, r1
 800bba2:	42a3      	cmp	r3, r4
 800bba4:	6011      	str	r1, [r2, #0]
 800bba6:	d1e0      	bne.n	800bb6a <_free_r+0x26>
 800bba8:	681c      	ldr	r4, [r3, #0]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	6053      	str	r3, [r2, #4]
 800bbae:	440c      	add	r4, r1
 800bbb0:	6014      	str	r4, [r2, #0]
 800bbb2:	e7da      	b.n	800bb6a <_free_r+0x26>
 800bbb4:	d902      	bls.n	800bbbc <_free_r+0x78>
 800bbb6:	230c      	movs	r3, #12
 800bbb8:	6003      	str	r3, [r0, #0]
 800bbba:	e7d6      	b.n	800bb6a <_free_r+0x26>
 800bbbc:	6825      	ldr	r5, [r4, #0]
 800bbbe:	1961      	adds	r1, r4, r5
 800bbc0:	428b      	cmp	r3, r1
 800bbc2:	bf04      	itt	eq
 800bbc4:	6819      	ldreq	r1, [r3, #0]
 800bbc6:	685b      	ldreq	r3, [r3, #4]
 800bbc8:	6063      	str	r3, [r4, #4]
 800bbca:	bf04      	itt	eq
 800bbcc:	1949      	addeq	r1, r1, r5
 800bbce:	6021      	streq	r1, [r4, #0]
 800bbd0:	6054      	str	r4, [r2, #4]
 800bbd2:	e7ca      	b.n	800bb6a <_free_r+0x26>
 800bbd4:	b003      	add	sp, #12
 800bbd6:	bd30      	pop	{r4, r5, pc}
 800bbd8:	200015b8 	.word	0x200015b8

0800bbdc <__sfputc_r>:
 800bbdc:	6893      	ldr	r3, [r2, #8]
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	b410      	push	{r4}
 800bbe4:	6093      	str	r3, [r2, #8]
 800bbe6:	da08      	bge.n	800bbfa <__sfputc_r+0x1e>
 800bbe8:	6994      	ldr	r4, [r2, #24]
 800bbea:	42a3      	cmp	r3, r4
 800bbec:	db01      	blt.n	800bbf2 <__sfputc_r+0x16>
 800bbee:	290a      	cmp	r1, #10
 800bbf0:	d103      	bne.n	800bbfa <__sfputc_r+0x1e>
 800bbf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbf6:	f7ff be86 	b.w	800b906 <__swbuf_r>
 800bbfa:	6813      	ldr	r3, [r2, #0]
 800bbfc:	1c58      	adds	r0, r3, #1
 800bbfe:	6010      	str	r0, [r2, #0]
 800bc00:	7019      	strb	r1, [r3, #0]
 800bc02:	4608      	mov	r0, r1
 800bc04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc08:	4770      	bx	lr

0800bc0a <__sfputs_r>:
 800bc0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0c:	4606      	mov	r6, r0
 800bc0e:	460f      	mov	r7, r1
 800bc10:	4614      	mov	r4, r2
 800bc12:	18d5      	adds	r5, r2, r3
 800bc14:	42ac      	cmp	r4, r5
 800bc16:	d101      	bne.n	800bc1c <__sfputs_r+0x12>
 800bc18:	2000      	movs	r0, #0
 800bc1a:	e007      	b.n	800bc2c <__sfputs_r+0x22>
 800bc1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc20:	463a      	mov	r2, r7
 800bc22:	4630      	mov	r0, r6
 800bc24:	f7ff ffda 	bl	800bbdc <__sfputc_r>
 800bc28:	1c43      	adds	r3, r0, #1
 800bc2a:	d1f3      	bne.n	800bc14 <__sfputs_r+0xa>
 800bc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc30 <_vfiprintf_r>:
 800bc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc34:	460d      	mov	r5, r1
 800bc36:	b09d      	sub	sp, #116	; 0x74
 800bc38:	4614      	mov	r4, r2
 800bc3a:	4698      	mov	r8, r3
 800bc3c:	4606      	mov	r6, r0
 800bc3e:	b118      	cbz	r0, 800bc48 <_vfiprintf_r+0x18>
 800bc40:	6a03      	ldr	r3, [r0, #32]
 800bc42:	b90b      	cbnz	r3, 800bc48 <_vfiprintf_r+0x18>
 800bc44:	f7ff fd78 	bl	800b738 <__sinit>
 800bc48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc4a:	07d9      	lsls	r1, r3, #31
 800bc4c:	d405      	bmi.n	800bc5a <_vfiprintf_r+0x2a>
 800bc4e:	89ab      	ldrh	r3, [r5, #12]
 800bc50:	059a      	lsls	r2, r3, #22
 800bc52:	d402      	bmi.n	800bc5a <_vfiprintf_r+0x2a>
 800bc54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc56:	f7ff ff73 	bl	800bb40 <__retarget_lock_acquire_recursive>
 800bc5a:	89ab      	ldrh	r3, [r5, #12]
 800bc5c:	071b      	lsls	r3, r3, #28
 800bc5e:	d501      	bpl.n	800bc64 <_vfiprintf_r+0x34>
 800bc60:	692b      	ldr	r3, [r5, #16]
 800bc62:	b99b      	cbnz	r3, 800bc8c <_vfiprintf_r+0x5c>
 800bc64:	4629      	mov	r1, r5
 800bc66:	4630      	mov	r0, r6
 800bc68:	f7ff fe8a 	bl	800b980 <__swsetup_r>
 800bc6c:	b170      	cbz	r0, 800bc8c <_vfiprintf_r+0x5c>
 800bc6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc70:	07dc      	lsls	r4, r3, #31
 800bc72:	d504      	bpl.n	800bc7e <_vfiprintf_r+0x4e>
 800bc74:	f04f 30ff 	mov.w	r0, #4294967295
 800bc78:	b01d      	add	sp, #116	; 0x74
 800bc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc7e:	89ab      	ldrh	r3, [r5, #12]
 800bc80:	0598      	lsls	r0, r3, #22
 800bc82:	d4f7      	bmi.n	800bc74 <_vfiprintf_r+0x44>
 800bc84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc86:	f7ff ff5c 	bl	800bb42 <__retarget_lock_release_recursive>
 800bc8a:	e7f3      	b.n	800bc74 <_vfiprintf_r+0x44>
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc90:	2320      	movs	r3, #32
 800bc92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc96:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc9a:	2330      	movs	r3, #48	; 0x30
 800bc9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800be50 <_vfiprintf_r+0x220>
 800bca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bca4:	f04f 0901 	mov.w	r9, #1
 800bca8:	4623      	mov	r3, r4
 800bcaa:	469a      	mov	sl, r3
 800bcac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcb0:	b10a      	cbz	r2, 800bcb6 <_vfiprintf_r+0x86>
 800bcb2:	2a25      	cmp	r2, #37	; 0x25
 800bcb4:	d1f9      	bne.n	800bcaa <_vfiprintf_r+0x7a>
 800bcb6:	ebba 0b04 	subs.w	fp, sl, r4
 800bcba:	d00b      	beq.n	800bcd4 <_vfiprintf_r+0xa4>
 800bcbc:	465b      	mov	r3, fp
 800bcbe:	4622      	mov	r2, r4
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	f7ff ffa1 	bl	800bc0a <__sfputs_r>
 800bcc8:	3001      	adds	r0, #1
 800bcca:	f000 80a9 	beq.w	800be20 <_vfiprintf_r+0x1f0>
 800bcce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcd0:	445a      	add	r2, fp
 800bcd2:	9209      	str	r2, [sp, #36]	; 0x24
 800bcd4:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f000 80a1 	beq.w	800be20 <_vfiprintf_r+0x1f0>
 800bcde:	2300      	movs	r3, #0
 800bce0:	f04f 32ff 	mov.w	r2, #4294967295
 800bce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bce8:	f10a 0a01 	add.w	sl, sl, #1
 800bcec:	9304      	str	r3, [sp, #16]
 800bcee:	9307      	str	r3, [sp, #28]
 800bcf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcf4:	931a      	str	r3, [sp, #104]	; 0x68
 800bcf6:	4654      	mov	r4, sl
 800bcf8:	2205      	movs	r2, #5
 800bcfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcfe:	4854      	ldr	r0, [pc, #336]	; (800be50 <_vfiprintf_r+0x220>)
 800bd00:	f7f4 fa66 	bl	80001d0 <memchr>
 800bd04:	9a04      	ldr	r2, [sp, #16]
 800bd06:	b9d8      	cbnz	r0, 800bd40 <_vfiprintf_r+0x110>
 800bd08:	06d1      	lsls	r1, r2, #27
 800bd0a:	bf44      	itt	mi
 800bd0c:	2320      	movmi	r3, #32
 800bd0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd12:	0713      	lsls	r3, r2, #28
 800bd14:	bf44      	itt	mi
 800bd16:	232b      	movmi	r3, #43	; 0x2b
 800bd18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd1c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd20:	2b2a      	cmp	r3, #42	; 0x2a
 800bd22:	d015      	beq.n	800bd50 <_vfiprintf_r+0x120>
 800bd24:	9a07      	ldr	r2, [sp, #28]
 800bd26:	4654      	mov	r4, sl
 800bd28:	2000      	movs	r0, #0
 800bd2a:	f04f 0c0a 	mov.w	ip, #10
 800bd2e:	4621      	mov	r1, r4
 800bd30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd34:	3b30      	subs	r3, #48	; 0x30
 800bd36:	2b09      	cmp	r3, #9
 800bd38:	d94d      	bls.n	800bdd6 <_vfiprintf_r+0x1a6>
 800bd3a:	b1b0      	cbz	r0, 800bd6a <_vfiprintf_r+0x13a>
 800bd3c:	9207      	str	r2, [sp, #28]
 800bd3e:	e014      	b.n	800bd6a <_vfiprintf_r+0x13a>
 800bd40:	eba0 0308 	sub.w	r3, r0, r8
 800bd44:	fa09 f303 	lsl.w	r3, r9, r3
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	9304      	str	r3, [sp, #16]
 800bd4c:	46a2      	mov	sl, r4
 800bd4e:	e7d2      	b.n	800bcf6 <_vfiprintf_r+0xc6>
 800bd50:	9b03      	ldr	r3, [sp, #12]
 800bd52:	1d19      	adds	r1, r3, #4
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	9103      	str	r1, [sp, #12]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	bfbb      	ittet	lt
 800bd5c:	425b      	neglt	r3, r3
 800bd5e:	f042 0202 	orrlt.w	r2, r2, #2
 800bd62:	9307      	strge	r3, [sp, #28]
 800bd64:	9307      	strlt	r3, [sp, #28]
 800bd66:	bfb8      	it	lt
 800bd68:	9204      	strlt	r2, [sp, #16]
 800bd6a:	7823      	ldrb	r3, [r4, #0]
 800bd6c:	2b2e      	cmp	r3, #46	; 0x2e
 800bd6e:	d10c      	bne.n	800bd8a <_vfiprintf_r+0x15a>
 800bd70:	7863      	ldrb	r3, [r4, #1]
 800bd72:	2b2a      	cmp	r3, #42	; 0x2a
 800bd74:	d134      	bne.n	800bde0 <_vfiprintf_r+0x1b0>
 800bd76:	9b03      	ldr	r3, [sp, #12]
 800bd78:	1d1a      	adds	r2, r3, #4
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	9203      	str	r2, [sp, #12]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	bfb8      	it	lt
 800bd82:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd86:	3402      	adds	r4, #2
 800bd88:	9305      	str	r3, [sp, #20]
 800bd8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800be60 <_vfiprintf_r+0x230>
 800bd8e:	7821      	ldrb	r1, [r4, #0]
 800bd90:	2203      	movs	r2, #3
 800bd92:	4650      	mov	r0, sl
 800bd94:	f7f4 fa1c 	bl	80001d0 <memchr>
 800bd98:	b138      	cbz	r0, 800bdaa <_vfiprintf_r+0x17a>
 800bd9a:	9b04      	ldr	r3, [sp, #16]
 800bd9c:	eba0 000a 	sub.w	r0, r0, sl
 800bda0:	2240      	movs	r2, #64	; 0x40
 800bda2:	4082      	lsls	r2, r0
 800bda4:	4313      	orrs	r3, r2
 800bda6:	3401      	adds	r4, #1
 800bda8:	9304      	str	r3, [sp, #16]
 800bdaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdae:	4829      	ldr	r0, [pc, #164]	; (800be54 <_vfiprintf_r+0x224>)
 800bdb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdb4:	2206      	movs	r2, #6
 800bdb6:	f7f4 fa0b 	bl	80001d0 <memchr>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d03f      	beq.n	800be3e <_vfiprintf_r+0x20e>
 800bdbe:	4b26      	ldr	r3, [pc, #152]	; (800be58 <_vfiprintf_r+0x228>)
 800bdc0:	bb1b      	cbnz	r3, 800be0a <_vfiprintf_r+0x1da>
 800bdc2:	9b03      	ldr	r3, [sp, #12]
 800bdc4:	3307      	adds	r3, #7
 800bdc6:	f023 0307 	bic.w	r3, r3, #7
 800bdca:	3308      	adds	r3, #8
 800bdcc:	9303      	str	r3, [sp, #12]
 800bdce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdd0:	443b      	add	r3, r7
 800bdd2:	9309      	str	r3, [sp, #36]	; 0x24
 800bdd4:	e768      	b.n	800bca8 <_vfiprintf_r+0x78>
 800bdd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdda:	460c      	mov	r4, r1
 800bddc:	2001      	movs	r0, #1
 800bdde:	e7a6      	b.n	800bd2e <_vfiprintf_r+0xfe>
 800bde0:	2300      	movs	r3, #0
 800bde2:	3401      	adds	r4, #1
 800bde4:	9305      	str	r3, [sp, #20]
 800bde6:	4619      	mov	r1, r3
 800bde8:	f04f 0c0a 	mov.w	ip, #10
 800bdec:	4620      	mov	r0, r4
 800bdee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdf2:	3a30      	subs	r2, #48	; 0x30
 800bdf4:	2a09      	cmp	r2, #9
 800bdf6:	d903      	bls.n	800be00 <_vfiprintf_r+0x1d0>
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d0c6      	beq.n	800bd8a <_vfiprintf_r+0x15a>
 800bdfc:	9105      	str	r1, [sp, #20]
 800bdfe:	e7c4      	b.n	800bd8a <_vfiprintf_r+0x15a>
 800be00:	fb0c 2101 	mla	r1, ip, r1, r2
 800be04:	4604      	mov	r4, r0
 800be06:	2301      	movs	r3, #1
 800be08:	e7f0      	b.n	800bdec <_vfiprintf_r+0x1bc>
 800be0a:	ab03      	add	r3, sp, #12
 800be0c:	9300      	str	r3, [sp, #0]
 800be0e:	462a      	mov	r2, r5
 800be10:	4b12      	ldr	r3, [pc, #72]	; (800be5c <_vfiprintf_r+0x22c>)
 800be12:	a904      	add	r1, sp, #16
 800be14:	4630      	mov	r0, r6
 800be16:	f3af 8000 	nop.w
 800be1a:	4607      	mov	r7, r0
 800be1c:	1c78      	adds	r0, r7, #1
 800be1e:	d1d6      	bne.n	800bdce <_vfiprintf_r+0x19e>
 800be20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be22:	07d9      	lsls	r1, r3, #31
 800be24:	d405      	bmi.n	800be32 <_vfiprintf_r+0x202>
 800be26:	89ab      	ldrh	r3, [r5, #12]
 800be28:	059a      	lsls	r2, r3, #22
 800be2a:	d402      	bmi.n	800be32 <_vfiprintf_r+0x202>
 800be2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be2e:	f7ff fe88 	bl	800bb42 <__retarget_lock_release_recursive>
 800be32:	89ab      	ldrh	r3, [r5, #12]
 800be34:	065b      	lsls	r3, r3, #25
 800be36:	f53f af1d 	bmi.w	800bc74 <_vfiprintf_r+0x44>
 800be3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be3c:	e71c      	b.n	800bc78 <_vfiprintf_r+0x48>
 800be3e:	ab03      	add	r3, sp, #12
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	462a      	mov	r2, r5
 800be44:	4b05      	ldr	r3, [pc, #20]	; (800be5c <_vfiprintf_r+0x22c>)
 800be46:	a904      	add	r1, sp, #16
 800be48:	4630      	mov	r0, r6
 800be4a:	f000 f879 	bl	800bf40 <_printf_i>
 800be4e:	e7e4      	b.n	800be1a <_vfiprintf_r+0x1ea>
 800be50:	0800c85c 	.word	0x0800c85c
 800be54:	0800c866 	.word	0x0800c866
 800be58:	00000000 	.word	0x00000000
 800be5c:	0800bc0b 	.word	0x0800bc0b
 800be60:	0800c862 	.word	0x0800c862

0800be64 <_printf_common>:
 800be64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be68:	4616      	mov	r6, r2
 800be6a:	4699      	mov	r9, r3
 800be6c:	688a      	ldr	r2, [r1, #8]
 800be6e:	690b      	ldr	r3, [r1, #16]
 800be70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be74:	4293      	cmp	r3, r2
 800be76:	bfb8      	it	lt
 800be78:	4613      	movlt	r3, r2
 800be7a:	6033      	str	r3, [r6, #0]
 800be7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be80:	4607      	mov	r7, r0
 800be82:	460c      	mov	r4, r1
 800be84:	b10a      	cbz	r2, 800be8a <_printf_common+0x26>
 800be86:	3301      	adds	r3, #1
 800be88:	6033      	str	r3, [r6, #0]
 800be8a:	6823      	ldr	r3, [r4, #0]
 800be8c:	0699      	lsls	r1, r3, #26
 800be8e:	bf42      	ittt	mi
 800be90:	6833      	ldrmi	r3, [r6, #0]
 800be92:	3302      	addmi	r3, #2
 800be94:	6033      	strmi	r3, [r6, #0]
 800be96:	6825      	ldr	r5, [r4, #0]
 800be98:	f015 0506 	ands.w	r5, r5, #6
 800be9c:	d106      	bne.n	800beac <_printf_common+0x48>
 800be9e:	f104 0a19 	add.w	sl, r4, #25
 800bea2:	68e3      	ldr	r3, [r4, #12]
 800bea4:	6832      	ldr	r2, [r6, #0]
 800bea6:	1a9b      	subs	r3, r3, r2
 800bea8:	42ab      	cmp	r3, r5
 800beaa:	dc26      	bgt.n	800befa <_printf_common+0x96>
 800beac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800beb0:	1e13      	subs	r3, r2, #0
 800beb2:	6822      	ldr	r2, [r4, #0]
 800beb4:	bf18      	it	ne
 800beb6:	2301      	movne	r3, #1
 800beb8:	0692      	lsls	r2, r2, #26
 800beba:	d42b      	bmi.n	800bf14 <_printf_common+0xb0>
 800bebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bec0:	4649      	mov	r1, r9
 800bec2:	4638      	mov	r0, r7
 800bec4:	47c0      	blx	r8
 800bec6:	3001      	adds	r0, #1
 800bec8:	d01e      	beq.n	800bf08 <_printf_common+0xa4>
 800beca:	6823      	ldr	r3, [r4, #0]
 800becc:	6922      	ldr	r2, [r4, #16]
 800bece:	f003 0306 	and.w	r3, r3, #6
 800bed2:	2b04      	cmp	r3, #4
 800bed4:	bf02      	ittt	eq
 800bed6:	68e5      	ldreq	r5, [r4, #12]
 800bed8:	6833      	ldreq	r3, [r6, #0]
 800beda:	1aed      	subeq	r5, r5, r3
 800bedc:	68a3      	ldr	r3, [r4, #8]
 800bede:	bf0c      	ite	eq
 800bee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bee4:	2500      	movne	r5, #0
 800bee6:	4293      	cmp	r3, r2
 800bee8:	bfc4      	itt	gt
 800beea:	1a9b      	subgt	r3, r3, r2
 800beec:	18ed      	addgt	r5, r5, r3
 800beee:	2600      	movs	r6, #0
 800bef0:	341a      	adds	r4, #26
 800bef2:	42b5      	cmp	r5, r6
 800bef4:	d11a      	bne.n	800bf2c <_printf_common+0xc8>
 800bef6:	2000      	movs	r0, #0
 800bef8:	e008      	b.n	800bf0c <_printf_common+0xa8>
 800befa:	2301      	movs	r3, #1
 800befc:	4652      	mov	r2, sl
 800befe:	4649      	mov	r1, r9
 800bf00:	4638      	mov	r0, r7
 800bf02:	47c0      	blx	r8
 800bf04:	3001      	adds	r0, #1
 800bf06:	d103      	bne.n	800bf10 <_printf_common+0xac>
 800bf08:	f04f 30ff 	mov.w	r0, #4294967295
 800bf0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf10:	3501      	adds	r5, #1
 800bf12:	e7c6      	b.n	800bea2 <_printf_common+0x3e>
 800bf14:	18e1      	adds	r1, r4, r3
 800bf16:	1c5a      	adds	r2, r3, #1
 800bf18:	2030      	movs	r0, #48	; 0x30
 800bf1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf1e:	4422      	add	r2, r4
 800bf20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf28:	3302      	adds	r3, #2
 800bf2a:	e7c7      	b.n	800bebc <_printf_common+0x58>
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	4622      	mov	r2, r4
 800bf30:	4649      	mov	r1, r9
 800bf32:	4638      	mov	r0, r7
 800bf34:	47c0      	blx	r8
 800bf36:	3001      	adds	r0, #1
 800bf38:	d0e6      	beq.n	800bf08 <_printf_common+0xa4>
 800bf3a:	3601      	adds	r6, #1
 800bf3c:	e7d9      	b.n	800bef2 <_printf_common+0x8e>
	...

0800bf40 <_printf_i>:
 800bf40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf44:	7e0f      	ldrb	r7, [r1, #24]
 800bf46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf48:	2f78      	cmp	r7, #120	; 0x78
 800bf4a:	4691      	mov	r9, r2
 800bf4c:	4680      	mov	r8, r0
 800bf4e:	460c      	mov	r4, r1
 800bf50:	469a      	mov	sl, r3
 800bf52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf56:	d807      	bhi.n	800bf68 <_printf_i+0x28>
 800bf58:	2f62      	cmp	r7, #98	; 0x62
 800bf5a:	d80a      	bhi.n	800bf72 <_printf_i+0x32>
 800bf5c:	2f00      	cmp	r7, #0
 800bf5e:	f000 80d4 	beq.w	800c10a <_printf_i+0x1ca>
 800bf62:	2f58      	cmp	r7, #88	; 0x58
 800bf64:	f000 80c0 	beq.w	800c0e8 <_printf_i+0x1a8>
 800bf68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf70:	e03a      	b.n	800bfe8 <_printf_i+0xa8>
 800bf72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf76:	2b15      	cmp	r3, #21
 800bf78:	d8f6      	bhi.n	800bf68 <_printf_i+0x28>
 800bf7a:	a101      	add	r1, pc, #4	; (adr r1, 800bf80 <_printf_i+0x40>)
 800bf7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf80:	0800bfd9 	.word	0x0800bfd9
 800bf84:	0800bfed 	.word	0x0800bfed
 800bf88:	0800bf69 	.word	0x0800bf69
 800bf8c:	0800bf69 	.word	0x0800bf69
 800bf90:	0800bf69 	.word	0x0800bf69
 800bf94:	0800bf69 	.word	0x0800bf69
 800bf98:	0800bfed 	.word	0x0800bfed
 800bf9c:	0800bf69 	.word	0x0800bf69
 800bfa0:	0800bf69 	.word	0x0800bf69
 800bfa4:	0800bf69 	.word	0x0800bf69
 800bfa8:	0800bf69 	.word	0x0800bf69
 800bfac:	0800c0f1 	.word	0x0800c0f1
 800bfb0:	0800c019 	.word	0x0800c019
 800bfb4:	0800c0ab 	.word	0x0800c0ab
 800bfb8:	0800bf69 	.word	0x0800bf69
 800bfbc:	0800bf69 	.word	0x0800bf69
 800bfc0:	0800c113 	.word	0x0800c113
 800bfc4:	0800bf69 	.word	0x0800bf69
 800bfc8:	0800c019 	.word	0x0800c019
 800bfcc:	0800bf69 	.word	0x0800bf69
 800bfd0:	0800bf69 	.word	0x0800bf69
 800bfd4:	0800c0b3 	.word	0x0800c0b3
 800bfd8:	682b      	ldr	r3, [r5, #0]
 800bfda:	1d1a      	adds	r2, r3, #4
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	602a      	str	r2, [r5, #0]
 800bfe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfe8:	2301      	movs	r3, #1
 800bfea:	e09f      	b.n	800c12c <_printf_i+0x1ec>
 800bfec:	6820      	ldr	r0, [r4, #0]
 800bfee:	682b      	ldr	r3, [r5, #0]
 800bff0:	0607      	lsls	r7, r0, #24
 800bff2:	f103 0104 	add.w	r1, r3, #4
 800bff6:	6029      	str	r1, [r5, #0]
 800bff8:	d501      	bpl.n	800bffe <_printf_i+0xbe>
 800bffa:	681e      	ldr	r6, [r3, #0]
 800bffc:	e003      	b.n	800c006 <_printf_i+0xc6>
 800bffe:	0646      	lsls	r6, r0, #25
 800c000:	d5fb      	bpl.n	800bffa <_printf_i+0xba>
 800c002:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c006:	2e00      	cmp	r6, #0
 800c008:	da03      	bge.n	800c012 <_printf_i+0xd2>
 800c00a:	232d      	movs	r3, #45	; 0x2d
 800c00c:	4276      	negs	r6, r6
 800c00e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c012:	485a      	ldr	r0, [pc, #360]	; (800c17c <_printf_i+0x23c>)
 800c014:	230a      	movs	r3, #10
 800c016:	e012      	b.n	800c03e <_printf_i+0xfe>
 800c018:	682b      	ldr	r3, [r5, #0]
 800c01a:	6820      	ldr	r0, [r4, #0]
 800c01c:	1d19      	adds	r1, r3, #4
 800c01e:	6029      	str	r1, [r5, #0]
 800c020:	0605      	lsls	r5, r0, #24
 800c022:	d501      	bpl.n	800c028 <_printf_i+0xe8>
 800c024:	681e      	ldr	r6, [r3, #0]
 800c026:	e002      	b.n	800c02e <_printf_i+0xee>
 800c028:	0641      	lsls	r1, r0, #25
 800c02a:	d5fb      	bpl.n	800c024 <_printf_i+0xe4>
 800c02c:	881e      	ldrh	r6, [r3, #0]
 800c02e:	4853      	ldr	r0, [pc, #332]	; (800c17c <_printf_i+0x23c>)
 800c030:	2f6f      	cmp	r7, #111	; 0x6f
 800c032:	bf0c      	ite	eq
 800c034:	2308      	moveq	r3, #8
 800c036:	230a      	movne	r3, #10
 800c038:	2100      	movs	r1, #0
 800c03a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c03e:	6865      	ldr	r5, [r4, #4]
 800c040:	60a5      	str	r5, [r4, #8]
 800c042:	2d00      	cmp	r5, #0
 800c044:	bfa2      	ittt	ge
 800c046:	6821      	ldrge	r1, [r4, #0]
 800c048:	f021 0104 	bicge.w	r1, r1, #4
 800c04c:	6021      	strge	r1, [r4, #0]
 800c04e:	b90e      	cbnz	r6, 800c054 <_printf_i+0x114>
 800c050:	2d00      	cmp	r5, #0
 800c052:	d04b      	beq.n	800c0ec <_printf_i+0x1ac>
 800c054:	4615      	mov	r5, r2
 800c056:	fbb6 f1f3 	udiv	r1, r6, r3
 800c05a:	fb03 6711 	mls	r7, r3, r1, r6
 800c05e:	5dc7      	ldrb	r7, [r0, r7]
 800c060:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c064:	4637      	mov	r7, r6
 800c066:	42bb      	cmp	r3, r7
 800c068:	460e      	mov	r6, r1
 800c06a:	d9f4      	bls.n	800c056 <_printf_i+0x116>
 800c06c:	2b08      	cmp	r3, #8
 800c06e:	d10b      	bne.n	800c088 <_printf_i+0x148>
 800c070:	6823      	ldr	r3, [r4, #0]
 800c072:	07de      	lsls	r6, r3, #31
 800c074:	d508      	bpl.n	800c088 <_printf_i+0x148>
 800c076:	6923      	ldr	r3, [r4, #16]
 800c078:	6861      	ldr	r1, [r4, #4]
 800c07a:	4299      	cmp	r1, r3
 800c07c:	bfde      	ittt	le
 800c07e:	2330      	movle	r3, #48	; 0x30
 800c080:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c084:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c088:	1b52      	subs	r2, r2, r5
 800c08a:	6122      	str	r2, [r4, #16]
 800c08c:	f8cd a000 	str.w	sl, [sp]
 800c090:	464b      	mov	r3, r9
 800c092:	aa03      	add	r2, sp, #12
 800c094:	4621      	mov	r1, r4
 800c096:	4640      	mov	r0, r8
 800c098:	f7ff fee4 	bl	800be64 <_printf_common>
 800c09c:	3001      	adds	r0, #1
 800c09e:	d14a      	bne.n	800c136 <_printf_i+0x1f6>
 800c0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a4:	b004      	add	sp, #16
 800c0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	f043 0320 	orr.w	r3, r3, #32
 800c0b0:	6023      	str	r3, [r4, #0]
 800c0b2:	4833      	ldr	r0, [pc, #204]	; (800c180 <_printf_i+0x240>)
 800c0b4:	2778      	movs	r7, #120	; 0x78
 800c0b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c0ba:	6823      	ldr	r3, [r4, #0]
 800c0bc:	6829      	ldr	r1, [r5, #0]
 800c0be:	061f      	lsls	r7, r3, #24
 800c0c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c0c4:	d402      	bmi.n	800c0cc <_printf_i+0x18c>
 800c0c6:	065f      	lsls	r7, r3, #25
 800c0c8:	bf48      	it	mi
 800c0ca:	b2b6      	uxthmi	r6, r6
 800c0cc:	07df      	lsls	r7, r3, #31
 800c0ce:	bf48      	it	mi
 800c0d0:	f043 0320 	orrmi.w	r3, r3, #32
 800c0d4:	6029      	str	r1, [r5, #0]
 800c0d6:	bf48      	it	mi
 800c0d8:	6023      	strmi	r3, [r4, #0]
 800c0da:	b91e      	cbnz	r6, 800c0e4 <_printf_i+0x1a4>
 800c0dc:	6823      	ldr	r3, [r4, #0]
 800c0de:	f023 0320 	bic.w	r3, r3, #32
 800c0e2:	6023      	str	r3, [r4, #0]
 800c0e4:	2310      	movs	r3, #16
 800c0e6:	e7a7      	b.n	800c038 <_printf_i+0xf8>
 800c0e8:	4824      	ldr	r0, [pc, #144]	; (800c17c <_printf_i+0x23c>)
 800c0ea:	e7e4      	b.n	800c0b6 <_printf_i+0x176>
 800c0ec:	4615      	mov	r5, r2
 800c0ee:	e7bd      	b.n	800c06c <_printf_i+0x12c>
 800c0f0:	682b      	ldr	r3, [r5, #0]
 800c0f2:	6826      	ldr	r6, [r4, #0]
 800c0f4:	6961      	ldr	r1, [r4, #20]
 800c0f6:	1d18      	adds	r0, r3, #4
 800c0f8:	6028      	str	r0, [r5, #0]
 800c0fa:	0635      	lsls	r5, r6, #24
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	d501      	bpl.n	800c104 <_printf_i+0x1c4>
 800c100:	6019      	str	r1, [r3, #0]
 800c102:	e002      	b.n	800c10a <_printf_i+0x1ca>
 800c104:	0670      	lsls	r0, r6, #25
 800c106:	d5fb      	bpl.n	800c100 <_printf_i+0x1c0>
 800c108:	8019      	strh	r1, [r3, #0]
 800c10a:	2300      	movs	r3, #0
 800c10c:	6123      	str	r3, [r4, #16]
 800c10e:	4615      	mov	r5, r2
 800c110:	e7bc      	b.n	800c08c <_printf_i+0x14c>
 800c112:	682b      	ldr	r3, [r5, #0]
 800c114:	1d1a      	adds	r2, r3, #4
 800c116:	602a      	str	r2, [r5, #0]
 800c118:	681d      	ldr	r5, [r3, #0]
 800c11a:	6862      	ldr	r2, [r4, #4]
 800c11c:	2100      	movs	r1, #0
 800c11e:	4628      	mov	r0, r5
 800c120:	f7f4 f856 	bl	80001d0 <memchr>
 800c124:	b108      	cbz	r0, 800c12a <_printf_i+0x1ea>
 800c126:	1b40      	subs	r0, r0, r5
 800c128:	6060      	str	r0, [r4, #4]
 800c12a:	6863      	ldr	r3, [r4, #4]
 800c12c:	6123      	str	r3, [r4, #16]
 800c12e:	2300      	movs	r3, #0
 800c130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c134:	e7aa      	b.n	800c08c <_printf_i+0x14c>
 800c136:	6923      	ldr	r3, [r4, #16]
 800c138:	462a      	mov	r2, r5
 800c13a:	4649      	mov	r1, r9
 800c13c:	4640      	mov	r0, r8
 800c13e:	47d0      	blx	sl
 800c140:	3001      	adds	r0, #1
 800c142:	d0ad      	beq.n	800c0a0 <_printf_i+0x160>
 800c144:	6823      	ldr	r3, [r4, #0]
 800c146:	079b      	lsls	r3, r3, #30
 800c148:	d413      	bmi.n	800c172 <_printf_i+0x232>
 800c14a:	68e0      	ldr	r0, [r4, #12]
 800c14c:	9b03      	ldr	r3, [sp, #12]
 800c14e:	4298      	cmp	r0, r3
 800c150:	bfb8      	it	lt
 800c152:	4618      	movlt	r0, r3
 800c154:	e7a6      	b.n	800c0a4 <_printf_i+0x164>
 800c156:	2301      	movs	r3, #1
 800c158:	4632      	mov	r2, r6
 800c15a:	4649      	mov	r1, r9
 800c15c:	4640      	mov	r0, r8
 800c15e:	47d0      	blx	sl
 800c160:	3001      	adds	r0, #1
 800c162:	d09d      	beq.n	800c0a0 <_printf_i+0x160>
 800c164:	3501      	adds	r5, #1
 800c166:	68e3      	ldr	r3, [r4, #12]
 800c168:	9903      	ldr	r1, [sp, #12]
 800c16a:	1a5b      	subs	r3, r3, r1
 800c16c:	42ab      	cmp	r3, r5
 800c16e:	dcf2      	bgt.n	800c156 <_printf_i+0x216>
 800c170:	e7eb      	b.n	800c14a <_printf_i+0x20a>
 800c172:	2500      	movs	r5, #0
 800c174:	f104 0619 	add.w	r6, r4, #25
 800c178:	e7f5      	b.n	800c166 <_printf_i+0x226>
 800c17a:	bf00      	nop
 800c17c:	0800c86d 	.word	0x0800c86d
 800c180:	0800c87e 	.word	0x0800c87e

0800c184 <__sflush_r>:
 800c184:	898a      	ldrh	r2, [r1, #12]
 800c186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c18a:	4605      	mov	r5, r0
 800c18c:	0710      	lsls	r0, r2, #28
 800c18e:	460c      	mov	r4, r1
 800c190:	d458      	bmi.n	800c244 <__sflush_r+0xc0>
 800c192:	684b      	ldr	r3, [r1, #4]
 800c194:	2b00      	cmp	r3, #0
 800c196:	dc05      	bgt.n	800c1a4 <__sflush_r+0x20>
 800c198:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	dc02      	bgt.n	800c1a4 <__sflush_r+0x20>
 800c19e:	2000      	movs	r0, #0
 800c1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1a6:	2e00      	cmp	r6, #0
 800c1a8:	d0f9      	beq.n	800c19e <__sflush_r+0x1a>
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1b0:	682f      	ldr	r7, [r5, #0]
 800c1b2:	6a21      	ldr	r1, [r4, #32]
 800c1b4:	602b      	str	r3, [r5, #0]
 800c1b6:	d032      	beq.n	800c21e <__sflush_r+0x9a>
 800c1b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1ba:	89a3      	ldrh	r3, [r4, #12]
 800c1bc:	075a      	lsls	r2, r3, #29
 800c1be:	d505      	bpl.n	800c1cc <__sflush_r+0x48>
 800c1c0:	6863      	ldr	r3, [r4, #4]
 800c1c2:	1ac0      	subs	r0, r0, r3
 800c1c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1c6:	b10b      	cbz	r3, 800c1cc <__sflush_r+0x48>
 800c1c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1ca:	1ac0      	subs	r0, r0, r3
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1d2:	6a21      	ldr	r1, [r4, #32]
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	47b0      	blx	r6
 800c1d8:	1c43      	adds	r3, r0, #1
 800c1da:	89a3      	ldrh	r3, [r4, #12]
 800c1dc:	d106      	bne.n	800c1ec <__sflush_r+0x68>
 800c1de:	6829      	ldr	r1, [r5, #0]
 800c1e0:	291d      	cmp	r1, #29
 800c1e2:	d82b      	bhi.n	800c23c <__sflush_r+0xb8>
 800c1e4:	4a29      	ldr	r2, [pc, #164]	; (800c28c <__sflush_r+0x108>)
 800c1e6:	410a      	asrs	r2, r1
 800c1e8:	07d6      	lsls	r6, r2, #31
 800c1ea:	d427      	bmi.n	800c23c <__sflush_r+0xb8>
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	6062      	str	r2, [r4, #4]
 800c1f0:	04d9      	lsls	r1, r3, #19
 800c1f2:	6922      	ldr	r2, [r4, #16]
 800c1f4:	6022      	str	r2, [r4, #0]
 800c1f6:	d504      	bpl.n	800c202 <__sflush_r+0x7e>
 800c1f8:	1c42      	adds	r2, r0, #1
 800c1fa:	d101      	bne.n	800c200 <__sflush_r+0x7c>
 800c1fc:	682b      	ldr	r3, [r5, #0]
 800c1fe:	b903      	cbnz	r3, 800c202 <__sflush_r+0x7e>
 800c200:	6560      	str	r0, [r4, #84]	; 0x54
 800c202:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c204:	602f      	str	r7, [r5, #0]
 800c206:	2900      	cmp	r1, #0
 800c208:	d0c9      	beq.n	800c19e <__sflush_r+0x1a>
 800c20a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c20e:	4299      	cmp	r1, r3
 800c210:	d002      	beq.n	800c218 <__sflush_r+0x94>
 800c212:	4628      	mov	r0, r5
 800c214:	f7ff fc96 	bl	800bb44 <_free_r>
 800c218:	2000      	movs	r0, #0
 800c21a:	6360      	str	r0, [r4, #52]	; 0x34
 800c21c:	e7c0      	b.n	800c1a0 <__sflush_r+0x1c>
 800c21e:	2301      	movs	r3, #1
 800c220:	4628      	mov	r0, r5
 800c222:	47b0      	blx	r6
 800c224:	1c41      	adds	r1, r0, #1
 800c226:	d1c8      	bne.n	800c1ba <__sflush_r+0x36>
 800c228:	682b      	ldr	r3, [r5, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d0c5      	beq.n	800c1ba <__sflush_r+0x36>
 800c22e:	2b1d      	cmp	r3, #29
 800c230:	d001      	beq.n	800c236 <__sflush_r+0xb2>
 800c232:	2b16      	cmp	r3, #22
 800c234:	d101      	bne.n	800c23a <__sflush_r+0xb6>
 800c236:	602f      	str	r7, [r5, #0]
 800c238:	e7b1      	b.n	800c19e <__sflush_r+0x1a>
 800c23a:	89a3      	ldrh	r3, [r4, #12]
 800c23c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c240:	81a3      	strh	r3, [r4, #12]
 800c242:	e7ad      	b.n	800c1a0 <__sflush_r+0x1c>
 800c244:	690f      	ldr	r7, [r1, #16]
 800c246:	2f00      	cmp	r7, #0
 800c248:	d0a9      	beq.n	800c19e <__sflush_r+0x1a>
 800c24a:	0793      	lsls	r3, r2, #30
 800c24c:	680e      	ldr	r6, [r1, #0]
 800c24e:	bf08      	it	eq
 800c250:	694b      	ldreq	r3, [r1, #20]
 800c252:	600f      	str	r7, [r1, #0]
 800c254:	bf18      	it	ne
 800c256:	2300      	movne	r3, #0
 800c258:	eba6 0807 	sub.w	r8, r6, r7
 800c25c:	608b      	str	r3, [r1, #8]
 800c25e:	f1b8 0f00 	cmp.w	r8, #0
 800c262:	dd9c      	ble.n	800c19e <__sflush_r+0x1a>
 800c264:	6a21      	ldr	r1, [r4, #32]
 800c266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c268:	4643      	mov	r3, r8
 800c26a:	463a      	mov	r2, r7
 800c26c:	4628      	mov	r0, r5
 800c26e:	47b0      	blx	r6
 800c270:	2800      	cmp	r0, #0
 800c272:	dc06      	bgt.n	800c282 <__sflush_r+0xfe>
 800c274:	89a3      	ldrh	r3, [r4, #12]
 800c276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c27a:	81a3      	strh	r3, [r4, #12]
 800c27c:	f04f 30ff 	mov.w	r0, #4294967295
 800c280:	e78e      	b.n	800c1a0 <__sflush_r+0x1c>
 800c282:	4407      	add	r7, r0
 800c284:	eba8 0800 	sub.w	r8, r8, r0
 800c288:	e7e9      	b.n	800c25e <__sflush_r+0xda>
 800c28a:	bf00      	nop
 800c28c:	dfbffffe 	.word	0xdfbffffe

0800c290 <_fflush_r>:
 800c290:	b538      	push	{r3, r4, r5, lr}
 800c292:	690b      	ldr	r3, [r1, #16]
 800c294:	4605      	mov	r5, r0
 800c296:	460c      	mov	r4, r1
 800c298:	b913      	cbnz	r3, 800c2a0 <_fflush_r+0x10>
 800c29a:	2500      	movs	r5, #0
 800c29c:	4628      	mov	r0, r5
 800c29e:	bd38      	pop	{r3, r4, r5, pc}
 800c2a0:	b118      	cbz	r0, 800c2aa <_fflush_r+0x1a>
 800c2a2:	6a03      	ldr	r3, [r0, #32]
 800c2a4:	b90b      	cbnz	r3, 800c2aa <_fflush_r+0x1a>
 800c2a6:	f7ff fa47 	bl	800b738 <__sinit>
 800c2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d0f3      	beq.n	800c29a <_fflush_r+0xa>
 800c2b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2b4:	07d0      	lsls	r0, r2, #31
 800c2b6:	d404      	bmi.n	800c2c2 <_fflush_r+0x32>
 800c2b8:	0599      	lsls	r1, r3, #22
 800c2ba:	d402      	bmi.n	800c2c2 <_fflush_r+0x32>
 800c2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2be:	f7ff fc3f 	bl	800bb40 <__retarget_lock_acquire_recursive>
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	4621      	mov	r1, r4
 800c2c6:	f7ff ff5d 	bl	800c184 <__sflush_r>
 800c2ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2cc:	07da      	lsls	r2, r3, #31
 800c2ce:	4605      	mov	r5, r0
 800c2d0:	d4e4      	bmi.n	800c29c <_fflush_r+0xc>
 800c2d2:	89a3      	ldrh	r3, [r4, #12]
 800c2d4:	059b      	lsls	r3, r3, #22
 800c2d6:	d4e1      	bmi.n	800c29c <_fflush_r+0xc>
 800c2d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2da:	f7ff fc32 	bl	800bb42 <__retarget_lock_release_recursive>
 800c2de:	e7dd      	b.n	800c29c <_fflush_r+0xc>

0800c2e0 <__swhatbuf_r>:
 800c2e0:	b570      	push	{r4, r5, r6, lr}
 800c2e2:	460c      	mov	r4, r1
 800c2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2e8:	2900      	cmp	r1, #0
 800c2ea:	b096      	sub	sp, #88	; 0x58
 800c2ec:	4615      	mov	r5, r2
 800c2ee:	461e      	mov	r6, r3
 800c2f0:	da0d      	bge.n	800c30e <__swhatbuf_r+0x2e>
 800c2f2:	89a3      	ldrh	r3, [r4, #12]
 800c2f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c2f8:	f04f 0100 	mov.w	r1, #0
 800c2fc:	bf0c      	ite	eq
 800c2fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c302:	2340      	movne	r3, #64	; 0x40
 800c304:	2000      	movs	r0, #0
 800c306:	6031      	str	r1, [r6, #0]
 800c308:	602b      	str	r3, [r5, #0]
 800c30a:	b016      	add	sp, #88	; 0x58
 800c30c:	bd70      	pop	{r4, r5, r6, pc}
 800c30e:	466a      	mov	r2, sp
 800c310:	f000 f848 	bl	800c3a4 <_fstat_r>
 800c314:	2800      	cmp	r0, #0
 800c316:	dbec      	blt.n	800c2f2 <__swhatbuf_r+0x12>
 800c318:	9901      	ldr	r1, [sp, #4]
 800c31a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c31e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c322:	4259      	negs	r1, r3
 800c324:	4159      	adcs	r1, r3
 800c326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c32a:	e7eb      	b.n	800c304 <__swhatbuf_r+0x24>

0800c32c <__smakebuf_r>:
 800c32c:	898b      	ldrh	r3, [r1, #12]
 800c32e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c330:	079d      	lsls	r5, r3, #30
 800c332:	4606      	mov	r6, r0
 800c334:	460c      	mov	r4, r1
 800c336:	d507      	bpl.n	800c348 <__smakebuf_r+0x1c>
 800c338:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c33c:	6023      	str	r3, [r4, #0]
 800c33e:	6123      	str	r3, [r4, #16]
 800c340:	2301      	movs	r3, #1
 800c342:	6163      	str	r3, [r4, #20]
 800c344:	b002      	add	sp, #8
 800c346:	bd70      	pop	{r4, r5, r6, pc}
 800c348:	ab01      	add	r3, sp, #4
 800c34a:	466a      	mov	r2, sp
 800c34c:	f7ff ffc8 	bl	800c2e0 <__swhatbuf_r>
 800c350:	9900      	ldr	r1, [sp, #0]
 800c352:	4605      	mov	r5, r0
 800c354:	4630      	mov	r0, r6
 800c356:	f7ff f8e9 	bl	800b52c <_malloc_r>
 800c35a:	b948      	cbnz	r0, 800c370 <__smakebuf_r+0x44>
 800c35c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c360:	059a      	lsls	r2, r3, #22
 800c362:	d4ef      	bmi.n	800c344 <__smakebuf_r+0x18>
 800c364:	f023 0303 	bic.w	r3, r3, #3
 800c368:	f043 0302 	orr.w	r3, r3, #2
 800c36c:	81a3      	strh	r3, [r4, #12]
 800c36e:	e7e3      	b.n	800c338 <__smakebuf_r+0xc>
 800c370:	89a3      	ldrh	r3, [r4, #12]
 800c372:	6020      	str	r0, [r4, #0]
 800c374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c378:	81a3      	strh	r3, [r4, #12]
 800c37a:	9b00      	ldr	r3, [sp, #0]
 800c37c:	6163      	str	r3, [r4, #20]
 800c37e:	9b01      	ldr	r3, [sp, #4]
 800c380:	6120      	str	r0, [r4, #16]
 800c382:	b15b      	cbz	r3, 800c39c <__smakebuf_r+0x70>
 800c384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c388:	4630      	mov	r0, r6
 800c38a:	f000 f81d 	bl	800c3c8 <_isatty_r>
 800c38e:	b128      	cbz	r0, 800c39c <__smakebuf_r+0x70>
 800c390:	89a3      	ldrh	r3, [r4, #12]
 800c392:	f023 0303 	bic.w	r3, r3, #3
 800c396:	f043 0301 	orr.w	r3, r3, #1
 800c39a:	81a3      	strh	r3, [r4, #12]
 800c39c:	89a3      	ldrh	r3, [r4, #12]
 800c39e:	431d      	orrs	r5, r3
 800c3a0:	81a5      	strh	r5, [r4, #12]
 800c3a2:	e7cf      	b.n	800c344 <__smakebuf_r+0x18>

0800c3a4 <_fstat_r>:
 800c3a4:	b538      	push	{r3, r4, r5, lr}
 800c3a6:	4d07      	ldr	r5, [pc, #28]	; (800c3c4 <_fstat_r+0x20>)
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	4608      	mov	r0, r1
 800c3ae:	4611      	mov	r1, r2
 800c3b0:	602b      	str	r3, [r5, #0]
 800c3b2:	f7f5 fb56 	bl	8001a62 <_fstat>
 800c3b6:	1c43      	adds	r3, r0, #1
 800c3b8:	d102      	bne.n	800c3c0 <_fstat_r+0x1c>
 800c3ba:	682b      	ldr	r3, [r5, #0]
 800c3bc:	b103      	cbz	r3, 800c3c0 <_fstat_r+0x1c>
 800c3be:	6023      	str	r3, [r4, #0]
 800c3c0:	bd38      	pop	{r3, r4, r5, pc}
 800c3c2:	bf00      	nop
 800c3c4:	200016fc 	.word	0x200016fc

0800c3c8 <_isatty_r>:
 800c3c8:	b538      	push	{r3, r4, r5, lr}
 800c3ca:	4d06      	ldr	r5, [pc, #24]	; (800c3e4 <_isatty_r+0x1c>)
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	4608      	mov	r0, r1
 800c3d2:	602b      	str	r3, [r5, #0]
 800c3d4:	f7f5 fb55 	bl	8001a82 <_isatty>
 800c3d8:	1c43      	adds	r3, r0, #1
 800c3da:	d102      	bne.n	800c3e2 <_isatty_r+0x1a>
 800c3dc:	682b      	ldr	r3, [r5, #0]
 800c3de:	b103      	cbz	r3, 800c3e2 <_isatty_r+0x1a>
 800c3e0:	6023      	str	r3, [r4, #0]
 800c3e2:	bd38      	pop	{r3, r4, r5, pc}
 800c3e4:	200016fc 	.word	0x200016fc

0800c3e8 <logf>:
 800c3e8:	b508      	push	{r3, lr}
 800c3ea:	ed2d 8b02 	vpush	{d8}
 800c3ee:	eeb0 8a40 	vmov.f32	s16, s0
 800c3f2:	f000 f8d9 	bl	800c5a8 <__ieee754_logf>
 800c3f6:	eeb4 8a48 	vcmp.f32	s16, s16
 800c3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3fe:	d60f      	bvs.n	800c420 <logf+0x38>
 800c400:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c408:	dc0a      	bgt.n	800c420 <logf+0x38>
 800c40a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c412:	d108      	bne.n	800c426 <logf+0x3e>
 800c414:	f7ff fb6a 	bl	800baec <__errno>
 800c418:	2322      	movs	r3, #34	; 0x22
 800c41a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800c43c <logf+0x54>
 800c41e:	6003      	str	r3, [r0, #0]
 800c420:	ecbd 8b02 	vpop	{d8}
 800c424:	bd08      	pop	{r3, pc}
 800c426:	f7ff fb61 	bl	800baec <__errno>
 800c42a:	ecbd 8b02 	vpop	{d8}
 800c42e:	2321      	movs	r3, #33	; 0x21
 800c430:	6003      	str	r3, [r0, #0]
 800c432:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c436:	4802      	ldr	r0, [pc, #8]	; (800c440 <logf+0x58>)
 800c438:	f000 b874 	b.w	800c524 <nanf>
 800c43c:	ff800000 	.word	0xff800000
 800c440:	0800c861 	.word	0x0800c861

0800c444 <sqrtf>:
 800c444:	b508      	push	{r3, lr}
 800c446:	ed2d 8b02 	vpush	{d8}
 800c44a:	eeb0 8a40 	vmov.f32	s16, s0
 800c44e:	f000 f8a7 	bl	800c5a0 <__ieee754_sqrtf>
 800c452:	eeb4 8a48 	vcmp.f32	s16, s16
 800c456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c45a:	d60c      	bvs.n	800c476 <sqrtf+0x32>
 800c45c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800c47c <sqrtf+0x38>
 800c460:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c468:	d505      	bpl.n	800c476 <sqrtf+0x32>
 800c46a:	f7ff fb3f 	bl	800baec <__errno>
 800c46e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c472:	2321      	movs	r3, #33	; 0x21
 800c474:	6003      	str	r3, [r0, #0]
 800c476:	ecbd 8b02 	vpop	{d8}
 800c47a:	bd08      	pop	{r3, pc}
 800c47c:	00000000 	.word	0x00000000

0800c480 <fmax>:
 800c480:	b508      	push	{r3, lr}
 800c482:	ed2d 8b04 	vpush	{d8-d9}
 800c486:	eeb0 8a40 	vmov.f32	s16, s0
 800c48a:	eef0 8a60 	vmov.f32	s17, s1
 800c48e:	eeb0 9a41 	vmov.f32	s18, s2
 800c492:	eef0 9a61 	vmov.f32	s19, s3
 800c496:	f000 f81b 	bl	800c4d0 <__fpclassifyd>
 800c49a:	b168      	cbz	r0, 800c4b8 <fmax+0x38>
 800c49c:	eeb0 0a49 	vmov.f32	s0, s18
 800c4a0:	eef0 0a69 	vmov.f32	s1, s19
 800c4a4:	f000 f814 	bl	800c4d0 <__fpclassifyd>
 800c4a8:	b150      	cbz	r0, 800c4c0 <fmax+0x40>
 800c4aa:	ec53 2b19 	vmov	r2, r3, d9
 800c4ae:	ec51 0b18 	vmov	r0, r1, d8
 800c4b2:	f7f4 fa41 	bl	8000938 <__aeabi_dcmpgt>
 800c4b6:	b918      	cbnz	r0, 800c4c0 <fmax+0x40>
 800c4b8:	eeb0 8a49 	vmov.f32	s16, s18
 800c4bc:	eef0 8a69 	vmov.f32	s17, s19
 800c4c0:	eeb0 0a48 	vmov.f32	s0, s16
 800c4c4:	eef0 0a68 	vmov.f32	s1, s17
 800c4c8:	ecbd 8b04 	vpop	{d8-d9}
 800c4cc:	bd08      	pop	{r3, pc}
	...

0800c4d0 <__fpclassifyd>:
 800c4d0:	ec51 0b10 	vmov	r0, r1, d0
 800c4d4:	b510      	push	{r4, lr}
 800c4d6:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800c4da:	460b      	mov	r3, r1
 800c4dc:	d019      	beq.n	800c512 <__fpclassifyd+0x42>
 800c4de:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800c4e2:	490e      	ldr	r1, [pc, #56]	; (800c51c <__fpclassifyd+0x4c>)
 800c4e4:	428a      	cmp	r2, r1
 800c4e6:	d90e      	bls.n	800c506 <__fpclassifyd+0x36>
 800c4e8:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 800c4ec:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800c4f0:	428a      	cmp	r2, r1
 800c4f2:	d908      	bls.n	800c506 <__fpclassifyd+0x36>
 800c4f4:	4a0a      	ldr	r2, [pc, #40]	; (800c520 <__fpclassifyd+0x50>)
 800c4f6:	4213      	tst	r3, r2
 800c4f8:	d007      	beq.n	800c50a <__fpclassifyd+0x3a>
 800c4fa:	4294      	cmp	r4, r2
 800c4fc:	d107      	bne.n	800c50e <__fpclassifyd+0x3e>
 800c4fe:	fab0 f080 	clz	r0, r0
 800c502:	0940      	lsrs	r0, r0, #5
 800c504:	bd10      	pop	{r4, pc}
 800c506:	2004      	movs	r0, #4
 800c508:	e7fc      	b.n	800c504 <__fpclassifyd+0x34>
 800c50a:	2003      	movs	r0, #3
 800c50c:	e7fa      	b.n	800c504 <__fpclassifyd+0x34>
 800c50e:	2000      	movs	r0, #0
 800c510:	e7f8      	b.n	800c504 <__fpclassifyd+0x34>
 800c512:	2800      	cmp	r0, #0
 800c514:	d1ee      	bne.n	800c4f4 <__fpclassifyd+0x24>
 800c516:	2002      	movs	r0, #2
 800c518:	e7f4      	b.n	800c504 <__fpclassifyd+0x34>
 800c51a:	bf00      	nop
 800c51c:	7fdfffff 	.word	0x7fdfffff
 800c520:	7ff00000 	.word	0x7ff00000

0800c524 <nanf>:
 800c524:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c52c <nanf+0x8>
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	7fc00000 	.word	0x7fc00000

0800c530 <fminf>:
 800c530:	b508      	push	{r3, lr}
 800c532:	ed2d 8b02 	vpush	{d8}
 800c536:	eeb0 8a40 	vmov.f32	s16, s0
 800c53a:	eef0 8a60 	vmov.f32	s17, s1
 800c53e:	f000 f813 	bl	800c568 <__fpclassifyf>
 800c542:	b148      	cbz	r0, 800c558 <fminf+0x28>
 800c544:	eeb0 0a68 	vmov.f32	s0, s17
 800c548:	f000 f80e 	bl	800c568 <__fpclassifyf>
 800c54c:	b130      	cbz	r0, 800c55c <fminf+0x2c>
 800c54e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c556:	d401      	bmi.n	800c55c <fminf+0x2c>
 800c558:	eeb0 8a68 	vmov.f32	s16, s17
 800c55c:	eeb0 0a48 	vmov.f32	s0, s16
 800c560:	ecbd 8b02 	vpop	{d8}
 800c564:	bd08      	pop	{r3, pc}
	...

0800c568 <__fpclassifyf>:
 800c568:	ee10 3a10 	vmov	r3, s0
 800c56c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800c570:	d00d      	beq.n	800c58e <__fpclassifyf+0x26>
 800c572:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800c576:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c57a:	d30a      	bcc.n	800c592 <__fpclassifyf+0x2a>
 800c57c:	4b07      	ldr	r3, [pc, #28]	; (800c59c <__fpclassifyf+0x34>)
 800c57e:	1e42      	subs	r2, r0, #1
 800c580:	429a      	cmp	r2, r3
 800c582:	d908      	bls.n	800c596 <__fpclassifyf+0x2e>
 800c584:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800c588:	4258      	negs	r0, r3
 800c58a:	4158      	adcs	r0, r3
 800c58c:	4770      	bx	lr
 800c58e:	2002      	movs	r0, #2
 800c590:	4770      	bx	lr
 800c592:	2004      	movs	r0, #4
 800c594:	4770      	bx	lr
 800c596:	2003      	movs	r0, #3
 800c598:	4770      	bx	lr
 800c59a:	bf00      	nop
 800c59c:	007ffffe 	.word	0x007ffffe

0800c5a0 <__ieee754_sqrtf>:
 800c5a0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c5a4:	4770      	bx	lr
	...

0800c5a8 <__ieee754_logf>:
 800c5a8:	ee10 3a10 	vmov	r3, s0
 800c5ac:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c5b0:	d106      	bne.n	800c5c0 <__ieee754_logf+0x18>
 800c5b2:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800c74c <__ieee754_logf+0x1a4>
 800c5b6:	eddf 7a66 	vldr	s15, [pc, #408]	; 800c750 <__ieee754_logf+0x1a8>
 800c5ba:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800c5be:	4770      	bx	lr
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	da02      	bge.n	800c5ca <__ieee754_logf+0x22>
 800c5c4:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c5c8:	e7f5      	b.n	800c5b6 <__ieee754_logf+0xe>
 800c5ca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c5ce:	db02      	blt.n	800c5d6 <__ieee754_logf+0x2e>
 800c5d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c5d4:	4770      	bx	lr
 800c5d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c5da:	bfb8      	it	lt
 800c5dc:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 800c754 <__ieee754_logf+0x1ac>
 800c5e0:	485d      	ldr	r0, [pc, #372]	; (800c758 <__ieee754_logf+0x1b0>)
 800c5e2:	bfbe      	ittt	lt
 800c5e4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c5e8:	f06f 0118 	mvnlt.w	r1, #24
 800c5ec:	ee17 3a90 	vmovlt	r3, s15
 800c5f0:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800c5f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c5f8:	4418      	add	r0, r3
 800c5fa:	bfa8      	it	ge
 800c5fc:	2100      	movge	r1, #0
 800c5fe:	3a7f      	subs	r2, #127	; 0x7f
 800c600:	440a      	add	r2, r1
 800c602:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800c606:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800c60a:	4319      	orrs	r1, r3
 800c60c:	ee00 1a10 	vmov	s0, r1
 800c610:	4952      	ldr	r1, [pc, #328]	; (800c75c <__ieee754_logf+0x1b4>)
 800c612:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800c616:	f103 000f 	add.w	r0, r3, #15
 800c61a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c61e:	4001      	ands	r1, r0
 800c620:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c624:	bb89      	cbnz	r1, 800c68a <__ieee754_logf+0xe2>
 800c626:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c62e:	d10f      	bne.n	800c650 <__ieee754_logf+0xa8>
 800c630:	2a00      	cmp	r2, #0
 800c632:	f000 8087 	beq.w	800c744 <__ieee754_logf+0x19c>
 800c636:	ee07 2a90 	vmov	s15, r2
 800c63a:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800c760 <__ieee754_logf+0x1b8>
 800c63e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c764 <__ieee754_logf+0x1bc>
 800c642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c646:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c64a:	eea7 0a87 	vfma.f32	s0, s15, s14
 800c64e:	4770      	bx	lr
 800c650:	eddf 6a45 	vldr	s13, [pc, #276]	; 800c768 <__ieee754_logf+0x1c0>
 800c654:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c658:	eee0 7a66 	vfms.f32	s15, s0, s13
 800c65c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c660:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c664:	b912      	cbnz	r2, 800c66c <__ieee754_logf+0xc4>
 800c666:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c66a:	4770      	bx	lr
 800c66c:	ee07 2a90 	vmov	s15, r2
 800c670:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c760 <__ieee754_logf+0x1b8>
 800c674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c678:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c67c:	ee37 0a40 	vsub.f32	s0, s14, s0
 800c680:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800c764 <__ieee754_logf+0x1bc>
 800c684:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800c688:	4770      	bx	lr
 800c68a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c68e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c692:	eddf 5a36 	vldr	s11, [pc, #216]	; 800c76c <__ieee754_logf+0x1c4>
 800c696:	eddf 4a36 	vldr	s9, [pc, #216]	; 800c770 <__ieee754_logf+0x1c8>
 800c69a:	4936      	ldr	r1, [pc, #216]	; (800c774 <__ieee754_logf+0x1cc>)
 800c69c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800c6a0:	4419      	add	r1, r3
 800c6a2:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800c6a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c6aa:	430b      	orrs	r3, r1
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	ee07 2a90 	vmov	s15, r2
 800c6b2:	ee26 5a06 	vmul.f32	s10, s12, s12
 800c6b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c6ba:	ee25 7a05 	vmul.f32	s14, s10, s10
 800c6be:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800c778 <__ieee754_logf+0x1d0>
 800c6c2:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c6c6:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800c77c <__ieee754_logf+0x1d4>
 800c6ca:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c6ce:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800c780 <__ieee754_logf+0x1d8>
 800c6d2:	eee7 7a24 	vfma.f32	s15, s14, s9
 800c6d6:	eddf 4a2b 	vldr	s9, [pc, #172]	; 800c784 <__ieee754_logf+0x1dc>
 800c6da:	eee7 4a87 	vfma.f32	s9, s15, s14
 800c6de:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800c788 <__ieee754_logf+0x1e0>
 800c6e2:	eee4 7a87 	vfma.f32	s15, s9, s14
 800c6e6:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c6ea:	eee5 7a87 	vfma.f32	s15, s11, s14
 800c6ee:	dd1a      	ble.n	800c726 <__ieee754_logf+0x17e>
 800c6f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c6f4:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c6f8:	ee27 7a00 	vmul.f32	s14, s14, s0
 800c6fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c700:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c704:	b912      	cbnz	r2, 800c70c <__ieee754_logf+0x164>
 800c706:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c70a:	e7ac      	b.n	800c666 <__ieee754_logf+0xbe>
 800c70c:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800c760 <__ieee754_logf+0x1b8>
 800c710:	eee6 7a86 	vfma.f32	s15, s13, s12
 800c714:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c718:	ee37 0a40 	vsub.f32	s0, s14, s0
 800c71c:	eddf 7a11 	vldr	s15, [pc, #68]	; 800c764 <__ieee754_logf+0x1bc>
 800c720:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800c724:	4770      	bx	lr
 800c726:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c72a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c72e:	b912      	cbnz	r2, 800c736 <__ieee754_logf+0x18e>
 800c730:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c734:	4770      	bx	lr
 800c736:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800c760 <__ieee754_logf+0x1b8>
 800c73a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c73e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c742:	e7eb      	b.n	800c71c <__ieee754_logf+0x174>
 800c744:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800c750 <__ieee754_logf+0x1a8>
 800c748:	4770      	bx	lr
 800c74a:	bf00      	nop
 800c74c:	cc000000 	.word	0xcc000000
 800c750:	00000000 	.word	0x00000000
 800c754:	4c000000 	.word	0x4c000000
 800c758:	004afb20 	.word	0x004afb20
 800c75c:	007ffff0 	.word	0x007ffff0
 800c760:	3717f7d1 	.word	0x3717f7d1
 800c764:	3f317180 	.word	0x3f317180
 800c768:	3eaaaaab 	.word	0x3eaaaaab
 800c76c:	3e1cd04f 	.word	0x3e1cd04f
 800c770:	3e178897 	.word	0x3e178897
 800c774:	ffcf5c30 	.word	0xffcf5c30
 800c778:	3e638e29 	.word	0x3e638e29
 800c77c:	3ecccccd 	.word	0x3ecccccd
 800c780:	3e3a3325 	.word	0x3e3a3325
 800c784:	3e924925 	.word	0x3e924925
 800c788:	3f2aaaab 	.word	0x3f2aaaab

0800c78c <_init>:
 800c78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c78e:	bf00      	nop
 800c790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c792:	bc08      	pop	{r3}
 800c794:	469e      	mov	lr, r3
 800c796:	4770      	bx	lr

0800c798 <_fini>:
 800c798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c79a:	bf00      	nop
 800c79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c79e:	bc08      	pop	{r3}
 800c7a0:	469e      	mov	lr, r3
 800c7a2:	4770      	bx	lr
